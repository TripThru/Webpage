# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

class TripThru

    constructor: (@baseUrl, @accessToken) ->
        if not @baseUrl? or not @accessToken?
            console.error('Wrong parameters')

    getStats: (_callback) =>
        $.get(@baseUrl + 'stats?format=json&access_token=' + @accessToken, (data) =>
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getLog: (tripId, _callback) =>
        id = if tripId? then '&tripId=' + tripId else ''
        $.get(@baseUrl + 'log?format=json&access_token=' + @accessToken + id, (data) =>
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getTrips: (status, _callback) =>
        status = if status? then '&status=' + status else ''
        $.get(@baseUrl + 'trips?format=json&access_token=' + @accessToken + status, (data) =>
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getTripStatus: (tripId, _callback) =>
        $.get(@baseUrl + 'tripstatus?format=json&access_token=' + @accessToken + '&tripid=' + tripId, (data) =>
            if data.result == 'OK'
                $.get(@baseUrl + 'routetrip?format=json&access_token=' + @accessToken + '&tripid=' + tripId, (trip) =>
                    data.historyEnrouteList = trip.historyEnrouteList
                    data.historyPickUpList = trip.historyPickUpList
                    _callback(data)
                ).error( ->
                    _callback(null)
                )
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getPartners: (_callback) =>
        $.get(@baseUrl + 'partners?format=json&access_token=' + @accessToken, (data) =>
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

tripthruUrl = 'http://107.170.240.134/TripThru.TripThruGateway/'

########## DASHBOARD #########

class ActiveTripsChart

    constructor: (chartContainer) ->
        @chart = new JustGage({
            id: chartContainer
            value: 0
            min: 0
            max: 10
            label: 'trips'
            relativeGaugeSize: true
        })
        @activeTripsCount = []
        @max = 0

    updateStats: (stats) =>
        @update(stats.activeTrips, stats.activeTrips)

    update: (activeTrips, selectedTypeActiveTrips) =>
        if not activeTrips? or not selectedTypeActiveTrips?
            console.error('Wrong parameters')
            return

        @max = if activeTrips > @max then activeTrips else @max
        upperLimit = if @max < 10 then 10 else Math.ceil(@max * 1.4)

        @chart.refresh(selectedTypeActiveTrips, upperLimit)

class Location
    addressById = {}

    constructor: (@lat, @lng, @address) ->
        @id = '<' + @lat + ',' + @lng + '>'
        @gettingAddress = false
        if @id of addressById
            @address = addressById[@id]
        else
            @setAddress()

    getAddress: () =>
        if @id of addressById
            addressById[@id]
        else
            @setAddress()
            null

    setAddress: () =>
        if not @gettingAddress
            @gettingAddress = true
            $.ajax
                url: "http://maps.googleapis.com/maps/api/geocode/json?latlng=" + @lat + "," + @lng + "&sensor=false"
                dataType: 'json'
                success: (data) =>
                    if data.results? and data.results.length > 0
                        if @id not of addressById
                            addressById[@id] = data.results[0].formatted_address
                    else
                        setTimeout(() =>
                            @setAddress()
                        ,1000)
                    @gettingAddress = false
                error: () =>
                    @gettingAddress = false


class Trip

    constructor: (@id, @passengerName, @pickupTime, @pickupLocation, @origin, @servicing, @status, @ETA,
                  @fare, @driverName, @driverLocation, @dropoffLocation, @driverInitialLocation) ->
        @containerId = id.replace(new RegExp('@', 'g'), '-').replace('.', '-')
        @passengerRating = (Math.random() * 2.5) + 2.5
        @driverRating = (Math.random() * 2.5) + 2.5

    update: (@status, @driverName, @driverLocation, @driverInitialLocation, @historyEnrouteList, @historyPickUpList) =>

    getContainerId: () =>
        @containerId
    getId: () =>
        @id
    getPassengerName: () =>
        @passengerName
    getPassengerRating: () =>
        @passengerRating
    getPickupTime: () =>
        @pickupTime
    getPickupLocation: () =>
        @pickupLocation
    getOrigin: () =>
        @origin
    getServicing: () =>
        @servicing
    getStatus: () =>
        @status
    getETA: () =>
        @ETA
    getFare: () =>
        @fare
    getDriverName: () =>
        @driverName
    getDriverLocation: () =>
        @driverLocation
    getDriverRating: () =>
        @driverRating
    getDropoffLocation: () =>
        @dropoffLocation
    getDriverInitialLocation: () =>
        @driverInitialLocation
    getHistoryEnrouteList: () =>
        @historyEnrouteList
    getHistoryPickUpList: () =>
        @historyPickUpList


class TripList

    constructor: (@containerId) ->
        @tripsInListById = {}
        @pendingUpdateTripsIds = []
        @currentStatus = null
        @statusChanged = false

    tripChanged: (trip) =>
        if not trip?
            $('#' + @containerId + '>div.active').removeClass('active')
        else
            if not $('#' + trip.getContainerId()).hasClass('active')
                $('#' + @containerId + '>div.active').removeClass('active')
                $("#" + trip.getContainerId()).addClass("active")

    updateStatus: (status) =>
        if @currentStatus != status
            @statusChanged = true
            if $('#triplist-loading').length <= 0
                $('#' + @containerId).prepend('<span id="triplist-loading"><%= image_tag('loading.gif') %></span>')
        @currentStatus = status

    updateTrips: (tripsById) =>
        if @statusChanged
            @statusChanged = false
            $('#' + @containerId).html('')
            for id, trip of tripsById
                @addTrip(trip)
        else
            for id, trip of tripsById
                if id not of @tripsInListById
                    @addTrip(trip)
            for id, trip of @tripsInListById
                if id not of tripsById
                    @removeTrip(trip)
                else
                    @updateTrip(trip)

    updateActiveTrip: (trip) =>

    addTrip: (trip) =>
        if !trip.getPickupLocation().getAddress()?
            @pendingUpdateTripsIds.push trip.getId()

        @tripsInListById[trip.getId()] = trip
        $('#' + @containerId).prepend @getTripTag(trip)
        $('#' + trip.getContainerId()).slideDown()

    updateTrip: (trip) =>
        if trip.getId() in @pendingUpdateTripsIds and trip.getPickupLocation().getAddress()?
            $('#' + trip.getContainerId()).find('.triplist-trip-pickup').fadeOut().html(trip.getPickupLocation().getAddress()).fadeIn()
            @pendingUpdateTripsIds.splice($.inArray(trip.getId(), @pendingUpdateTripsIds), 1);

    removeTrip: (trip) =>
        delete @tripsInListById[trip.getId()]
        $('#' + trip.getContainerId()).slideUp()


    getTripTag: (trip) =>
        tripPickupLocation = trip.getPickupLocation().getAddress()
        pickupLocation = if tripPickupLocation then tripPickupLocation else 'loading...'
        '
            <div class="well trip" id="' + trip.getContainerId() + '" style="display:none;">
                <h1>' + trip.getId() + '</h1>
                <p><span>Passenger:</span> <i>' + trip.getPassengerName() + '</i></p>
                <p><span>Time:</span> <i>' + trip.getPickupTime().split('.')[0] + '</i></p>
                <p><span>Pickup:</span> <i class="triplist-trip-pickup">' + pickupLocation + '</i></p>
            </div>
        '

class TripTracker

    constructor: (@tripInfoContainerId, @mapContainer) ->
        @passengerMarker = null
        @destinationMarker = null
        @driverMarker = null
        @initialMarker = null
        @map = null
        @mapOptions = null
        @directionsDisplay = null
        @directionsDisplay2 = null
        @directionsDisplay3 = null
        @directionsDisplay4 = null
        @turn = true
        @driverPreviousLocation = null
        @setTripInfoBool = false
        @tripId = null

        @passengerRatingChartId = 'passenger-rating'
        @driverRatingChartId = 'driver-rating'

    tripChanged: (trip) =>
        @tripId = null
        @driverPreviousLocation = null
        @updateTripInfo(trip)

    updateActiveTrip: (trip) =>
        @updateTripInfo(trip)
        @updateMap(trip)
        if trip?
            @tripId = trip.getId()

    updateTripInfo: (trip) =>
        if trip?
            tripPickupLocation = trip.getPickupLocation().getAddress()
            tripDropoffLocation = trip.getDropoffLocation().getAddress()
            tripDriverName = trip.getDriverName()
            tripDriverLocation = if trip.getDriverLocation()? then trip.getDriverLocation().getAddress() else null
            if !tripDriverLocation? and @driverPreviousLocation?
                tripDriverLocation = @driverPreviousLocation.getAddress()

            pickupLocation = if tripPickupLocation? then tripPickupLocation else 'loading...'
            dropoffLocation = if tripDropoffLocation? then tripDropoffLocation else 'loading...'
            driverLocation = if tripDriverLocation? then ' @ ' + tripDriverLocation else ''
            driver = if tripDriverName? then tripDriverName + driverLocation else ''

            $('#' + @tripInfoContainerId).html(
                '<div>
                    <h1>' + trip.getId() + '<span> - ' + trip.getStatus() + '</span></h1>
                    <div><span>Passenger: </span><p>' + trip.getPassengerName() + '  </p>
                       <div class="rating-container">
                            <div class="flexible-stars" data-isLocked="yes"
                                    data-init="0" id="' + @passengerRatingChartId + '"></div>
                       </div>
                    </div>
                    <div><span>Time: </span><p>' + trip.getPickupTime().split('.')[0] + '</p></div>
                    <div><span>Pickup: </span><p>' + pickupLocation + '</p></div>
                    <div><span>Dropoff: </span><p>' + dropoffLocation + '</p></div>
                    <div>
                      <span>Origin: </span><p>' + trip.getOrigin() + ' - </p>
                      <span>Servicing: </span><p>' + trip.getServicing() + '</p>
                    </div>
                    <div><span>Driver: </span><p>' + driver + '  </p>
                        <div class="rating-container">
                          <div class="flexible-stars" data-isLocked="yes"
                                     data-init="0" id="' + @driverRatingChartId + '"></div>
                        </div>
                    </div>
                 </div>
                '
            )

            $('#' + @passengerRatingChartId).html('')
            $('#' + @passengerRatingChartId).flexibleStars({
                init: trip.getPassengerRating()
            })

            if trip.getDriverName()?
                $('#' + @driverRatingChartId).html('')
                $('#' + @driverRatingChartId).flexibleStars({
                    init: trip.getDriverRating()
                })
        else
            $('#' + @tripInfoContainerId).html('<h1>Select a trip</h1>')

    updateMap: (trip) =>
        return  if @setTripInfoBool is true or !trip? or !trip.driverLocation?
        @setTripInfoBool = true
        if not trip? or @tripId isnt trip.getId()
            @passengerMarker.setMap null  if @passengerMarker?
            @driverMarker.setMap null  if @driverMarker?
            @destinationMarker.setMap null  if @destinationMarker?
            @initialMarker.setMap null  if @initialMarker?
            @driverPreviousLocation = null
            @tripId = (if trip? then trip.getId() else "")
            if @directionsDisplay?
                @directionsDisplay.setMap null
                @directionsDisplay = null
            if @directionsDisplay2?
                @directionsDisplay2.setMap null
                @directionsDisplay2 = null
            if @directionsDisplay3?
                @directionsDisplay3.setMap null
                @directionsDisplay3 = null
            if @directionsDisplay4?
                @directionsDisplay4.setMap null
                @directionsDisplay4 = null
        unless trip?
            @setTripInfoBool = false
            return
        if not @driverPreviousLocation? or trip.driverLocation.lat isnt @driverPreviousLocation.lat or trip.driverLocation.lng isnt @driverPreviousLocation.lng
            @driverPreviousLocation = trip.driverLocation
            pickupLocation = trip.pickupLocation
            driverLocation = trip.driverLocation
            dropoffLocation = trip.dropoffLocation
            driverInitialLocation = trip.driverInitialLocation
            if pickupLocation or driverLocation
                passengerLocation = null
                driverCurrentLocation = null
                destinationLocation = null
                initialLocation = null
                if dropoffLocation
                    destinationLocation = new google.maps.LatLng(dropoffLocation.lat, dropoffLocation.lng)
                    if @destinationMarker?
                        @destinationMarker.setMap @map
                        @destinationMarker.setPosition destinationLocation
                if pickupLocation
                    passengerLocation = new google.maps.LatLng(pickupLocation.lat, pickupLocation.lng)
                    if @passengerMarker?
                        @passengerMarker.setMap @map
                        @passengerMarker.setPosition passengerLocation
                if driverLocation
                    driverCurrentLocation = new google.maps.LatLng(driverLocation.lat, driverLocation.lng)
                    if @driverMarker?
                        @driverMarker.setMap @map
                        @driverMarker.setPosition driverCurrentLocation
                if driverInitialLocation
                    initialLocation = new google.maps.LatLng(driverInitialLocation.lat, driverInitialLocation.lng)
                    if @initialMarker?
                        @initialMarker.setMap @map
                        @initialMarker.setPosition driverInitialLocation
                unless @map?
                    @mapOptions =
                        center: (if driverCurrentLocation? then driverCurrentLocation else passengerLocation)
                        zoom: 15
                        mapTypeControl: false
                        mapTypeId: google.maps.MapTypeId.ROADMAP

                    @map = new google.maps.Map(document.getElementById("map-canvas"), @mapOptions)
                if passengerLocation? and not @passengerMarker?
                    @passengerMarker = new google.maps.Marker(
                        position: passengerLocation
                        map: @map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=home|FFFF00"
                        title: "Pickup"
                    )
                if initialLocation? and not @initialMarker?
                    @initialMarker = new google.maps.Marker(
                        position: driverInitialLocation
                        map: @map
                        icon: "http://www.mricons.com/store/png/113267_25418_16_flag_icon.png"
                        title: "Initial"
                    )
                if driverLocation? and not @driverMarker?
                    @driverMarker = new google.maps.Marker(
                        position: driverCurrentLocation
                        map: @map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=taxi|FFFF00"
                        title: "Driver"
                    )
                if destinationLocation? and not @destinationMarker?
                    @destinationMarker = new google.maps.Marker(
                        position: dropoffLocation
                        map: @map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=cafe|FFFF00"
                        title: "Destination"
                    )
                if driverLocation? and pickupLocation? and dropoffLocation?
                    routes = []
                    switch trip.status
                        when "Enroute"
                            routes = [
                                origin: initialLocation
                                destination: driverCurrentLocation
                            ]
                        when "PickedUp"
                            routes = [
                                origin: initialLocation
                                destination: passengerLocation
                            ,
                                origin: passengerLocation
                                destination: driverCurrentLocation
                            ]
                        when "Complete"
                            routes = [
                                origin: initialLocation
                                destination: passengerLocation
                            ,
                                origin: passengerLocation
                                destination: destinationLocation
                            ]
                    rendererOptions =
                        preserveViewport: true
                        suppressMarkers: true
                        polylineOptions:
                            strokeColor: "#8B0000"
                            strokeOpacity: 1
                            strokeWeight: 5
                    rendererOptions2 =
                        preserveViewport: true
                        suppressMarkers: true
                        polylineOptions:
                            strokeColor: "#008000"
                            strokeOpacity: 1
                            strokeWeight: 5
                    directionsService = new google.maps.DirectionsService()
                    directionsService2 = new google.maps.DirectionsService()
                    boleanFirst = true
                    routes.forEach (route) =>
                        request =
                            origin: route.origin
                            destination: route.destination
                            travelMode: google.maps.TravelMode.DRIVING
                        if boleanFirst
                            if @turn
                                @directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions)
                                @directionsDisplay.setMap @map
                            else
                                @directionsDisplay3 = new google.maps.DirectionsRenderer(rendererOptions)
                                @directionsDisplay3.setMap @map
                        else
                            if @turn
                                @directionsDisplay2 = new google.maps.DirectionsRenderer(rendererOptions2)
                                @directionsDisplay2.setMap @map
                            else
                                @directionsDisplay4 = new google.maps.DirectionsRenderer(rendererOptions2)
                                @directionsDisplay4.setMap @map
                        if boleanFirst
                            directionsService.route request, (result, status) =>
                                if @turn
                                    @directionsDisplay.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay?
                                    if @directionsDisplay3?
                                        @directionsDisplay3.setMap null
                                        @directionsDisplay3 = null
                                else
                                    @directionsDisplay3.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay3?
                                    if @directionsDisplay?
                                        @directionsDisplay.setMap null
                                        @directionsDisplay = null
                            boleanFirst = false
                        else
                            directionsService2.route request, (result, status) =>
                                if @turn
                                    @directionsDisplay2.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay2?
                                    if @directionsDisplay4?
                                        @directionsDisplay4.setMap null
                                        @directionsDisplay4 = null
                                    @turn = false
                                else
                                    @directionsDisplay4.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay4?
                                    if @directionsDisplay2?
                                        @directionsDisplay2.setMap null
                                        @directionsDisplay2 = null
                                    @turn = true
                @map.setCenter (if driverCurrentLocation? then driverCurrentLocation else passengerLocation)
        @setTripInfoBool = false

class StatisticsDashboard

    constructor: (@statisticsContainerId, @ratingsContainerId) ->
        @timePieChartId = 'time-pie-chart'
        @tripsPieChartId = 'trips-pie-chart'
        @tripsPieChartTitleId = @tripsPieChartId + '-title'
        @mileagePieChartId = 'mileage-pie-chart'
        @servicePieChartId = 'service-pie-chart'
        @driversRatingChartId = 'drivers-rating-chart'
        @passengersRatingChartId = 'passengers-rating-chart'
        @lastValues =
            passengerRating: -1
            driverRating: -1
            timeWithPassenger: -1
            mileageWithPassenger: -1
            timeEnroute: -1
            mileageEnroute: -1
            timeIdle: -1
            totalTrips: -1
            cancelled: -1
            completed: -1
            rejected: -1
            lateness: -1
            withinServiceGoal: -1

        $('#' + @statisticsContainerId).html('
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title" id="' + @tripsPieChartTitleId + '">0 Trips</div>
                <div class="pie-chart" id="' + @tripsPieChartId + '"></div>
            </div>
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Time</div>
                <div class="pie-chart" id="' + @timePieChartId + '"></div>
            </div>
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Mileage</div>
                <div class="pie-chart" id="' + @mileagePieChartId + '"></div>
            </div>
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Service</div>
                <div class="pie-chart" id="' + @servicePieChartId + '"></div>
            </div>
        ')

        $('#' + @ratingsContainerId).html('
            <div id="dashboard-ratings-container">
                <div  class="dashboard-statistics-rating" >
                    <div class="title">Drivers</div>
                    <div class="flexible-stars" data-isLocked="yes"
                     data-init="0"  id="' + @driversRatingChartId + '"></div>
                </div>
                <div  class="dashboard-statistics-rating" >
                    <div class="title">Passengers</div>
                    <div class="flexible-stars" data-isLocked="yes"
                        data-init="0"  id="' + @passengersRatingChartId + '"></div>
                </div>
            </div>
        ')

        @update(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

    updateStats: (stats) =>
        @update(80, 90, 55, 32, 70, 80, 15, 80, 10, 80, 10, 15, 95)

    update: (passengerRating, driverRating, timeWithPassenger, mileageWithPassenger, timeEnroute, mileageEnroute,
             timeIdle, totalTrips, cancelled, completed, rejected, lateness, withinServiceGoal) =>

        if @lastValues.timeEnroute != timeEnroute or
                @lastValues.timeWithPassenger != timeWithPassenger or
                @lastValues.timeIdle != timeIdle

            @lastValues.timeEnroute = timeEnroute
            @lastValues.timeWithPassenger = timeWithPassenger
            @lastValues.timeIdle = timeIdle
            Morris.Donut({
                element: @timePieChartId
                data: [
                    {label: "Enroute", value: timeEnroute}
                    {label: "Occupied", value: timeWithPassenger}
                    {label: "Idle", value: timeIdle}
                ]
                colors: [
                    '#2922DD'
                    '#0BA462'
                    '#DD1D18'
                ]
                formatter: (x) -> x + "%"
            })

        if @lastValues.completed != completed or
                @lastValues.cancelled != cancelled or
                @lastValues.rejected != rejected

            @lastValues.completed = completed
            @lastValues.cancelled = cancelled
            @lastValues.rejected = rejected
            Morris.Donut({
                element: @tripsPieChartId,
                data: [
                    {label: "Completed", value: completed}
                    {label: "Rejected", value: rejected}
                    {label: "Cancelled", value: cancelled}
                ]
                colors: [
                    '#0BA462'
                    '#DADD0F'
                    '#DD1D18'
                ]
                formatter: (x) -> x + "%"
            })

        if @lastValues.mileageEnroute != mileageEnroute or
                @lastValues.mileageWithPassenger != mileageWithPassenger

            @lastValues.mileageEnroute = mileageEnroute
            @lastValues.mileageWithPassenger = mileageWithPassenger
            Morris.Donut({
                element: @mileagePieChartId,
                data: [
                    {label: "Enroute", value: mileageEnroute}
                    {label: "Occupied", value: mileageWithPassenger}
                ]
                colors: [
                    '#3C6ADD'
                    '#0BA462'
                ]
                formatter: (x) -> x + "%"
            })

        if @lastValues.totalTrips != totalTrips
            @lastValues.totalTrips = totalTrips
            $('#' + @tripsPieChartTitleId).fadeOut().html(totalTrips + ' trips').fadeIn()


        passengerRatingStars = passengerRating/100*5
        if passengerRatingStars != @lastValues.passengerRating
            $('#' + @passengersRatingChartId).html('')
            $('#' + @passengersRatingChartId).flexibleStars({
                init: passengerRatingStars
            })

        driverRatingStars = driverRating/100*5
        if driverRatingStars != @lastValues.driverRating
            $('#' + @driversRatingChartId).html('')
            $('#' + @driversRatingChartId).flexibleStars({
                init: driverRatingStars
            })


        if @lastValues.withinServiceGoal != withinServiceGoal or
                @lastValues.lateness != lateness

            @lastValues.withinServiceGoal = withinServiceGoal
            @lastValues.lateness = lateness
            Morris.Donut({
                element: @servicePieChartId,
                data: [
                    {label: "Within goal", value: withinServiceGoal}
                    {label: "Lateness", value: lateness}
                ]
                colors: [
                    '#0BA462'
                    '#DD1D18'
                ]
                formatter: (x) -> x + "%"
            })

class ActivityLog

    constructor: (@containerId) ->
        @tripId = ''
        @latestAddedLogDate = null

    tripChanged: (trip) =>
        $('#' + @containerId).html('<%= image_tag('loading.gif') %>')

    updateLog: (logList, currentTripId) =>
        if logList? and logList.length > 0
            logList = logList.reverse()
            newLatest = logList[0].time
            logs = []
            if !@latestAddedLogDate? or @tcurrentTripIdripId != currentTripId
                logs = logList
                $('#' + @containerId).html('')
            else
                for log in logList
                    if Date.parse(log.time) > Date.parse(@latestAddedLogDate)
                        logs.push log
                    else
                        break

            if logs.length > 0
                i = 0
                for log in logs.reverse()
                    [id, logString] = @getLogTag(i, log)
                    $('#' + @containerId).prepend(logString)
                    $('#' + id).slideDown();
                    i++
                Prism.highlightAll();@latestAddedLogDate = logList[logList.length-1].time

            @tripId = currentTripId
            @latestAddedLogDate = newLatest

    getLogTag: (id, log) =>
        id =  id + 'parent-accordion'
        logString = '
                        <div style="display: none" class="accordion-group" id="' + id + '">
                            <div class="accordion-heading">
                                <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion">
                                    ' + log.time.split('.')[0] + ' | ' + log.messages[0].text +  '
                                </a>
                            </div>
                            <div id="' + id + '-accordion" class="accordion-body collapse">
                                <div class="accordion-inner">
                        '

        if log.request?
            logString += '
                                        <div class="accordion-group json-inner-log">
                                            <div class="accordion-heading">
                                                <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-request">
                                                    Request
                                                </a>
                                            </div>
                                            <div id="' + id + '-accordion-request" class="accordion-body collapse">
                                                <div class="accordion-inner">
                                                    <pre><code class="language-javascript">' + FormatJSON(JSON.parse(log.request)) + '</code></pre>
                                                </div>
                                            </div>
                                        </div>

                    '

        i = 1
        while(i < log.messages.length - 1)
            message = log.messages[i]
            padding = if message.indent is 0 then '' else 'padding-left: ' + message.indent + 'px'

            logString += '<div style="' + padding + '">'

            if message.json?
                hasResponse = ((i + 1) < (log.messages.length - 1)) and
                        log.messages[i + 1].text.indexOf('Response') != -1 and
                        log.messages[i + 1].json

                logString += '
                                            <div class="accordion-group json-inner-log">
                                                <div class="accordion-heading">
                                                    <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-' + i + '">
                                                        ' + message.text + '
                                                    </a>
                                                </div>
                                                <div id="' + id + '-accordion-' + i + '" class="accordion-body collapse">
                                                    <div class="accordion-inner">
                                                        <pre><code class="language-javascript">'

                logString +=                'Request:\n' + FormatJSON(JSON.parse(message.json))

                if hasResponse
                    logString +=            '\n\nResponse:\n' + FormatJSON(JSON.parse(log.messages[i + 1].json))
                    i++

                logString += '          </code></pre>
                                                    </div>
                                                </div>
                                            </div>'
            else
                logString +='<div class="accordion-group simple-inner-log">
                                                <div class="accordion-heading">
                                                    <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-' + i + '">
                                                        ' + message.text + '
                                                    </a>
                                                </div>
                                             </div>
                                                '

            logString += ' </div>'
            i++

        if log.response?
            logString += '
                                        <div class="accordion-group json-inner-log">
                                            <div class="accordion-heading">
                                                <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-response">
                                                    Response
                                                </a>
                                            </div>
                                            <div id="' + id + '-accordion-response" class="accordion-body collapse">
                                                <div class="accordion-inner">
                                                    <pre><code class="language-javascript">' + FormatJSON(JSON.parse(log.response)) + '</code></pre>
                                                </div>
                                            </div>
                                        </div>

                    '
        logString +=
            '           </div>
                                </div>
                            </div>
                          '

        return [id, logString]


class DashboardManager

    constructor: (@gateway, @statusSelectorContainerId, @listeners) ->
        @tripsById = {}
        @activeTrip = null
        @selectedStatus = 'All'
        @updatingStats = false
        @updatingTrips = false
        @updatingActiveTrip = false
        @updatingLogs = false

        $('#' + @statusSelectorContainerId).change =>
            @selectedStatus = $('#' + @statusSelectorContainerId + ' option:selected').val()
            @updateStatus()
            @update()

    update: =>
        if not  @updatingStats
            @updatingStats = true
            @gateway.getStats(@updateStats)

        if not @updatingTrips
            @updatingTrips = true
            status = if @selectedStatus != 'All' then @selectedStatus else null
            @gateway.getTrips(status, @updateTrips)

        if not @updatingActiveTrip
            @updatingActiveTrip = true
            if @activeTrip?
                @gateway.getTripStatus(@activeTrip.getId(), @updateActiveTrip)
            else
                @updateActiveTrip(null)

        if not @updatingLogs
            @updatingLogs = true
            tripId = if @activeTrip? then @activeTrip.getId() else null
            @gateway.getLog(tripId, @updateLogs)

    updateStats: (data) =>
        if data?
            for listener in @listeners
                if typeof listener.updateStats is 'function'
                    try
                        listener.updateStats(data)
                    catch error
                        console.error listener + ' updateStats failed: ' + error
        @updatingStats = false

    updateTrips: (data) =>
        if data?
            tripsIds = []
            for newTrip in data.trips
                tripsIds.push newTrip.id
                if newTrip.id not of @tripsById
                    @processTrip(newTrip)

            for id, trip of @tripsById
                if id not in tripsIds
                    delete @tripsById[id]

            for listener in @listeners
                if typeof listener.updateTrips is 'function'
                    try
                        listener.updateTrips(@tripsById)
                    catch error
                        console.error listener + ' updateTrips failed: ' + error
        @updatingTrips = false

    processTrip: (newTrip) =>
        driverLocation =
            if newTrip.driverLoMAFIAcation? then new Location(newTrip.driverLocation.lat, newTrip.driverLocation.lng, null) else null
        driverInitialLocation =
            if newTrip.driverInitialLocation? then new Location(newTrip.driverInitialLocation.lat, newTrip.driverInitalLocation.lng, null) else null
        trip = new Trip(
                newTrip.id
                newTrip.passengerName
                newTrip.pickupTime
                new Location(newTrip.pickupLocation.lat, newTrip.pickupLocation.lng, null)
                newTrip.originatingPartnerName
                newTrip.servicingPartnerName
                newTrip.status
                newTrip.eta
                newTrip.price
                newTrip.driverName
                driverLocation
                new Location(newTrip.dropoffLocation.lat, newTrip.dropoffLocation.lng, null)
                driverInitialLocation
        )
        @tripsById[trip.getId()] = trip
        $(document).off('click', '#' + trip.getContainerId()).on 'click', '#' + trip.getContainerId(),  =>
            @toggleActiveTrip(newTrip.id)


    toggleActiveTrip: (tripId) =>
        trip = @tripsById[tripId]
        if not @activeTrip? or !trip? or @activeTrip.id != trip.id
            @activeTrip = trip
        else
            @activeTrip = null

        for listener in @listeners
            if typeof listener.tripChanged is 'function'
                try
                    listener.tripChanged(@activeTrip)
                catch error
                    console.error listener + ' tripChanged failed: ' + error

        @update()


    updateActiveTrip: (data) =>
        if data?
            if !@activeTrip? or (data.driverLocation? and !@activeTrip.getDriverLocation()?) or
                    (data.driverLocation? and
                            @activeTrip.getDriverLocation()? and
                            data.driverLocation.lat != @activeTrip.getDriverLocation().lat and
                            data.driverLocation.lng != @activeTrip.getDriverLocation().lng)

                driverLocation = new Location(data.driverLocation.lat, data.driverLocation.lng, null)
            else
                driverLocation = @activeTrip.getDriverLocation()

            if !@activeTrip? or
                    (data.historyEnrouteList and data.historyEnrouteList[0] and !@activeTrip.getDriverInitialLocation()?)

                driverInitialLocation = new Location(data.historyEnrouteList[0].lat, data.historyEnrouteList[0].lng, null)
            else
                driverInitialLocation = @activeTrip.getDriverInitialLocation()

            @activeTrip.update(
                    if data.status? then data.status else @activeTrip.getStatus()
                    data.driverName
                    driverLocation
                    driverInitialLocation
                    data.historyEnrouteList
                    data.historyPickUpList
            )
        for listener in @listeners
            if typeof listener.updateActiveTrip is 'function'
                try
                    listener.updateActiveTrip(@activeTrip)
                catch error
                    console.error listener.toString() + ' updateLogs failed: ' + error

        @updatingActiveTrip = false

    updateLogs: (data) =>
        if data?
            tripId = if @activeTrip? then @activeTrip.getId() else null
            for listener in @listeners
                if typeof listener.updateLog is 'function'
                    try
                        listener.updateLog(data.logList, tripId)
                    catch error
                        console.error listener + ' updateLogs failed: ' + error
        @updatingLogs = false

    updateStatus: () =>
        status = if @selectedStatus != 'All' then @selectedStatus else null
        for listener in @listeners
            if typeof listener.updateStatus is 'function'
                try
                    listener.updateStatus(status)
                catch error
                    console.error listener + ' updateStatus failed: ' + error

`
$(document).ready(function(){
    var url = window.location
    $('.list-group-item').filter( function(){
        return this.href == url;
    }).addClass('active');
    });
`

$('.developer.dashboard').ready ->
    dashboardManager = new DashboardManager(
            new TripThru(tripthruUrl, $('#access_token').val())
            'trip-status-selector'
            [
                new ActiveTripsChart('active-trips-chart')
                new TripList('trips-panel')
                new StatisticsDashboard('statistics-gauges-container', 'ratings-container')
                new TripTracker('tracking-trip-info', 'tracking-map-container')
                new ActivityLog('activity-log')
            ]
    )

    update = ->
        dashboardManager.update()

    update()
    setInterval ->
        update()
    , 10000

    return

########## API #########

$('.developer.api').ready ->
    window.swaggerUi = new SwaggerUi({
        discoveryUrl: tripthruUrl + 'resources'
        apiKey: ""
        dom_id: "swagger-ui-container"
        supportHeaderParams: false
        supportedSubmitMethods: ['get', 'post', 'put']
        onComplete: (swaggerApi, swaggerUi) ->
            if (console)
                console.log("Loaded SwaggerUI")
                console.log(swaggerApi)
                console.log(swaggerUi)
                $('pre code').each((i, e) ->  hljs.highlightBlock(e) )
        onFailure: (data) ->
                if (console)
                    console.log("Unable to Load SwaggerUI")
                    console.log(data)
        docExpansion: "none"
    })
    window.swaggerUi.load()


########## STATISTICS #########

class GatewayMockStatistics

    constructor: () ->

    getStats: (startDate, endDate, _callback) =>

        values =
            passengerRating: -1
            driverRating: -1
            timeWithPassenger: -1
            mileageWithPassenger: -1
            timeEnroute: -1
            mileageEnroute: -1
            timeIdle: -1
            totalTrips: -1
            cancelled: -1
            completed: -1
            rejected: -1
            lateness: -1
            withinServiceGoal: -1

    treatAsUTC: (date) =>
        result = new Date(date)
        result.setMinutes(result.getMinutes() - result.getTimezoneOffset())
        result

    daysBetween: (startDate, endDate) =>
        millisecondsPerDay = 24 * 60 * 60 * 1000
        return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerDay

class TimeSeries

    constructor: (@gateway, @historicChartContainerId, @forecastChartContainerId) ->
        @startDate = new Date()
        @endDate = new Date()

        @tripsCompletedSelected =   true
        @tripsCancelledSelected =   true
        @tripsRejectedSelected =    true
        @tripsErrorSelected =       true
        @timeEnrouteSelected =      false
        @timeOccupiedSelected =     false
        @timeIdleSelected =         false
        @mileageEnrouteSelected =   false
        @mileageOccupiedSelected =  false
        @serviceGoalSelected =      false
        @serviceLatenessSelected =  false
        @ratingDriversSelected =    false
        @ratingPassengersSelected = false

        @tripsCompleted = { name: 'Completed trips', id: 'Completed trips', data: []}
        @tripsCancelled = { name: 'Cancelled trips', id: 'Cancelled trips', data: []}
        @tripsRejected =  { name: 'Rejected trips', id: 'Rejected trips', data: []}
        @tripsError =     { name: 'Error trips', id: 'Error trips', data: []}
        @timeEnroute =      { name: 'Time enroute', id: 'Time enroute', data: []}
        @timeOccupied =     { name: 'Time occupied', id: 'Time occupied', data: []}
        @timeIdle =         { name: 'Time idle', id: 'Time idle', data: []}
        @mileageEnroute =   { name: 'Mileage enroute', id: 'Mileage enroute', data: []}
        @mileageOccupied =  { name: 'Mileage occupied', id: 'Mileage occupied', data: []}
        @serviceGoal =      { name: 'Service level', id: 'Service level', data: []}
        @serviceLateness =  { name: 'Service lateness', id: 'Service lateness', data: []}
        @ratingDrivers =    { name: 'Drivers rating', id: 'Drivers rating', data: []}
        @ratingPassengers = { name: 'Passengers rating', id: 'Passengers rating', data: []}

        @tripsCompletedF = { name: 'Completed trips', id: 'Completed trips', data: []}
        @tripsCancelledF = { name: 'Cancelled trips', id: 'Cancelled trips', data: []}
        @tripsRejectedF =  { name: 'Rejected trips', id: 'Rejected trips', data: []}
        @tripsErrorF =     { name: 'Error trips', id: 'Error trips', data: []}
        @timeEnrouteF =      { name: 'Time enroute', id: 'Time enroute', data: []}
        @timeOccupiedF =     { name: 'Time occupied', id: 'Time occupied', data: []}
        @timeIdleF =         { name: 'Time idle', id: 'Time idle', data: []}
        @mileageEnrouteF =   { name: 'Mileage enroute', id: 'Mileage enroute', data: []}
        @mileageOccupiedF =  { name: 'Mileage occupied', id: 'Mileage occupied', data: []}
        @serviceGoalF =      { name: 'Service level', id: 'Service level', data: []}
        @serviceLatenessF =  { name: 'Service lateness', id: 'Service lateness', data: []}
        @ratingDriversF =    { name: 'Drivers rating', id: 'Drivers rating', data: []}
        @ratingPassengersF = { name: 'Passengers rating', id: 'Passengers rating', data: []}

        dates = [
            Date.UTC(2014, 5, 25, 0, 0, 0)
            Date.UTC(2014, 5, 25, 1, 0, 0)
            Date.UTC(2014, 5, 25, 2, 0, 0)
            Date.UTC(2014, 5, 25, 3, 0, 0)
            Date.UTC(2014, 5, 25, 4, 0, 0)
            Date.UTC(2014, 5, 25, 5, 0, 0)
            Date.UTC(2014, 5, 25, 6, 0, 0)
            Date.UTC(2014, 5, 25, 7, 0, 0)
            Date.UTC(2014, 5, 25, 8, 0, 0)
            Date.UTC(2014, 5, 25, 9, 0, 0)
            Date.UTC(2014, 5, 25, 10, 0, 0)
            Date.UTC(2014, 5, 25, 11, 0, 0)
            Date.UTC(2014, 5, 25, 12, 0, 0)
            Date.UTC(2014, 5, 25, 13, 0, 0)
            Date.UTC(2014, 5, 25, 14, 0, 0)
            Date.UTC(2014, 5, 25, 15, 0, 0)
            Date.UTC(2014, 5, 25, 16, 0, 0)
            Date.UTC(2014, 5, 25, 17, 0, 0)
            Date.UTC(2014, 5, 25, 18, 0, 0)
            Date.UTC(2014, 5, 25, 19, 0, 0)
            Date.UTC(2014, 5, 25, 20, 0, 0)
            Date.UTC(2014, 5, 25, 21, 0, 0)
            Date.UTC(2014, 5, 25, 22, 0, 0)
            Date.UTC(2014, 5, 25, 23, 0, 0)
        ]

        @generateRandomData(dates)

        @historicChart = new Highcharts.Chart
            chart:
                renderTo: @historicChartContainerId
                type: 'spline'
            title:
                text: ''
            xAxis:
                type: 'datetime',
                dateTimeLabelFormats:
                    month: '%e. %b',
                    year: '%b'
                title:
                    text: ''
            yAxis:
                title:
                    text: ''
                max: 100
            tooltip:
                headerFormat: '<b>{series.name}</b><br>',
                pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
            series: [
                @tripsCompleted,
                @tripsRejected,
                @tripsCancelled,
                @tripsError
            ]

        @forecastChart = new Highcharts.Chart
            chart:
                renderTo: @forecastChartContainerId
                type: 'spline'
            title:
                text: ''
            xAxis:
                type: 'datetime',
                dateTimeLabelFormats:
                    month: '%e. %b',
                    year: '%b'
                title:
                    text: ''
            yAxis:
                title:
                    text: ''
                max: 100
            tooltip:
                headerFormat: '<b>{series.name}</b><br>',
                pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
            series: [
                @tripsCompleted,
                @tripsRejected,
                @tripsCancelled,
                @tripsError
            ]

        $('#trips-completed-filter-button').click =>
            $('#trips-completed-filter-button').toggleClass('active')
            @tripsCompletedSelected= not @tripsCompletedSelected
            @update([{
                name: 'Completed trips'
                historicData: @tripsCompleted
                forecastData: @tripsCompletedF
                load: @tripsCompletedSelected
            }])

        $('#trips-rejected-filter-button').click =>
            $('#trips-rejected-filter-button').toggleClass('active')
            @tripsRejectedSelected= not @tripsRejectedSelected
            @update([{
                name: 'Rejected trips'
                historicData: @tripsRejectedF
                forecastData: @tripsRejectedF
                load: @tripsRejectedSelected
            }])

        $('#trips-cancelled-filter-button').click =>
            $('#trips-cancelled-filter-button').toggleClass('active')
            @tripsCancelledSelected= not @tripsCancelledSelected
            @update([{
                name: 'Cancelled trips'
                historicData: @tripsCancelled
                forecastData: @tripsCancelledF
                load: @tripsCancelledSelected
            }])

        $('#trips-error-filter-button').click =>
            $('#trips-error-filter-button').toggleClass('active')
            @tripsErrorSelected= not @tripsErrorSelected
            @update([{
                name: 'Error trips'
                historicData: @tripsError
                forecastData: @tripsErrorF
                load: @tripsErrorSelected
            }])

        $('#time-enroute-filter-button').click =>
            $('#time-enroute-filter-button').toggleClass('active')
            @timeEnrouteSelected = not @timeEnrouteSelected
            @update([{
                name: 'Time enroute'
                historicData: @timeEnroute
                forecastData: @timeEnrouteF
                load: @timeEnrouteSelected
            }])

        $('#time-occupied-filter-button').click =>
            $('#time-occupied-filter-button').toggleClass('active')
            @timeOccupiedSelected = not @timeOccupiedSelected
            @update([{
                name: 'Time occupied'
                historicData: @timeOccupied
                forecastData: @timeOccupiedF
                load: @timeOccupiedSelected
            }])

        $('#time-idle-filter-button').click =>
            $('#time-idle-filter-button').toggleClass('active')
            @timeIdleSelected = not @timeIdleSelected
            @update([{
                name: 'Time idle'
                historicData: @timeIdle
                forecastData: @timeIdleF
                load: @timeIdleSelected
            }])

        $('#mileage-enroute-filter-button').click =>
            $('#mileage-enroute-filter-button').toggleClass('active')
            @mileageEnrouteSelected = not @mileageEnrouteSelected
            @update([{
                name: 'Mileage enroute'
                historicData: @mileageEnroute
                forecastData: @mileageEnrouteF
                load: @mileageEnrouteSelected
            }])

        $('#mileage-occupied-filter-button').click =>
            $('#mileage-occupied-filter-button').toggleClass('active')
            @mileageOccupiedSelected = not @mileageOccupiedSelected
            @update([{
                name: 'Mileage occupied'
                historicData: @mileageOccupied
                forecastData: @mileageOccupiedF
                load: @mileageOccupiedSelected
            }])

        $('#service-goal-filter-button').click =>
            $('#service-goal-filter-button').toggleClass('active')
            @serviceGoalSelected = not @serviceGoalSelected
            @update([{
                name: 'Service level'
                historicData: @serviceGoal
                forecastData: @serviceGoalF
                load: @serviceGoalSelected
            }])

        $('#service-lateness-filter-button').click =>
            $('#service-lateness-filter-button').toggleClass('active')
            @serviceLatenessSelected = not @serviceLatenessSelected
            @update([{
                name: 'Service lateness'
                historicData: @serviceLateness
                forecastData: @serviceLatenessF
                load: @serviceLatenessSelected
            }])

        $('#ratings-drivers-filter-button').click =>
            $('#ratings-drivers-filter-button').toggleClass('active')
            @ratingDriversSelected = not @ratingDriversSelected
            @update([{
                name: 'Rating drivers'
                historicData: @ratingDrivers
                forecastData: @ratingDriversF
                load: @ratingDriversSelected
            }])

        $('#ratings-passengers-filter-button').click =>
            $('#ratings-passengers-filter-button').toggleClass('active')
            @ratingPassengersSelected = not @ratingPassengersSelected
            @update([{
                name: 'Rating passengers'
                historicData: @ratingPassengers
                forecastData: @ratingPassengersF
                load: @ratingPassengersSelected
            }])

        $('#partners-select').change =>
            @generateRandomData(dates)
            @clearCharts()
            @update([
                {
                    name: 'Completed trips'
                    historicData: @tripsCompleted
                    forecastData: @tripsCompletedF
                    load: @tripsCompletedSelected
                },
                {
                    name: 'Rejected trips'
                    historicData: @tripsRejectedF
                    forecastData: @tripsRejectedF
                    load: @tripsRejectedSelected
                },
                {
                    name: 'Cancelled trips'
                    historicData: @tripsCancelled
                    forecastData: @tripsCancelledF
                    load: @tripsCancelledSelected
                },
                {
                    name: 'Error trips'
                    historicData: @tripsError
                    forecastData: @tripsErrorF
                    load: @tripsErrorSelected
                },
                {
                    name: 'Time enroute'
                    historicData: @timeEnroute
                    forecastData: @timeEnrouteF
                    load: @timeEnrouteSelected
                },
                {
                    name: 'Time occupied'
                    historicData: @timeOccupied
                    forecastData: @timeOccupiedF
                    load: @timeOccupiedSelected
                },
                {
                    name: 'Time idle'
                    historicData: @timeIdle
                    forecastData: @timeIdleF
                    load: @timeIdleSelected
                },
                {
                    name: 'Mileage enroute'
                    historicData: @mileageEnroute
                    forecastData: @mileageEnrouteF
                    load: @mileageEnrouteSelected
                },
                {
                    name: 'Mileage occupied'
                    historicData: @mileageOccupied
                    forecastData: @mileageOccupiedF
                    load: @mileageOccupiedSelected
                },
                {
                    name: 'Service level'
                    historicData: @serviceGoal
                    forecastData: @serviceGoalF
                    load: @serviceGoalSelected
                },
                {
                    name: 'Service lateness'
                    historicData: @serviceLateness
                    forecastData: @serviceLatenessF
                    load: @serviceLatenessSelected
                },
                {
                    name: 'Rating drivers'
                    historicData: @ratingDrivers
                    forecastData: @ratingDriversF
                    load: @ratingDriversSelected
                },
                {
                    name: 'Rating passengers'
                    historicData: @ratingPassengers
                    forecastData: @ratingPassengersF
                    load: @ratingPassengersSelected
                }


            ])


        $('#trips-completed-filter-button').toggleClass('active')
        $('#trips-rejected-filter-button').toggleClass('active')
        $('#trips-cancelled-filter-button').toggleClass('active')
        $('#trips-error-filter-button').toggleClass('active')

    update: (series) =>
        for serie in series
            if serie.load
                @historicChart.addSeries(serie.historicData, false, false)
                @forecastChart.addSeries(serie.forecastData, false, false)
            else
                hserie = @historicChart.get(serie.historicData.name)
                if hserie?
                    hserie.remove(false)
                fserie = @forecastChart.get(serie.forecastData.name)
                if fserie?
                    fserie.remove(false)
        @refreshCharts()

    clearCharts: () =>
        @historicChart = new Highcharts.Chart
            chart:
                renderTo: @historicChartContainerId
                type: 'spline'
            title:
                text: ''
            xAxis:
                type: 'datetime',
                dateTimeLabelFormats:
                    month: '%e. %b',
                    year: '%b'
                title:
                    text: ''
            yAxis:
                title:
                    text: ''
                max: 100
            tooltip:
                headerFormat: '<b>{series.name}</b><br>',
                pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
            series: [

            ]

        @forecastChart = new Highcharts.Chart
            chart:
                renderTo: @forecastChartContainerId
                type: 'spline'
            title:
                text: ''
            xAxis:
                type: 'datetime',
                dateTimeLabelFormats:
                    month: '%e. %b',
                    year: '%b'
                title:
                    text: ''
            yAxis:
                title:
                    text: ''
                max: 100
            tooltip:
                headerFormat: '<b>{series.name}</b><br>',
                pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
            series: [

            ]

    refreshCharts: () =>
        @historicChart.redraw()
        @forecastChart.redraw()


    generateRandomData: (dates) =>
        @tripsCompleted.data = []
        @tripsCancelled.data = []
        @tripsRejected.data = [] 
        @tripsError.data = []    
        @timeEnroute.data = []     
        @timeOccupied.data = []    
        @timeIdle.data = []        
        @mileageEnroute.data = []  
        @mileageOccupied.data = [] 
        @serviceGoal.data = []     
        @serviceLateness.data = [] 
        @ratingDrivers.data = []   
        @ratingPassengers.data = []

        @tripsCompletedF.data = []
        @tripsCancelledF.data = []
        @tripsRejectedF.data = [] 
        @tripsErrorF.data = []    
        @timeEnrouteF.data = []     
        @timeOccupiedF.data = []    
        @timeIdleF.data = []        
        @mileageEnrouteF.data = []  
        @mileageOccupiedF.data = [] 
        @serviceGoalF.data = []     
        @serviceLatenessF.data = [] 
        @ratingDriversF.data = []   
        @ratingPassengersF.data = []
        
        for date in dates
            @tripsCompleted.data.push @r(date)
            @tripsCancelled.data.push @r(date)
            @tripsRejected.data.push  @r(date)
            @tripsError.data.push     @r(date)
            @timeEnroute.data.push      @r(date)
            @timeOccupied.data.push     @r(date)
            @timeIdle.data.push         @r(date)
            @mileageEnroute.data.push   @r(date)
            @mileageOccupied.data.push  @r(date)
            @serviceGoal.data.push      @r(date)
            @serviceLateness.data.push  @r(date)
            @ratingDrivers.data.push    @r(date)
            @ratingPassengers.data.push @r(date)
    
            @tripsCompletedF.data.push @r(date)
            @tripsCancelledF.data.push @r(date)
            @tripsRejectedF.data.push  @r(date)
            @tripsErrorF.data.push     @r(date)
            @timeEnrouteF.data.push      @r(date)
            @timeOccupiedF.data.push     @r(date)
            @timeIdleF.data.push         @r(date)
            @mileageEnrouteF.data.push   @r(date)
            @mileageOccupiedF.data.push  @r(date)
            @serviceGoalF.data.push      @r(date)
            @serviceLatenessF.data.push  @r(date)
            @ratingDriversF.data.push    @r(date)
            @ratingPassengersF.data.push @r(date)

    r: (date) =>
        [date, (Math.random() * 30) + 70]


$('.developer.statistics').ready ->
    timeSeries = new TimeSeries(new GatewayMockStatistics(), 'historic-chart', 'forecast-chart')
    $('#datepicker').datepicker(
        format: "yyyy/mm/dd"
        startDate: "2012-01-01"
        endDate: "2015-01-01"
        todayBtn: "linked"
        autoclose: true
        todayHighlight: true
    );


########## PARTNERS #########

class CoverageMap

    constructor: (@gateway, @containerId, @selectorId) ->
        @fleets = {}
        @mapCanvas = null
        $('#' + @containerId).html('<%= image_tag('loading.gif', height: 128, width: 128) %>')
        google.maps.event.addDomListener window, "load", @gateway.getPartners(@init)

    init: (data) =>
        if data?
            $('#' + @containerId).html('')
            @loadSelectorFleets(data.fleets)
            @loadMap(data.fleets, @containerId)

    loadSelectorFleets: (fleets) =>
        for fleet in fleets
            if fleet.fleetName == "TripThru San Francisco"
                continue
            @fleets[fleet.fleetName] =  fleet
            $('#' + @selectorId).append('<option value="' + fleet.fleetName + '">' + fleet.fleetName + '</option>')
        $('#' + @selectorId).change =>
            selectedStatus = $('#' + @selectorId + ' option:selected').val()
            @mapCanvas.panTo(new google.maps.LatLng(@fleets[selectedStatus].coverage[0].center.lat, @fleets[selectedStatus].coverage[0].center.lng))


    loadMap: (fleets, containerId) =>
        mapOptions =
            zoom: 4
            center: new google.maps.LatLng(37.09024, -95.712891)
            mapTypeId: google.maps.MapTypeId.TERRAIN

        colors = [ "#006600", "#0D6B00", "#1A7000", "#267500", "#337A00", "#408000", "#4C8500", "#598A00", "#668F00", "#739400", "#809900", "#8C9E00", "#99A300", "#A6A800", "#B2AD00", "#BFB200", "#CCB800", "#D9BD00", "#E6C200", "#F2C700", "#FFCC00", "#FCC200", "#FAB800", "#F7AD00", "#F5A300", "#F29900", "#F08F00", "#ED8500", "#EB7A00", "#E87000", "#E66600", "#E35C00", "#E05200", "#DE4700", "#DB3D00", "#D93300", "#D62900", "#D41F00", "#D11400", "#CF0A00", "#CC0000" ]
        driversTotal = [89,5,37,90,35,18,51,47,31,19,74,10,92,65,65,20,32]
        driver = 0
        @mapCanvas = new google.maps.Map(document.getElementById(containerId), mapOptions)

        citymap = {}
        count = 0
        for fleet in fleets
            if fleet.fleetName == "TripThru San Francisco"
                continue
            driver++
            citymap[fleet.fleetName]=
                center: new google.maps.LatLng(fleet.coverage[0].center.lat, fleet.coverage[0].center.lng)
                population: fleet.coverage[0].radius
                drivers: driversTotal[driver]
            if count < driversTotal[driver]
                count = driversTotal[driver]

        steps = (colors.length / count)
        cityCircle = undefined
        for city of citymap
            temporalVar = (steps * citymap[city].drivers)
            colorNumber = Math.floor(temporalVar)
            populationOptions =
                strokeColor: if colorNumber > (colors.length - 1) then colors[colors.length - 1] else colors[colorNumber]
                strokeOpacity: 0.8
                strokeWeight: 2
                fillColor: if colorNumber > (colors.length - 1) then colors[colors.length - 1] else colors[colorNumber]
                fillOpacity: 0.35
                map: @mapCanvas
                center: citymap[city].center
                radius: citymap[city].population * 1000
            marker = new google.maps.Marker({
                position: citymap[city].center
                map: @mapCanvas
                title: city
            })
            cityCircle = new google.maps.Circle(populationOptions)


$('.developer.partners').ready ->

    coverageMap = new CoverageMap(
        new TripThru(tripthruUrl, $('#access_token').val())
        'partner-coverage-map'
        'partner-select'
    )


########## STATISTICS HEAT MAPS #########

class StatisticsHeatMap

    constructor: (@gateway, @containerId) ->
        $('#' + @containerId).html('<%= image_tag('loading.gif', height: 128, width: 128) %>')
        google.maps.event.addDomListener window, "load", @loadMap(@containerId)

        @map
        @startDate = new Date()
        @endDate = new Date()
        @tripsByIdHeatMap = []
        @heatmapProccess = true

        @tripsCompletedSelected =   true
        @tripsCancelledSelected =   true
        @tripsRejectedSelected =    true
        @tripsErrorSelected =       true
        @timeEnrouteSelected =      false
        @timeOccupiedSelected =     false
        @timeIdleSelected =         false
        @mileageEnrouteSelected =   false
        @mileageOccupiedSelected =  false
        @serviceGoalSelected =      false
        @serviceLatenessSelected =  false
        @ratingDriversSelected =    false
        @ratingPassengersSelected = false

        @tripsCompleted = []
        @tripsCancelled = []
        @tripsRejected =  []
        @tripsError =     []
        @timeEnroute =      []
        @timeOccupied =     []
        @timeIdle =         []
        @mileageEnroute =   []
        @mileageOccupied =  []
        @serviceGoal =      []
        @serviceLateness =  []
        @ratingDrivers =    []
        @ratingPassengers = []

        @tripsCompletedF = []
        @tripsCancelledF = []
        @tripsRejectedF =  []
        @tripsErrorF =     []
        @timeEnrouteF =      []
        @timeOccupiedF =     []
        @timeIdleF =         []
        @mileageEnrouteF =   []
        @mileageOccupiedF =  []
        @serviceGoalF =      []
        @serviceLatenessF =  []
        @ratingDriversF =    []
        @ratingPassengersF = []

        @generateRandomData()

        $('#trips-completed-filter-button').toggleClass('active')
        $('#trips-rejected-filter-button').toggleClass('active')
        $('#trips-cancelled-filter-button').toggleClass('active')
        $('#trips-error-filter-button').toggleClass('active')


    loadMap: (containerId) =>
        $('#' + @containerId).html('')
        mapOptions =
            zoom: 4
            center: new google.maps.LatLng(37.09024, -95.712891)
            mapTypeId: google.maps.MapTypeId.TERRAIN
        @map = new google.maps.Map(document.getElementById(containerId), mapOptions)
        @tickInterval


    tickInterval: () =>
        if @heatmapProccess
            @heatmapProccess = false
            @gateway.getTrips('',@heatMapTrips)

    heatMapTrips: (trips) =>
        taxiData = []
        trips.trips.forEach (trip) ->
            taxiData.push new google.maps.LatLng(trip.pickupLocation.lat,trip.pickupLocation.lng)
            taxiData.push new google.maps.LatLng(trip.dropoffLocation.lat,trip.dropoffLocation.lng)
        #taxiData = [ new google.maps.LatLng(37.782551, -122.445368), new google.maps.LatLng(37.782745, -122.444586), new google.maps.LatLng(37.782842, -122.443688), new google.maps.LatLng(37.782919, -122.442815), new google.maps.LatLng(37.782992, -122.442112), new google.maps.LatLng(37.783100, -122.441461), new google.maps.LatLng(37.783206, -122.440829), new google.maps.LatLng(37.783273, -122.440324), new google.maps.LatLng(37.783316, -122.440023), new google.maps.LatLng(37.783357, -122.439794), new google.maps.LatLng(37.783371, -122.439687), new google.maps.LatLng(37.783368, -122.439666), new google.maps.LatLng(37.783383, -122.439594), new google.maps.LatLng(37.783508, -122.439525), new google.maps.LatLng(37.783842, -122.439591), new google.maps.LatLng(37.784147, -122.439668), new google.maps.LatLng(37.784206, -122.439686), new google.maps.LatLng(37.784386, -122.439790), new google.maps.LatLng(37.784701, -122.439902), new google.maps.LatLng(37.784965, -122.439938), new google.maps.LatLng(37.785010, -122.439947), new google.maps.LatLng(37.785360, -122.439952), new google.maps.LatLng(37.785715, -122.440030), new google.maps.LatLng(37.786117, -122.440119), new google.maps.LatLng(37.786564, -122.440209), new google.maps.LatLng(37.786905, -122.440270), new google.maps.LatLng(37.786956, -122.440279), new google.maps.LatLng(37.800224, -122.433520), new google.maps.LatLng(37.800155, -122.434101), new google.maps.LatLng(37.800160, -122.434430), new google.maps.LatLng(37.800378, -122.434527), new google.maps.LatLng(37.800738, -122.434598), new google.maps.LatLng(37.800938, -122.434650), new google.maps.LatLng(37.801024, -122.434889), new google.maps.LatLng(37.800955, -122.435392), new google.maps.LatLng(37.800886, -122.435959), new google.maps.LatLng(37.800811, -122.436275), new google.maps.LatLng(37.800788, -122.436299), new google.maps.LatLng(37.800719, -122.436302), new google.maps.LatLng(37.800702, -122.436298), new google.maps.LatLng(37.800661, -122.436273), new google.maps.LatLng(37.800395, -122.436172), new google.maps.LatLng(37.800228, -122.436116), new google.maps.LatLng(37.800169, -122.436130), new google.maps.LatLng(37.800066, -122.436167), new google.maps.LatLng(37.784345, -122.422922), new google.maps.LatLng(37.784389, -122.422926), new google.maps.LatLng(37.784437, -122.422924), new google.maps.LatLng(37.784746, -122.422818), new google.maps.LatLng(37.785436, -122.422959), new google.maps.LatLng(37.786120, -122.423112), new google.maps.LatLng(37.786433, -122.423029), new google.maps.LatLng(37.786631, -122.421213), new google.maps.LatLng(37.786660, -122.421033), new google.maps.LatLng(37.786801, -122.420141), new google.maps.LatLng(37.786823, -122.420034), new google.maps.LatLng(37.786831, -122.419916), new google.maps.LatLng(37.787034, -122.418208), new google.maps.LatLng(37.787056, -122.418034), new google.maps.LatLng(37.787169, -122.417145), new google.maps.LatLng(37.787217, -122.416715), new google.maps.LatLng(37.786144, -122.416403), new google.maps.LatLng(37.785292, -122.416257), new google.maps.LatLng(37.780666, -122.390374), new google.maps.LatLng(37.780501, -122.391281), new google.maps.LatLng(37.780148, -122.392052), new google.maps.LatLng(37.780173, -122.391148), new google.maps.LatLng(37.780693, -122.390592), new google.maps.LatLng(37.781261, -122.391142), new google.maps.LatLng(37.781808, -122.391730), new google.maps.LatLng(37.782340, -122.392341), new google.maps.LatLng(37.782812, -122.393022), new google.maps.LatLng(37.783300, -122.393672), new google.maps.LatLng(37.783809, -122.394275), new google.maps.LatLng(37.784246, -122.394979), new google.maps.LatLng(37.784791, -122.395958), new google.maps.LatLng(37.785675, -122.396746), new google.maps.LatLng(37.786262, -122.395780), new google.maps.LatLng(37.786776, -122.395093), new google.maps.LatLng(37.787282, -122.394426), new google.maps.LatLng(37.787783, -122.393767), new google.maps.LatLng(37.788343, -122.393184), new google.maps.LatLng(37.788895, -122.392506), new google.maps.LatLng(37.789371, -122.391701), new google.maps.LatLng(37.789722, -122.390952), new google.maps.LatLng(37.790315, -122.390305), new google.maps.LatLng(37.790738, -122.389616), new google.maps.LatLng(37.779448, -122.438702), new google.maps.LatLng(37.779023, -122.438585), new google.maps.LatLng(37.778542, -122.438492), new google.maps.LatLng(37.778100, -122.438411), new google.maps.LatLng(37.777986, -122.438376), new google.maps.LatLng(37.777680, -122.438313), new google.maps.LatLng(37.777316, -122.438273), new google.maps.LatLng(37.777135, -122.438254), new google.maps.LatLng(37.776987, -122.438303), new google.maps.LatLng(37.776946, -122.438404), new google.maps.LatLng(37.776944, -122.438467), new google.maps.LatLng(37.776892, -122.438459), new google.maps.LatLng(37.776842, -122.438442), new google.maps.LatLng(37.776822, -122.438391), new google.maps.LatLng(37.776814, -122.438412), new google.maps.LatLng(37.776787, -122.438628), new google.maps.LatLng(37.776729, -122.438650), new google.maps.LatLng(37.776759, -122.438677), new google.maps.LatLng(37.776772, -122.438498), new google.maps.LatLng(37.776787, -122.438389), new google.maps.LatLng(37.776848, -122.438283), new google.maps.LatLng(37.776870, -122.438239), new google.maps.LatLng(37.777015, -122.438198), new google.maps.LatLng(37.777333, -122.438256), new google.maps.LatLng(37.777595, -122.438308), new google.maps.LatLng(37.777797, -122.438344), new google.maps.LatLng(37.778160, -122.438442), new google.maps.LatLng(37.778414, -122.438508), new google.maps.LatLng(37.778445, -122.438516), new google.maps.LatLng(37.778503, -122.438529), new google.maps.LatLng(37.778607, -122.438549), new google.maps.LatLng(37.778670, -122.438644), new google.maps.LatLng(37.778847, -122.438706), new google.maps.LatLng(37.779240, -122.438744), new google.maps.LatLng(37.779738, -122.438822), new google.maps.LatLng(37.780201, -122.438882), new google.maps.LatLng(37.780400, -122.438905), new google.maps.LatLng(37.780501, -122.438921), new google.maps.LatLng(37.780892, -122.438986), new google.maps.LatLng(37.781446, -122.439087), new google.maps.LatLng(37.781985, -122.439199), new google.maps.LatLng(37.782239, -122.439249), new google.maps.LatLng(37.782286, -122.439266), new google.maps.LatLng(37.797847, -122.429388), new google.maps.LatLng(37.797874, -122.429180), new google.maps.LatLng(37.797885, -122.429069), new google.maps.LatLng(37.797887, -122.429050), new google.maps.LatLng(37.797933, -122.428954), new google.maps.LatLng(37.798242, -122.428990), new google.maps.LatLng(37.798617, -122.429075), new google.maps.LatLng(37.798719, -122.429092), new google.maps.LatLng(37.798944, -122.429145), new google.maps.LatLng(37.799320, -122.429251), new google.maps.LatLng(37.799590, -122.429309), new google.maps.LatLng(37.799677, -122.429324), new google.maps.LatLng(37.799966, -122.429360), new google.maps.LatLng(37.800288, -122.429430), new google.maps.LatLng(37.800443, -122.429461), new google.maps.LatLng(37.800465, -122.429474), new google.maps.LatLng(37.800644, -122.429540), new google.maps.LatLng(37.800948, -122.429620), new google.maps.LatLng(37.801242, -122.429685), new google.maps.LatLng(37.801375, -122.429702), new google.maps.LatLng(37.801400, -122.429703), new google.maps.LatLng(37.801453, -122.429707), new google.maps.LatLng(37.801473, -122.429709), new google.maps.LatLng(37.801532, -122.429707), new google.maps.LatLng(37.801852, -122.429729), new google.maps.LatLng(37.802173, -122.429789), new google.maps.LatLng(37.802459, -122.429847), new google.maps.LatLng(37.802554, -122.429825), new google.maps.LatLng(37.802647, -122.429549), new google.maps.LatLng(37.802693, -122.429179), new google.maps.LatLng(37.802729, -122.428751), new google.maps.LatLng(37.766104, -122.409291), new google.maps.LatLng(37.766103, -122.409268), new google.maps.LatLng(37.766138, -122.409229), new google.maps.LatLng(37.766183, -122.409231), new google.maps.LatLng(37.766153, -122.409276), new google.maps.LatLng(37.766005, -122.409365), new google.maps.LatLng(37.765897, -122.409570), new google.maps.LatLng(37.765767, -122.409739), new google.maps.LatLng(37.765693, -122.410389), new google.maps.LatLng(37.765615, -122.411201), new google.maps.LatLng(37.765533, -122.412121), new google.maps.LatLng(37.765467, -122.412939), new google.maps.LatLng(37.765444, -122.414821), new google.maps.LatLng(37.765444, -122.414964), new google.maps.LatLng(37.765318, -122.415424), new google.maps.LatLng(37.763961, -122.415296), new google.maps.LatLng(37.763115, -122.415196), new google.maps.LatLng(37.762967, -122.415183), new google.maps.LatLng(37.762278, -122.415127), new google.maps.LatLng(37.761675, -122.415055), new google.maps.LatLng(37.760932, -122.414988), new google.maps.LatLng(37.759337, -122.414862), new google.maps.LatLng(37.773187, -122.421922), new google.maps.LatLng(37.773043, -122.422118), new google.maps.LatLng(37.773007, -122.422165), new google.maps.LatLng(37.772979, -122.422219), new google.maps.LatLng(37.772865, -122.422394), new google.maps.LatLng(37.772779, -122.422503), new google.maps.LatLng(37.772676, -122.422701), new google.maps.LatLng(37.772606, -122.422806), new google.maps.LatLng(37.772566, -122.422840), new google.maps.LatLng(37.772508, -122.422852), new google.maps.LatLng(37.772387, -122.423011), new google.maps.LatLng(37.772099, -122.423328), new google.maps.LatLng(37.771704, -122.423783), new google.maps.LatLng(37.771481, -122.424081), new google.maps.LatLng(37.771400, -122.424179), new google.maps.LatLng(37.771352, -122.424220), new google.maps.LatLng(37.771248, -122.424327), new google.maps.LatLng(37.770904, -122.424781), new google.maps.LatLng(37.770520, -122.425283), new google.maps.LatLng(37.770337, -122.425553), new google.maps.LatLng(37.770128, -122.425832), new google.maps.LatLng(37.769756, -122.426331), new google.maps.LatLng(37.769300, -122.426902), new google.maps.LatLng(37.769132, -122.427065), new google.maps.LatLng(37.769092, -122.427103), new google.maps.LatLng(37.768979, -122.427172), new google.maps.LatLng(37.768595, -122.427634), new google.maps.LatLng(37.768372, -122.427913), new google.maps.LatLng(37.768337, -122.427961), new google.maps.LatLng(37.768244, -122.428138), new google.maps.LatLng(37.767942, -122.428581), new google.maps.LatLng(37.767482, -122.429094), new google.maps.LatLng(37.767031, -122.429606), new google.maps.LatLng(37.766732, -122.429986), new google.maps.LatLng(37.766680, -122.430058), new google.maps.LatLng(37.766633, -122.430109), new google.maps.LatLng(37.766580, -122.430211), new google.maps.LatLng(37.766367, -122.430594), new google.maps.LatLng(37.765910, -122.431137), new google.maps.LatLng(37.765353, -122.431806), new google.maps.LatLng(37.764962, -122.432298), new google.maps.LatLng(37.764868, -122.432486), new google.maps.LatLng(37.764518, -122.432913), new google.maps.LatLng(37.763435, -122.434173), new google.maps.LatLng(37.762847, -122.434953), new google.maps.LatLng(37.762291, -122.435935), new google.maps.LatLng(37.762224, -122.436074), new google.maps.LatLng(37.761957, -122.436892), new google.maps.LatLng(37.761652, -122.438886), new google.maps.LatLng(37.761284, -122.439955), new google.maps.LatLng(37.761210, -122.440068), new google.maps.LatLng(37.761064, -122.440720), new google.maps.LatLng(37.761040, -122.441411), new google.maps.LatLng(37.761048, -122.442324), new google.maps.LatLng(37.760851, -122.443118), new google.maps.LatLng(37.759977, -122.444591), new google.maps.LatLng(37.759913, -122.444698), new google.maps.LatLng(37.759623, -122.445065), new google.maps.LatLng(37.758902, -122.445158), new google.maps.LatLng(37.758428, -122.444570), new google.maps.LatLng(37.757687, -122.443340), new google.maps.LatLng(37.757583, -122.443240), new google.maps.LatLng(37.757019, -122.442787), new google.maps.LatLng(37.756603, -122.442322), new google.maps.LatLng(37.756380, -122.441602), new google.maps.LatLng(37.755790, -122.441382), new google.maps.LatLng(37.754493, -122.442133), new google.maps.LatLng(37.754361, -122.442206), new google.maps.LatLng(37.753719, -122.442650), new google.maps.LatLng(37.753096, -122.442915), new google.maps.LatLng(37.751617, -122.443211), new google.maps.LatLng(37.751496, -122.443246), new google.maps.LatLng(37.750733, -122.443428), new google.maps.LatLng(37.750126, -122.443536), new google.maps.LatLng(37.750103, -122.443784), new google.maps.LatLng(37.750390, -122.444010), new google.maps.LatLng(37.750448, -122.444013), new google.maps.LatLng(37.750536, -122.444040), new google.maps.LatLng(37.750493, -122.444141), new google.maps.LatLng(37.790859, -122.402808), new google.maps.LatLng(37.790864, -122.402768), new google.maps.LatLng(37.790995, -122.402539), new google.maps.LatLng(37.791148, -122.402172), new google.maps.LatLng(37.791385, -122.401312), new google.maps.LatLng(37.791405, -122.400776), new google.maps.LatLng(37.791288, -122.400528), new google.maps.LatLng(37.791113, -122.400441), new google.maps.LatLng(37.791027, -122.400395), new google.maps.LatLng(37.791094, -122.400311), new google.maps.LatLng(37.791211, -122.400183), new google.maps.LatLng(37.791060, -122.399334), new google.maps.LatLng(37.790538, -122.398718), new google.maps.LatLng(37.790095, -122.398086), new google.maps.LatLng(37.789644, -122.397360), new google.maps.LatLng(37.789254, -122.396844), new google.maps.LatLng(37.788855, -122.396397), new google.maps.LatLng(37.788483, -122.395963), new google.maps.LatLng(37.788015, -122.395365), new google.maps.LatLng(37.787558, -122.394735), new google.maps.LatLng(37.787472, -122.394323), new google.maps.LatLng(37.787630, -122.394025), new google.maps.LatLng(37.787767, -122.393987), new google.maps.LatLng(37.787486, -122.394452), new google.maps.LatLng(37.786977, -122.395043), new google.maps.LatLng(37.786583, -122.395552), new google.maps.LatLng(37.786540, -122.395610), new google.maps.LatLng(37.786516, -122.395659), new google.maps.LatLng(37.786378, -122.395707), new google.maps.LatLng(37.786044, -122.395362), new google.maps.LatLng(37.785598, -122.394715), new google.maps.LatLng(37.785321, -122.394361), new google.maps.LatLng(37.785207, -122.394236), new google.maps.LatLng(37.785751, -122.394062), new google.maps.LatLng(37.785996, -122.393881), new google.maps.LatLng(37.786092, -122.393830), new google.maps.LatLng(37.785998, -122.393899), new google.maps.LatLng(37.785114, -122.394365), new google.maps.LatLng(37.785022, -122.394441), new google.maps.LatLng(37.784823, -122.394635), new google.maps.LatLng(37.784719, -122.394629), new google.maps.LatLng(37.785069, -122.394176), new google.maps.LatLng(37.785500, -122.393650), new google.maps.LatLng(37.785770, -122.393291), new google.maps.LatLng(37.785839, -122.393159), new google.maps.LatLng(37.782651, -122.400628), new google.maps.LatLng(37.782616, -122.400599), new google.maps.LatLng(37.782702, -122.400470), new google.maps.LatLng(37.782915, -122.400192), new google.maps.LatLng(37.783137, -122.399887), new google.maps.LatLng(37.783414, -122.399519), new google.maps.LatLng(37.783629, -122.399237), new google.maps.LatLng(37.783688, -122.399157), new google.maps.LatLng(37.783716, -122.399106), new google.maps.LatLng(37.783798, -122.399072), new google.maps.LatLng(37.783997, -122.399186), new google.maps.LatLng(37.784271, -122.399538), new google.maps.LatLng(37.784577, -122.399948), new google.maps.LatLng(37.784828, -122.400260), new google.maps.LatLng(37.784999, -122.400477), new google.maps.LatLng(37.785113, -122.400651), new google.maps.LatLng(37.785155, -122.400703), new google.maps.LatLng(37.785192, -122.400749), new google.maps.LatLng(37.785278, -122.400839), new google.maps.LatLng(37.785387, -122.400857), new google.maps.LatLng(37.785478, -122.400890), new google.maps.LatLng(37.785526, -122.401022), new google.maps.LatLng(37.785598, -122.401148), new google.maps.LatLng(37.785631, -122.401202), new google.maps.LatLng(37.785660, -122.401267), new google.maps.LatLng(37.803986, -122.426035), new google.maps.LatLng(37.804102, -122.425089), new google.maps.LatLng(37.804211, -122.424156), new google.maps.LatLng(37.803861, -122.423385), new google.maps.LatLng(37.803151, -122.423214), new google.maps.LatLng(37.802439, -122.423077), new google.maps.LatLng(37.801740, -122.422905), new google.maps.LatLng(37.801069, -122.422785), new google.maps.LatLng(37.800345, -122.422649), new google.maps.LatLng(37.799633, -122.422603), new google.maps.LatLng(37.799750, -122.421700), new google.maps.LatLng(37.799885, -122.420854), new google.maps.LatLng(37.799209, -122.420607), new google.maps.LatLng(37.795656, -122.400395), new google.maps.LatLng(37.795203, -122.400304), new google.maps.LatLng(37.778738, -122.415584), new google.maps.LatLng(37.778812, -122.415189), new google.maps.LatLng(37.778824, -122.415092), new google.maps.LatLng(37.778833, -122.414932), new google.maps.LatLng(37.778834, -122.414898), new google.maps.LatLng(37.778740, -122.414757), new google.maps.LatLng(37.778501, -122.414433), new google.maps.LatLng(37.778182, -122.414026), new google.maps.LatLng(37.777851, -122.413623), new google.maps.LatLng(37.777486, -122.413166), new google.maps.LatLng(37.777109, -122.412674), new google.maps.LatLng(37.776743, -122.412186), new google.maps.LatLng(37.776440, -122.411800), new google.maps.LatLng(37.776295, -122.411614), new google.maps.LatLng(37.776158, -122.411440), new google.maps.LatLng(37.775806, -122.410997), new google.maps.LatLng(37.775422, -122.410484), new google.maps.LatLng(37.775126, -122.410087), new google.maps.LatLng(37.775012, -122.409854), new google.maps.LatLng(37.775164, -122.409573), new google.maps.LatLng(37.775498, -122.409180), new google.maps.LatLng(37.775868, -122.408730), new google.maps.LatLng(37.776256, -122.408240), new google.maps.LatLng(37.776519, -122.407928), new google.maps.LatLng(37.776539, -122.407904), new google.maps.LatLng(37.776595, -122.407854), new google.maps.LatLng(37.776853, -122.407547), new google.maps.LatLng(37.777234, -122.407087), new google.maps.LatLng(37.777644, -122.406558), new google.maps.LatLng(37.778066, -122.406017), new google.maps.LatLng(37.778468, -122.405499), new google.maps.LatLng(37.778866, -122.404995), new google.maps.LatLng(37.779295, -122.404455), new google.maps.LatLng(37.779695, -122.403950), new google.maps.LatLng(37.779982, -122.403584), new google.maps.LatLng(37.780295, -122.403223), new google.maps.LatLng(37.780664, -122.402766), new google.maps.LatLng(37.781043, -122.402288), new google.maps.LatLng(37.781399, -122.401823), new google.maps.LatLng(37.781727, -122.401407), new google.maps.LatLng(37.781853, -122.401247), new google.maps.LatLng(37.781894, -122.401195), new google.maps.LatLng(37.782076, -122.400977), new google.maps.LatLng(37.782338, -122.400603), new google.maps.LatLng(37.782666, -122.400133), new google.maps.LatLng(37.783048, -122.399634), new google.maps.LatLng(37.783450, -122.399198), new google.maps.LatLng(37.783791, -122.398998), new google.maps.LatLng(37.784177, -122.398959), new google.maps.LatLng(37.784388, -122.398971), new google.maps.LatLng(37.784404, -122.399128), new google.maps.LatLng(37.784586, -122.399524), new google.maps.LatLng(37.784835, -122.399927), new google.maps.LatLng(37.785116, -122.400307), new google.maps.LatLng(37.785282, -122.400539), new google.maps.LatLng(37.785346, -122.400692), new google.maps.LatLng(37.765769, -122.407201), new google.maps.LatLng(37.765790, -122.407414), new google.maps.LatLng(37.765802, -122.407755), new google.maps.LatLng(37.765791, -122.408219), new google.maps.LatLng(37.765763, -122.408759), new google.maps.LatLng(37.765726, -122.409348), new google.maps.LatLng(37.765716, -122.409882), new google.maps.LatLng(37.765708, -122.410202), new google.maps.LatLng(37.765705, -122.410253), new google.maps.LatLng(37.765707, -122.410369), new google.maps.LatLng(37.765692, -122.410720), new google.maps.LatLng(37.765699, -122.411215), new google.maps.LatLng(37.765687, -122.411789), new google.maps.LatLng(37.765666, -122.412373), new google.maps.LatLng(37.765598, -122.412883), new google.maps.LatLng(37.765543, -122.413039), new google.maps.LatLng(37.765532, -122.413125), new google.maps.LatLng(37.765500, -122.413553), new google.maps.LatLng(37.765448, -122.414053), new google.maps.LatLng(37.765388, -122.414645), new google.maps.LatLng(37.765323, -122.415250), new google.maps.LatLng(37.765303, -122.415847), new google.maps.LatLng(37.765251, -122.416439), new google.maps.LatLng(37.765204, -122.417020), new google.maps.LatLng(37.765172, -122.417556), new google.maps.LatLng(37.765164, -122.418075), new google.maps.LatLng(37.765153, -122.418618), new google.maps.LatLng(37.765136, -122.419112), new google.maps.LatLng(37.765129, -122.419378), new google.maps.LatLng(37.765119, -122.419481), new google.maps.LatLng(37.765100, -122.419852), new google.maps.LatLng(37.765083, -122.420349), new google.maps.LatLng(37.765045, -122.420930), new google.maps.LatLng(37.764992, -122.421481), new google.maps.LatLng(37.764980, -122.421695), new google.maps.LatLng(37.764993, -122.421843), new google.maps.LatLng(37.764986, -122.422255), new google.maps.LatLng(37.764975, -122.422823), new google.maps.LatLng(37.764939, -122.423411), new google.maps.LatLng(37.764902, -122.424014), new google.maps.LatLng(37.764853, -122.424576), new google.maps.LatLng(37.764826, -122.424922), new google.maps.LatLng(37.764796, -122.425375), new google.maps.LatLng(37.764782, -122.425869), new google.maps.LatLng(37.764768, -122.426089), new google.maps.LatLng(37.764766, -122.426117), new google.maps.LatLng(37.764723, -122.426276), new google.maps.LatLng(37.764681, -122.426649), new google.maps.LatLng(37.782012, -122.404200), new google.maps.LatLng(37.781574, -122.404911), new google.maps.LatLng(37.781055, -122.405597), new google.maps.LatLng(37.780479, -122.406341), new google.maps.LatLng(37.779996, -122.406939), new google.maps.LatLng(37.779459, -122.407613), new google.maps.LatLng(37.778953, -122.408228), new google.maps.LatLng(37.778409, -122.408839), new google.maps.LatLng(37.777842, -122.409501), new google.maps.LatLng(37.777334, -122.410181), new google.maps.LatLng(37.776809, -122.410836), new google.maps.LatLng(37.776240, -122.411514), new google.maps.LatLng(37.775725, -122.412145), new google.maps.LatLng(37.775190, -122.412805), new google.maps.LatLng(37.774672, -122.413464), new google.maps.LatLng(37.774084, -122.414186), new google.maps.LatLng(37.773533, -122.413636), new google.maps.LatLng(37.773021, -122.413009), new google.maps.LatLng(37.772501, -122.412371), new google.maps.LatLng(37.771964, -122.411681), new google.maps.LatLng(37.771479, -122.411078), new google.maps.LatLng(37.770992, -122.410477), new google.maps.LatLng(37.770467, -122.409801), new google.maps.LatLng(37.770090, -122.408904), new google.maps.LatLng(37.769657, -122.408103), new google.maps.LatLng(37.769132, -122.407276), new google.maps.LatLng(37.768564, -122.406469), new google.maps.LatLng(37.767980, -122.405745), new google.maps.LatLng(37.767380, -122.405299), new google.maps.LatLng(37.766604, -122.405297), new google.maps.LatLng(37.765838, -122.405200), new google.maps.LatLng(37.765139, -122.405139), new google.maps.LatLng(37.764457, -122.405094), new google.maps.LatLng(37.763716, -122.405142), new google.maps.LatLng(37.762932, -122.405398), new google.maps.LatLng(37.762126, -122.405813), new google.maps.LatLng(37.761344, -122.406215), new google.maps.LatLng(37.760556, -122.406495), new google.maps.LatLng(37.759732, -122.406484), new google.maps.LatLng(37.758910, -122.406228), new google.maps.LatLng(37.758182, -122.405695), new google.maps.LatLng(37.757676, -122.405118), new google.maps.LatLng(37.757039, -122.404346), new google.maps.LatLng(37.756335, -122.403719), new google.maps.LatLng(37.755503, -122.403406), new google.maps.LatLng(37.754665, -122.403242), new google.maps.LatLng(37.753837, -122.403172), new google.maps.LatLng(37.752986, -122.403112), new google.maps.LatLng(37.751266, -122.403355) ]
        pointArray = new google.maps.MVCArray(taxiData)
        heatmap = new google.maps.visualization.HeatmapLayer(data: pointArray)
        heatmap.setMap @map
        @heatmapProccess = true

    update: (series) =>

    generateRandomData: () =>
        @tripsCompleted = [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @tripsCancelled = [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @tripsRejected =  [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @tripsError =     [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @timeEnroute =      [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @timeOccupied =     [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @timeIdle =         [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @mileageEnroute =   [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @mileageOccupied =  [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @serviceGoal =      [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @serviceLateness =  [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @ratingDrivers =    [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @ratingPassengers = [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]

        @tripsCompletedF = [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @tripsCancelledF = [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @tripsRejectedF =  [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @tripsErrorF =     [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @timeEnrouteF =      [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @timeOccupiedF =     [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @timeIdleF =         [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @mileageEnrouteF =   [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @mileageOccupiedF =  [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @serviceGoalF =      [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @serviceLatenessF =  [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @ratingDriversF =    [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]
        @ratingPassengersF = [@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r(),@r()]


    r: () =>
        ((Math.random() * 30) + 70).toFixed(1)



$('.developer.mapstatistics').ready ->
    new StatisticsHeatMap(
        new TripThru(tripthruUrl, $('#access_token').val())
        'heat-map'
    )
