# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

class TripThru

    constructor: (@baseUrl, @accessToken) ->
        if not @baseUrl? or not @accessToken?
            console.error('Wrong parameters')

    getStats: (_callback) =>
        $.get(@baseUrl + 'stats?format=json&access_token=' + @accessToken, (data) =>
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getLog: (tripId, _callback) =>
        id = if tripId? then '&tripId=' + tripId else ''
        $.get(@baseUrl + 'log?format=json&access_token=' + @accessToken + id, (data) =>
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getTrips: (status, _callback) =>
        $.get(@baseUrl + 'trips?format=json&access_token=' + @accessToken, (data) =>
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getTripStatus: (tripId, _callback) =>
        $.get(@baseUrl + 'tripstatus?format=json&access_token=' + @accessToken + '&tripid=' + tripId, (data) =>
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return


class ActiveTripsChart

  constructor: (chartContainer) ->
    @chart = new JustGage({
        id: chartContainer
        value: 0
        min: 0
        max: 10
        label: 'trips'
        relativeGaugeSize: true
    })
    @activeTripsCount = []
    @max = 0

  updateStats: (stats) =>
      @update(stats.activeTrips, stats.activeTrips)

  update: (activeTrips, selectedTypeActiveTrips) =>
      if not activeTrips? or not selectedTypeActiveTrips?
          console.error('Wrong parameters')
          return

      @max = if activeTrips > @max then activeTrips else @max
      upperLimit = if @max < 10 then 10 else Math.ceil(@max * 1.4)

      @chart.refresh(selectedTypeActiveTrips, upperLimit)

class Location

    constructor: (@lat, @lng, @address) ->

    getAddress: () ->
        @address

class Trip

    constructor: (@id, @passengerName, @pickupTime, @pickupLocation, @origin, @servicing, @status, @ETA,
                    @fare, @driverName, @driverLocation, @dropoffLocation, @driverInitialLocation) ->
        @containerId = id.replace(new RegExp('@', 'g'), '-').replace('.', '-')

    update: (@passengerName, @pickupTime, @pickupLocation, @origin, @servicing, @status, @ETA,
             @fare, @driverName, @driverLocation, @dropoffLocation, @driverInitialLocation) ->

    getContainerId: () =>
        @containerId
    getId: () =>
        @id
    getPassengerName: () ->
        @passengerName
    getPickupTime: () ->
        @pickupTime
    getPickupLocation: () ->
        @pickupLocation
    getOrigin: () ->
        @origin
    getServicing: () ->
        @servicing
    getStatus: () ->
        @status
    getETA: () ->
        @ETA
    getFare: () ->
        @fare
    getDriverName: () ->
        @driverName
    getDriverLocation: () ->
        @driverLocation
    getDropoffLocation: () ->
        @dropoffLocation
    getDriverInitialLocation: () ->
        @driverInitialLocation


class TripList

    constructor: (@containerId) ->

    tripChanged: (trip) =>
        if not trip?
            $('#' + @containerId + '>div.active').removeClass('active')
        else
            if not $('#' + trip.getContainerId()).hasClass('active')
                $('#' + @containerId + '>div.active').removeClass('active')
                $("#" + trip.getContainerId()).addClass("active")

    updateTrips: (tripsById) =>
        for id, trip of tripsById
            if !$('#' + trip.getContainerId()).length
                @addTrip(trip)

    updateActiveTrip: (trip) =>


    addTrip: (trip) =>
        tripContainerId = trip.getContainerId()
        tripTag = @getTripTag(trip)
        $('#' + @containerId).prepend tripTag
        $('#' + tripContainerId).slideDown()

    getTripTag: (trip) =>
        '
            <div class="well trip" id="' + trip.getContainerId() + '" style="display:none;">
                <h1>' + trip.getId() + '</h1>
                <p><span>Passenger:</span> <i>' + trip.getPassengerName() + '</i></p>
                <p><span>Time:</span> <i>' + trip.getPickupTime().split('.')[0] + '</i></p>
                <p><span>Pickup:</span> <i>' + trip.getPickupLocation().getAddress() + '</i></p>
            </div>
        '

class TripTracker
    
    constructor: (@tripInfoContainerId, @mapContainer) ->
        @passengerMarker = null
        @destinationMarker = null
        @driverMarker = null
        @initialMarker = null
        @map = null
        @mapOptions = null
        @directionsDisplay = null
        @directionsDisplay2 = null
        @driverPreviousLocation = null
        @setTripInfoBool = false
        @tripId = null

    tripChanged: (trip) =>
        #if trip? and !@tripId?
        #    $('#' + @mapContainer).html('#<%= image_tag('loading.gif') %>')
        @tripId = null
        @updateTripInfo(trip)

    updateActiveTrip: (trip) =>
        @updateTripInfo(trip)
        @updateMap(trip)
        if trip?
            @tripId = trip.getId()

    updateTripInfo: (trip) =>
        if trip?
            $('#' + @tripInfoContainerId).html(
                '<div>
                    <p><h1>' + trip.getId() + '<span> - ' + trip.getStatus() + '</span></h1></p>
                    <p><span>Passenger:</span>' + trip.getPassengerName() + '</p>
                    <p><span>Time: </span>' + trip.getPickupTime().split('.')[0] + '</p>
                    <p><span>Pickup: </span>' + trip.getPickupLocation().getAddress() + '</p>
                    <p><span>Dropoff: </span>' + trip.getDropoffLocation().getAddress() + '</p>
                    <p><span>Servicing: </span>' + trip.getServicing() + '</p>
                    <p><span>Driver: </span>' + trip.getDriverName() +
                        ' @' + if trip.getDriverLocation()? then  + trip.getDriverLocation().getAddress() else ''  + '</p>
                 </div>
                '
            )
        else if !@tripId?
            $('#' + @tripInfoContainerId).fadeOut(1000).html('<h1>Select a trip</h1>').fadeIn(1000)

    updateMap: (trip) =>
        #if trip? and trip.getId() != @tripId
        #    $('#' + @mapContainer).html('<div id="map-canvas" class="tracking-map"></div>')
        return  if @setTripInfoBool is true or !trip? or !trip.driverLocation?
        @setTripInfoBool = true
        if not trip? or @tripId isnt trip.getId()
            @passengerMarker.setMap null  if @passengerMarker?
            @driverMarker.setMap null  if @driverMarker?
            @destinationMarker.setMap null  if @destinationMarker?
            @initialMarker.setMap null  if @initialMarker?
            @driverPreviousLocation = null
            @tripId = (if trip? then trip.getId() else "")
        unless trip?
            @setTripInfoBool = false
            return
        if not @driverPreviousLocation? or trip.driverLocation.lat isnt @driverPreviousLocation.lat or trip.driverLocation.lng isnt @driverPreviousLocation.lng
            @driverPreviousLocation = trip.driverLocation
            pickupLocation = trip.pickupLocation
            driverLocation = trip.driverLocation
            dropoffLocation = trip.dropoffLocation
            driverInitialLocation = trip.driverInitialLocation
            if pickupLocation or driverLocation
                passengerLocation = null
                driverCurrentLocation = null
                destinationLocation = null
                initialLocation = null
                if dropoffLocation
                    destinationLocation = new google.maps.LatLng(dropoffLocation.lat, dropoffLocation.lng)
                    if @destinationMarker?
                        @destinationMarker.setMap @map
                        @destinationMarker.setPosition destinationLocation
                if pickupLocation
                    passengerLocation = new google.maps.LatLng(pickupLocation.lat, pickupLocation.lng)
                    if @passengerMarker?
                        @passengerMarker.setMap @map
                        @passengerMarker.setPosition passengerLocation
                if driverLocation
                    driverCurrentLocation = new google.maps.LatLng(driverLocation.lat, driverLocation.lng)
                    if @driverMarker?
                        @driverMarker.setMap @map
                        @driverMarker.setPosition driverCurrentLocation
                if driverInitialLocation
                    initialLocation = new google.maps.LatLng(driverInitialLocation.lat, driverInitialLocation.lng)
                    if @initialMarker?
                        @initialMarker.setMap @map
                        @initialMarker.setPosition driverInitialLocation
                unless @map?
                    @mapOptions =
                        center: (if driverCurrentLocation? then driverCurrentLocation else passengerLocation)
                        zoom: 15
                        mapTypeControl: false
                        mapTypeId: google.maps.MapTypeId.ROADMAP

                    @map = new google.maps.Map(document.getElementById("map-canvas"), @mapOptions)
                if passengerLocation? and not @passengerMarker?
                    @passengerMarker = new google.maps.Marker(
                        position: passengerLocation
                        map: @map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=home|FFFF00"
                        title: "Pickup"
                    )
                if initialLocation? and not @initialMarker?
                    @initialMarker = new google.maps.Marker(
                        position: driverInitialLocation
                        map: @map
                        icon: "http://www.mricons.com/store/png/113267_25418_16_flag_icon.png"
                        title: "Initial"
                    )
                if driverLocation? and not @driverMarker?
                    @driverMarker = new google.maps.Marker(
                        position: driverCurrentLocation
                        map: @map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=taxi|FFFF00"
                        title: "Driver"
                    )
                if destinationLocation? and not @destinationMarker?
                    @destinationMarker = new google.maps.Marker(
                        position: dropoffLocation
                        map: @map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=cafe|FFFF00"
                        title: "Destination"
                    )
                if driverLocation? and pickupLocation? and dropoffLocation?
                    routes = []
                    switch trip.status
                        when "Enroute"
                            routes = [
                                origin: initialLocation
                                destination: driverCurrentLocation
                            ]
                        when "PickedUp"
                            routes = [
                                origin: initialLocation
                                destination: passengerLocation
                            ,
                                origin: passengerLocation
                                destination: driverCurrentLocation
                            ]
                        when "Complete"
                            routes = [
                                origin: initialLocation
                                destination: passengerLocation
                            ,
                                origin: passengerLocation
                                destination: destinationLocation
                            ]
                    rendererOptions =
                        preserveViewport: true
                        suppressMarkers: true
                        polylineOptions:
                            strokeColor: "#8B0000"
                            strokeOpacity: 0.8
                            strokeWeight: 5

                    rendererOptions2 =
                        preserveViewport: true
                        suppressMarkers: true
                        polylineOptions:
                            strokeColor: "#008000"
                            strokeOpacity: 0.8
                            strokeWeight: 5

                    directionsService = new google.maps.DirectionsService()
                    directionsService2 = new google.maps.DirectionsService()
                    boleanFirst = true
                    if @directionsDisplay?
                        @directionsDisplay.setMap null
                        @directionsDisplay = null
                    if @directionsDisplay2?
                        @directionsDisplay2.setMap null
                        @directionsDisplay2 = null
                    routes.forEach (route) =>
                        request =
                            origin: route.origin
                            destination: route.destination
                            travelMode: google.maps.TravelMode.DRIVING

                        if boleanFirst
                            @directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions)
                            @directionsDisplay.setMap @map
                        else
                            @directionsDisplay2 = new google.maps.DirectionsRenderer(rendererOptions2)
                            @directionsDisplay2.setMap @map
                        if boleanFirst
                            directionsService.route request, (result, status) =>
                                @directionsDisplay.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay?

                            boleanFirst = false
                        else
                            directionsService2.route request, (result, status) =>
                                @directionsDisplay2.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay2?
                @map.setCenter (if driverCurrentLocation? then driverCurrentLocation else passengerLocation)
        @setTripInfoBool = false

class StatisticsDashboard

    constructor: (@containerId) ->
        @timePieChartId = 'time-pie-chart'
        @tripsPieChartId = 'trips-pie-chart'
        @mileagePieChartId = 'mileage-pie-chart'
        @tripsLastHourPieChartId = 'trips-last-hour-pie-chart'
        @ratingsPieChartId = 'ratings-pie-chart'
        @servicePieChartId = 'service-pie-chart'
        @lastValues =
            passengerRating: 0
            driverRating: 0
            timeWithPassenger: 0
            mileageWithPassenger: 0
            timeEnroute: 0
            mileageEnroute: 0
            timeIdle: 0
            totalTrips: 0
            cancelled: 0
            completed: 0
            rejected: 0
            lateness: 0
            withinServiceGoal: 0

        $('#' + @containerId).html('
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Time</div>
                <div class="pie-chart" id="' + @timePieChartId + '"></div>
            </div>
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Trips</div>
                <div class="pie-chart" id="' + @tripsPieChartId + '"></div>
            </div>
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Mileage</div>
                <div class="pie-chart" id="' + @mileagePieChartId + '"></div>
            </div>
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Trips last hour</div>
                <div class="pie-chart" id="' + @tripsLastHourPieChartId + '"></div>
            </div>
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Ratings</div>
                <div class="pie-chart" id="' + @ratingsPieChartId + '"></div>
            </div>
            <div  class="dashboard-statistics-pie-chart" >
                <div class="title">Service</div>
                <div class="pie-chart" id="' + @servicePieChartId + '"></div>
            </div>
                ')

        Morris.Donut({
            element: @timePieChartId
            data: [
                {label: "Enroute", value: 1}
                {label: "Passenger", value: 1}
                {label: "Idle", value: 1}
            ]
            backgroundColor: '#ccc',
            labelColor: '#060',
            colors: [
                '#0BA462',
                '#39B580',
                '#67C69D',
                '#95D7BB'
            ],
            formatter: (x) -> x + "%"
        })
        Morris.Donut({
            element: @tripsPieChartId,
            data: [
                {label: "Completed", value: 1}
                {label: "Rejected", value: 1}
                {label: "Cancelled", value: 1}
            ]
            colors: [
                '#0BA462'
                '#DADD0F'
                '#DD1D18'
            ]
            formatter: (x) -> x + "%"
        })
        Morris.Donut({
            element: @mileagePieChartId,
            data: [
                {label: "Enroute", value: 1}
                {label: "Passenger", value: 1}
            ]
            colors: [
                '#0BA462'
                '#DDD609'
            ]
            formatter: (x) -> x + "%"
        })
        Morris.Donut({
            element: @tripsLastHourPieChartId,
            data: [
                {label: "Trips", value: 1}
            ]
            colors: [
                '#0BA462'
            ]
        })
        Morris.Donut({
            element: @ratingsPieChartId,
            data: [
                {label: "Passengers", value: 1}
                {label: "Drivers", value: 1}
            ]
            colors: [
                '#0BA462'
            ]
        })
        Morris.Donut({
            element: @servicePieChartId,
            data: [
                {label: "Within goal", value: 1}
                {label: "Lateness", value: 1}
            ]
            colors: [
                '#3C6ADD'
                '#DD1D18'
            ]
        })

    updateStats: (stats) =>
        @update(80, 90, 55, 32, 70, 80, 15, 80, 10, 80, 10, 15, 95)

    update: (passengerRating, driverRating, timeWithPassenger, mileageWithPassenger, timeEnroute, mileageEnroute,
                timeIdle, totalTrips, cancelled, completed, rejected, lateness, withinServiceGoal) =>

        if @lastValues.timeEnroute != timeEnroute or
                @lastValues.timeWithPassenger != timeWithPassenger or
                @lastValues.timeIdle != timeIdle

            @lastValues.timeEnroute = timeEnroute
            @lastValues.timeWithPassenger = timeWithPassenger
            @lastValues.timeIdle = timeIdle
            Morris.Donut({
                element: @timePieChartId
                data: [
                    {label: "Enroute", value: timeEnroute}
                    {label: "Passenger", value: timeWithPassenger}
                    {label: "Idle", value: timeIdle}
                ]
                colors: [
                    '#0BA462'
                    '#2922DD'
                    '#DD1D18'
                ]
                formatter: (x) -> x + "%"
            })

        if @lastValues.completed != completed or
                @lastValues.cancelled != cancelled or
                @lastValues.rejected != rejected

            @lastValues.completed = completed
            @lastValues.cancelled = cancelled
            @lastValues.rejected = rejected
            Morris.Donut({
                element: @tripsPieChartId,
                data: [
                    {label: "Completed", value: completed}
                    {label: "Rejected", value: rejected}
                    {label: "Cancelled", value: cancelled}
                ]
                colors: [
                    '#0BA462'
                    '#DADD0F'
                    '#DD1D18'
                ]
                formatter: (x) -> x + "%"
            })

        if @lastValues.mileageEnroute != mileageEnroute or
                @lastValues.mileageWithPassenger != mileageWithPassenger

            @lastValues.mileageEnroute = mileageEnroute
            @lastValues.mileageWithPassenger = mileageWithPassenger
            Morris.Donut({
                element: @mileagePieChartId,
                data: [
                    {label: "Enroute", value: mileageEnroute}
                    {label: "Passenger", value: mileageWithPassenger}
                ]
                colors: [
                    '#0BA462'
                    '#3C6ADD'
                ]
                formatter: (x) -> x + "%"
            })

        if @lastValues.totalTrips != totalTrips
            @lastValues.totalTrips = totalTrips
            Morris.Donut({
                element: @tripsLastHourPieChartId,
                data: [
                    {label: "Trips", value: totalTrips}
                ]
                colors: [
                    '#0BA462'
                ]
            })

        if @lastValues.passengerRating != passengerRating or
                @lastValues.driverRating != driverRating

            @lastValues.passengerRating = passengerRating
            @lastValues.driverRating = driverRating
            Morris.Donut({
                element: @ratingsPieChartId,
                data: [
                    {label: "Passengers", value: passengerRating}
                    {label: "Drivers", value: driverRating}
                ]
                colors: [
                    '#3C6ADD'
                    '#0BA462'
                ]
                formatter: (x) -> x + "%"
            })

        if @lastValues.withinServiceGoal != withinServiceGoal or
                @lastValues.lateness != lateness

            @lastValues.withinServiceGoal = withinServiceGoal
            @lastValues.lateness = lateness
            Morris.Donut({
                element: @servicePieChartId,
                data: [
                    {label: "Within goal", value: withinServiceGoal}
                    {label: "Lateness", value: lateness}
                ]
                colors: [
                    '#0BA462'
                    '#DD1D18'
                ]
                formatter: (x) -> x + "%"
            })

class ActivityLog

    constructor: (@containerId) ->
        @tripId = ''
        @latestAddedLogDate = null
        
    tripChanged: (trip) =>
        $('#' + @containerId).html('<%= image_tag('loading.gif') %>')

    updateLog: (logList, currentTripId) =>
        if logList? and logList.length > 0
            logList = logList.reverse()
            newLatest = logList[0].time
            logs = []
            if !@latestAddedLogDate? or @tripId != currentTripId
                logs = logList
                $('#' + @containerId).html('')
            else
                for log in logList
                    if Date.parse(log.time) > Date.parse(@latestAddedLogDate)
                        logs.push log
                    else
                        break

            if logs.length > 0
                i = 0
                for log in logs.reverse()
                    [id, logString] = @getLogTag(i, log)
                    $('#' + @containerId).prepend(logString)
                    $('#' + id).slideDown();
                    i++
                Prism.highlightAll();@latestAddedLogDate = logList[logList.length-1].time

            @tripId = currentTripId
            @latestAddedLogDate = newLatest

    getLogTag: (id, log) =>
        id =  id + 'parent-accordion'
        logString = '
                <div style="display: none" class="accordion-group" id="' + id + '">
                    <div class="accordion-heading">
                        <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion">
                            ' + log.time.split('.')[0] + ' | ' + log.messages[0].text +  '
                        </a>
                    </div>
                    <div id="' + id + '-accordion" class="accordion-body collapse">
                        <div class="accordion-inner">
                '

        if log.request?
            logString += '
                            <div class="accordion-group json-inner-log">
                                <div class="accordion-heading">
                                    <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-request">
                                        Request
                                    </a>
                                </div>
                                <div id="' + id + '-accordion-request" class="accordion-body collapse">
                                    <div class="accordion-inner">
                                        <pre><code class="language-javascript">' + FormatJSON(JSON.parse(log.request)) + '</code></pre>
                                    </div>
                                </div>
                            </div>

        '

        i = 1
        while(i < log.messages.length - 1)
            message = log.messages[i]
            padding = if message.indent is 0 then '' else 'padding-left: ' + message.indent + 'px'

            logString += '<div style="' + padding + '">'

            if message.json?
                hasResponse = ((i + 1) < (log.messages.length - 1)) and
                        log.messages[i + 1].text.indexOf('Response') != -1 and
                        log.messages[i + 1].json

                logString += '
                            <div class="accordion-group json-inner-log">
                                <div class="accordion-heading">
                                    <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-' + i + '">
                                        ' + message.text + '
                                    </a>
                                </div>
                                <div id="' + id + '-accordion-' + i + '" class="accordion-body collapse">
                                    <div class="accordion-inner">
                                        <pre><code class="language-javascript">'

                logString +=                'Request:\n' + FormatJSON(JSON.parse(message.json))

                if hasResponse
                    logString +=            '\n\nResponse:\n' + FormatJSON(JSON.parse(log.messages[i + 1].json))
                    i++

                logString += '          </code></pre>
                                    </div>
                                </div>
                            </div>'
            else
                logString +='<div class="accordion-group simple-inner-log">
                                <div class="accordion-heading">
                                    <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-' + i + '">
                                        ' + message.text + '
                                    </a>
                                </div>
                             </div>
                                '

            logString += ' </div>'
            i++

        if log.response?
            logString += '
                            <div class="accordion-group json-inner-log">
                                <div class="accordion-heading">
                                    <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-response">
                                        Response
                                    </a>
                                </div>
                                <div id="' + id + '-accordion-response" class="accordion-body collapse">
                                    <div class="accordion-inner">
                                        <pre><code class="language-javascript">' + FormatJSON(JSON.parse(log.response)) + '</code></pre>
                                    </div>
                                </div>
                            </div>

        '
        logString +=
            '           </div>
                    </div>
                </div>
              '

        return [id, logString]


class DashboardManager

    constructor: (@gateway, @statusSelectorContainerId, @listeners) ->
        @tripsById = {}
        @activeTrip = null
        @selectedStatus = 'All'
        @updatingStats = false
        @updatingTrips = false
        @updatingActiveTrip = false
        @updatingLogs = false

        $('#' + @statusSelectorContainerId).change =>
            @selectedStatus = $('#' + @statusSelectorContainerId + ' option: selected').val()
            @update()

    update: =>
        if not  @updatingStats
            @updatingStats = true
            @gateway.getStats(@updateStats)

        if not @updatingTrips
            @updatingTrips = true
            status = if @selectedStatus != 'All' then @selectedStatus else null
            @gateway.getTrips(status, @updateTrips)

        if not @updatingActiveTrip
            @updatingActiveTrip = true
            if @activeTrip?
                @gateway.getTripStatus(@activeTrip.getId(), @updateActiveTrip)
            else
                @updateActiveTrip(null)

        if not @updatingLogs
            @updatingLogs = true
            tripId = if @activeTrip? then @activeTrip.getId() else null
            @gateway.getLog tripId, @updateLogs

    updateStats: (data) =>
        if data?
            for listener in @listeners
                if typeof listener.updateStats is 'function'
                    try
                        listener.updateStats(data)
                    catch error
                        console.error listener + ' updateStats failed: ' + error
        @updatingStats = false

    updateTrips: (data) =>
        if data?
            for newTrip in data.trips
                @processTrip(newTrip)

            for listener in @listeners
                if typeof listener.updateTrips is 'function'
                    try
                        listener.updateTrips(@tripsById)
                    catch error
                        console.error listener + ' updateTrips failed: ' + error
        @updatingTrips = false

    processTrip: (newTrip) =>
        newTrips = []
        if newTrip.id not of @tripsById
            driverLocation =
                if newTrip.driverLocation? then new Location(newTrip.driverLocation.lat, newTrip.driverLocation.lng, '') else null
            driverInitialLocation =
                if newTrip.driverInitialLocation? then new Location(newTrip.driverInitialLocation.lat, newTrip.driverInitalLocation.lng, '') else null
            trip = new Trip(
                    newTrip.id
                    newTrip.passengerName
                    newTrip.pickupTime
                    new Location(newTrip.pickupLocation.lat, newTrip.pickupLocation.lng, '')
                    newTrip.originatingPartnerName
                    newTrip.servicingPartnerName
                    newTrip.status
                    newTrip.eta
                    newTrip.price
                    newTrip.driverName
                    driverLocation
                    new Location(newTrip.dropoffLocation.lat, newTrip.dropoffLocation.lng, '')
                    driverInitialLocation
            )
            @tripsById[trip.getId()] = trip
            newTrips.push trip
            $(document).off('click', '#' + trip.getContainerId()).on 'click', '#' + trip.getContainerId(),  =>
                @toggleActiveTrip(trip.getId())

    toggleActiveTrip: (tripId) =>
        trip = @tripsById[tripId]
        if not @activeTrip? or @activeTrip.id != trip.id
            @activeTrip = trip
        else
            @activeTrip = null

        for listener in @listeners
            if typeof listener.tripChanged is 'function'
                try
                    listener.tripChanged(@activeTrip)
                catch error
                    console.error listener + ' tripChanged failed: ' + error
            
        @update()


    updateActiveTrip: (data) =>
        if data?
            driverLocation =
                if data.driverLocation? then new Location(data.driverLocation.lat, data.driverLocation.lng, '') else null
            driverInitialLocation =
                if data.driverInitialLocation? then new Location(data.driverInitialLocation.lat, data.driverInitialLocation.lng, '') else null
            @activeTrip.update(
                if data.passengerName? then data.passengerName else @activeTrip.getPassengerName()
                if data.pickupTime? then data.pickupTime else @activeTrip.getPickupTime()
                if data.pickupLocation? then new Location(data.pickupLocation.lat, data.pickupLocation.lng, '') else @activeTrip.getPickupLocation()
                if data.originatingPartnerName? then data.originatingPartnerName else @activeTrip.getOrigin()
                if data.servicingPartnerName? then data.servicingPartnerName else @activeTrip.getServicing()
                if data.status? then data.status else @activeTrip.getStatus()
                if data.eta? then data.eta else @activeTrip.getETA()
                if data.price? then data.price else @activeTrip.getFare()
                if data.driverName? then data.driverName else @activeTrip.getDriverName()
                if driverLocation? then driverLocation else @activeTrip.getDriverLocation()
                if data.dropoffLocation then new Location(data.dropoffLocation.lat, data.dropoffLocation.lng, '') else @activeTrip.getDropoffLocation()
                if driverInitialLocation? then driverInitialLocation else @activeTrip.getDriverInitialLocation()
            )
        for listener in @listeners
            if typeof listener.updateActiveTrip is 'function'
                try
                    listener.updateActiveTrip(@activeTrip)
                catch error
                    console.error listener.toString() + ' updateLogs failed: ' + error

        @updatingActiveTrip = false

    updateLogs: (data) =>
        if data?
            tripId = if @activeTrip? then @activeTrip.getId() else null
            for listener in @listeners
                if typeof listener.updateLog is 'function'
                    try
                        listener.updateLog(data.logList, tripId)
                    catch error
                        console.error listener + ' updateLogs failed: ' + error
            @updatingLogs = false

`
$(document).ready(function(){
    var url = window.location
    $('.list-group-item').filter( function(){
        return this.href == url;
    }).addClass('active');
    });
`

$('.developer.dashboard').ready ->
    dashboardManager = new DashboardManager(
        new TripThru('http://107.170.240.134/TripThru.TripThruGateway/', $('#access_token').val())
        'trip-status-selector'
        [
            new ActiveTripsChart('active-trips-chart')
            new TripList('trips-panel')
            new StatisticsDashboard('statistics-gauges-container')
            new TripTracker('tracking-trip-info', 'tracking-map-container')
            new ActivityLog('activity-log')
        ]
    )

    update = ->
        dashboardManager.update()

    update()
    setInterval ->
        update()
    , 10000

    return



