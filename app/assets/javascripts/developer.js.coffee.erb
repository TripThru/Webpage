# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

class TripThru
    this.baseUrl = ''
    this.access_token = ''

    constructor: (url, token) ->
        if not url? or not token?
            console.error('Wrong parameters')
        this.baseUrl = url
        this.access_token = token

    getStats: (_callback) ->
        $.get(this.baseUrl + 'stats?format=json&access_token=' + this.access_token, (data) ->
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getLog: (status, _callback) ->
        $.get(this.baseUrl + 'log?format=json&access_token=' + this.access_token, (data) ->
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getTrips: (status, _callback) ->
        $.get(this.baseUrl + 'trips?format=json&access_token=' + this.access_token, (data) ->
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getTripStatus: (tripId, _callback) ->
        $.get(this.baseUrl + 'tripstatus?format=json&access_token=' + this.access_token + '&tripid=' + tripId, (data) ->
            if data.result == 'OK'
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return


class ActiveTripsChart
  chart = null
  activeTripsCount = []

  constructor: (chartContainer) ->
    chart = new JustGage({
        id: chartContainer
        value: 0
        min: 0
        max: 10
        label: 'trips'
        relativeGaugeSize: true
    })

  updateStats: (stats) ->
      update(stats.activeTrips, stats.activeTrips)

  update = (activeTrips, selectedTypeActiveTrips) ->
      if not activeTrips? or not selectedTypeActiveTrips?
          console.error('Wrong parameters')
          return

      activeTripsCount.push activeTrips
      max = Math.max.apply(Math, activeTripsCount)
      max = if max < 10 then 10 else max * 1.4

      chart.refresh(selectedTypeActiveTrips, max)

class Location
    this.lat = null
    this.lng = null
    this.address = ''

    constructor: (latitude, longitude, _address) ->
        this.lat = latitude
        this.lng = longitude
        this.address = _address

    getAddress: () ->
        return this.address

class Trip

    constructor: (@id, @passengerName, @pickupTime, @pickupLocation, @origin, @servicing, @status, @ETA,
                    @fare, @driverName, @driverLocation, @dropoffLocation, @driverInitialLocation) ->
        @containerId = id.replace(new RegExp('@', 'g'), '-').replace('.', '-')

    update: (passenger, pickupTime, pickupLocation, origin, servicing, status, ETA, fare,
             driverName, driverLocation, dropoffLocation, driverInitialLocation) ->
        @passengerName = passenger
        @pickupTime = pickupTime
        @pickupLocation = pickupLocation
        @origin = origin
        @servicing = servicing
        @status = status
        @ETA = ETA
        @fare = fare
        @driverName = driverName
        @driverLocation = driverLocation
        @dropoffLocation = dropoffLocation
        @driverInitialLocation = driverInitialLocation

    getContainerId: () =>
        @containerId
    getId: () =>
        @id
    getPassengerName: () ->
        @passengerName
    getPickupTime: () ->
        @pickupTime
    getPickupLocation: () ->
        @pickupLocation
    getOrigin: () ->
        @origin
    getServicing: () ->
        @servicing
    getStatus: () ->
        @status
    getETA: () ->
        @ETA
    getFare: () ->
        @fare
    getDriverName: () ->
        @driverName
    getDriverLocation: () ->
        @driverLocation
    getDropoffLocation: () ->
        @dropoffLocation
    getDriverInitialLocation: () ->
        @driverInitialLocation


class TripList
    containerId = null

    constructor: (renderToContainerId) ->
        containerId = renderToContainerId

    updateTrips: (tripsById) ->
        for id, trip of tripsById
            if !$('#' + trip.getContainerId()).length
                addTrip(trip)

    updateActiveTrip: (trip) ->
        if not trip?
            $('#' + containerId + '>div.active').removeClass('active')
        else
            if not $('#' + trip.getContainerId()).hasClass('active')
                $('#' + containerId + '>div.active').removeClass('active')
                $("#" + trip.getContainerId()).addClass("active")

    addTrip = (trip) ->
        tripContainerId = trip.getContainerId()
        tripTag = getTripTag(trip)
        $('#' + containerId).prepend tripTag
        $('#' + tripContainerId).slideDown()

    getTripTag = (trip) ->
        '
            <div class="well trip" id="' + trip.getContainerId() + '" style="display:none;">
                <h1>' + trip.getId() + '</h1>
                <p><span>Passenger:</span> <i>' + trip.getPassengerName() + '</i></p>
                <p><span>Time:</span> <i>' + trip.getPickupTime().split('.')[0] + '</i></p>
                <p><span>Pickup:</span> <i>' + trip.getPickupLocation().getAddress() + '</i></p>
            </div>
        '

class TripTracker
    tripInfoContainerId = null
    mapContainerId = null


    constructor: (tripInfoContainer, mapContainer) ->
        tripInfoContainerId = tripInfoContainer
        mapContainerId = mapContainer

    updateActiveTrip: (trip) ->
        if trip?
            updateTripInfo(trip)
            updateMap(trip)

    updateTripInfo = (trip) ->
        $('#' + tripInfoContainerId).hide().html(
            '<div>
                <h1>' + trip.getId() + '</h1>
                <p><span>Passenger:</span>' + trip.getPassengerName() + '</p>
                <p><span>Time: </span>' + trip.getPickupTime() + '</p>
            </div>
            '
        ).fadeIn()

    passengerMarker = null
    destinationMarker = null
    driverMarker = null
    initialMarker = null
    map = null
    mapOptions = null
    directionsDisplay = null
    directionsDisplay2 = null
    driverPreviousLocation = null
    setTripInfoBool = false

    updateMap = (trip) ->
        return  if setTripInfoBool is true
        setTripInfoBool = true
        if not driverPreviousLocation? or trip.driverLocation.lat isnt driverPreviousLocation.lat or trip.driverLocation.lng isnt driverPreviousLocation.lng
            driverPreviousLocation = trip.driverLocation
            pickupLocation = trip.pickupLocation
            driverLocation = trip.driverLocation
            dropoffLocation = trip.dropoffLocation
            driverInitialLocation = trip.driverInitialLocation
            if pickupLocation or driverLocation
                passengerLocation = null
                driverCurrentLocation = null
                destinationLocation = null
                initialLocation = null
                if dropoffLocation
                    destinationLocation = new google.maps.LatLng(dropoffLocation.lat, dropoffLocation.lng)
                    if destinationMarker?
                        destinationMarker.setMap map
                        destinationMarker.setPosition destinationLocation
                if pickupLocation
                    passengerLocation = new google.maps.LatLng(pickupLocation.lat, pickupLocation.lng)
                    if passengerMarker?
                        passengerMarker.setMap map
                        passengerMarker.setPosition passengerLocation
                if driverLocation
                    driverCurrentLocation = new google.maps.LatLng(driverLocation.lat, driverLocation.lng)
                    if driverMarker?
                        driverMarker.setMap map
                        driverMarker.setPosition driverCurrentLocation
                if driverInitialLocation
                    initialLocation = new google.maps.LatLng(driverInitialLocation.lat, driverInitialLocation.lng)
                    if initialMarker?
                        initialMarker.setMap map
                        initialMarker.setPosition driverInitialLocation
                unless map?
                    mapOptions =
                        center: (if driverCurrentLocation? then driverCurrentLocation else passengerLocation)
                        zoom: 15
                        mapTypeControl: false
                        mapTypeId: google.maps.MapTypeId.ROADMAP

                    map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions)
                if passengerLocation? and not passengerMarker?
                    passengerMarker = new google.maps.Marker(
                        position: passengerLocation
                        map: map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=home|FFFF00"
                        title: "Pickup"
                    )
                if initialLocation? and not initialMarker?
                    initialMarker = new google.maps.Marker(
                        position: driverInitialLocation
                        map: map
                        icon: "http://www.mricons.com/store/png/113267_25418_16_flag_icon.png"
                        title: "Initial"
                    )
                if driverLocation? and not driverMarker?
                    driverMarker = new google.maps.Marker(
                        position: driverCurrentLocation
                        map: map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=taxi|FFFF00"
                        title: "Driver"
                    )
                if destinationLocation? and not destinationMarker?
                    destinationMarker = new google.maps.Marker(
                        position: dropoffLocation
                        map: map
                        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=cafe|FFFF00"
                        title: "Destination"
                    )
                if driverLocation? and pickupLocation? and dropoffLocation?
                    routes = []
                    switch trip.status
                        when "Enroute"
                            routes = [
                                origin: initialLocation
                                destination: driverCurrentLocation
                            ]
                        when "PickedUp"
                            routes = [
                                origin: initialLocation
                                destination: passengerLocation
                            ,
                                origin: passengerLocation
                                destination: driverCurrentLocation
                            ]
                        when "Complete"
                            routes = [
                                origin: initialLocation
                                destination: passengerLocation
                            ,
                                origin: passengerLocation
                                destination: destinationLocation
                            ]
                    rendererOptions =
                        preserveViewport: true
                        suppressMarkers: true
                        polylineOptions:
                            strokeColor: "#8B0000"
                            strokeOpacity: 0.8
                            strokeWeight: 5

                    rendererOptions2 =
                        preserveViewport: true
                        suppressMarkers: true
                        polylineOptions:
                            strokeColor: "#008000"
                            strokeOpacity: 0.8
                            strokeWeight: 5

                    directionsService = new google.maps.DirectionsService()
                    directionsService2 = new google.maps.DirectionsService()
                    boleanFirst = true
                    if directionsDisplay?
                        directionsDisplay.setMap null
                        directionsDisplay = null
                    if directionsDisplay2?
                        directionsDisplay2.setMap null
                        directionsDisplay2 = null
                    routes.forEach (route) ->
                        request =
                            origin: route.origin
                            destination: route.destination
                            travelMode: google.maps.TravelMode.DRIVING

                        if boleanFirst
                            directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions)
                            directionsDisplay.setMap map
                        else
                            directionsDisplay2 = new google.maps.DirectionsRenderer(rendererOptions2)
                            directionsDisplay2.setMap map
                        if boleanFirst
                            directionsService.route request, (result, status) ->
                                directionsDisplay.setDirections result  if status is google.maps.DirectionsStatus.OK and directionsDisplay?

                            boleanFirst = false
                        else
                            directionsService2.route request, (result, status) ->
                                directionsDisplay2.setDirections result  if status is google.maps.DirectionsStatus.OK and directionsDisplay2?
                    map.setCenter (if driverCurrentLocation? then driverCurrentLocation else passengerLocation)
        setTripInfoBool = false

class StatisticsDashboard
    containerId = null
    passengerRatingGauge = null
    driverRatingGauge = null
    timeWithPassengerGauge = null
    mileageWithPassengerGauge = null
    timeEnrouteGauge = null
    mileageEnrouteGauge = null
    timeIdleGauge = null
    totalTripsGauge = null
    completedGauge = null
    cancelledGauge = null
    rejectedGauge = null
    latenessGauge = null
    withinServiceGoalGauge = null

    constructor: (containerId) ->
        $('#' + containerId).html('
            <div class="dashboard-statistics-gauge" id="passenger-rating-gauge"></div>
            <div class="dashboard-statistics-gauge" id="drivers-rating-gauge"></div>
            <div class="dashboard-statistics-gauge" id="time-with-passenger-gauge"></div>
            <div class="dashboard-statistics-gauge" id="mileage-with-passenger-gauge"></div>
            <div class="dashboard-statistics-gauge" id="time-enroute-gauge"></div>
            <div class="dashboard-statistics-gauge" id="mileage-enroute-gauge"></div>
            <div class="dashboard-statistics-gauge" id="time-idle-gauge"></div>
            <div class="dashboard-statistics-gauge" id="total-trips-gauge"></div>
            <div class="dashboard-statistics-gauge" id="cancelled-gauge"></div>
            <div class="dashboard-statistics-gauge" id="completed-gauge"></div>
            <div class="dashboard-statistics-gauge" id="rejected-gauge"></div>
            <div class="dashboard-statistics-gauge" id="lateness-gauge"></div>
            <div class="dashboard-statistics-gauge" id="within-service-goal-gauge"></div>
        ')
        passengerRatingGauge = new JustGage({
            id: 'passenger-rating-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Passenger'
        })
        driverRatingGauge = new JustGage({
            id: 'drivers-rating-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Driver'
        })
        timeWithPassengerGauge = new JustGage({
            id: 'time-with-passenger-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Time passenger'
        })
        mileageWithPassengerGauge = new JustGage({
            id: 'mileage-with-passenger-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Mileage passenger'
        })
        timeEnrouteGauge = new JustGage({
            id: 'time-enroute-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Time enroute'
        })
        mileageEnrouteGauge = new JustGage({
            id: 'mileage-enroute-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Mileage enroute'
        })
        timeIdleGauge = new JustGage({
            id: 'time-idle-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Time idle'
        })
        totalTripsGauge = new JustGage({
            id: 'total-trips-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Time passenger'
        })
        cancelledGauge = new JustGage({
            id: 'cancelled-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Cancelled'
        })
        completedGauge = new JustGage({
            id: 'completed-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Completed'
        })
        rejectedGauge = new JustGage({
            id: 'rejected-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Rejected'
        })
        latenessGauge = new JustGage({
            id: 'lateness-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Lateness'
        })
        withinServiceGoalGauge = new JustGage({
            id: 'within-service-goal-gauge'
            value: 0
            min: 0
            max: 100
            label: '%'
            title: 'Within goal'
        })

    updateStats: (stats) ->
        update(80, 90, 55, 32, 70, 80, 15, 80, 10, 80, 10, 15, 95)

    update = (passengerRating, driverRating, timeWithPassenger, mileageWithPassenger, timeEnroute, mileageEnroute,
                timeIdle, totalTrips, cancelled, completed, rejected, lateness, withinServiceGoal) ->

        passengerRatingGauge.refresh(passengerRating)
        driverRatingGauge.refresh(driverRating)
        timeWithPassengerGauge.refresh(timeWithPassenger)
        mileageWithPassengerGauge.refresh(mileageWithPassenger)
        timeEnrouteGauge.refresh(timeEnroute)
        mileageEnrouteGauge.refresh(mileageEnroute)
        timeIdleGauge.refresh(timeIdle)
        totalTripsGauge.refresh(totalTrips)
        cancelledGauge.refresh(cancelled)
        completedGauge.refresh(completed)
        rejectedGauge.refresh(rejected)
        latenessGauge.refresh(lateness)
        withinServiceGoalGauge.refresh(withinServiceGoal)


class DashboardManager

    constructor: (@gateway, @listeners) ->
        @tripsById = {}
        @activeTrip = null

    update: =>
        @gateway.getStats(@updateStats)
        @gateway.getTrips(null, @updateTrips)

        if @activeTrip?
            @gateway.getTripStatus(@activeTrip.id, @updateActiveTrip)
        else
            @updateActiveTrip(null)

        @updateLogs()

    updateStats: (data) =>
        if data?
            for listener in @listeners
                if typeof listener.updateStats is 'function'
                    listener.updateStats(data)

    updateTrips: (data) =>
        if data?
            for newTrip in data.trips
                @processTrip(newTrip)

            for listener in @listeners
                if typeof listener.updateTrips is 'function'
                    listener.updateTrips(@tripsById)

    processTrip: (newTrip) =>
        newTrips = []
        if newTrip.id not of @tripsById
            driverLocation =
                if newTrip.driverLocation? then new Location(newTrip.driverLocation.lat, newTrip.driverLocation.lng, '') else null
            driverInitialLocation =
                if newTrip.driverInitialLocation? then new Location(newTrip.driverInitialLocation.lat, newTrip.driverInitalLocation.lng, '') else null
            trip = new Trip(
                    newTrip.id
                    newTrip.passengerName
                    newTrip.pickupTime
                    new Location(newTrip.pickupLocation.lat, newTrip.pickupLocation.lng, '')
                    newTrip.originatingPartnerName
                    newTrip.servicingPartnerName
                    newTrip.status
                    newTrip.eta
                    newTrip.price
                    newTrip.driverName
                    driverLocation
                    new Location(newTrip.dropoffLocation.lat, newTrip.dropoffLocation.lng, '')
                    driverInitialLocation
            )
            @tripsById[trip.getId()] = trip
            newTrips.push trip
            $(document).off('click', '#' + trip.getContainerId()).on 'click', '#' + trip.getContainerId(),  =>
                @toggleActiveTrip(trip.getId())

    toggleActiveTrip: (tripId) =>
        trip = @tripsById[tripId]
        if not @activeTrip? or @activeTrip.id != trip.id
            @activeTrip = trip
        else
            @activeTrip = null
        @updateActiveTrip(@activeTrip)

    updateActiveTrip: (data) =>
        if data?
            driverLocation =
                if data.driverLocation? then new Location(data.driverLocation.lat, data.driverLocation.lng, '') else null
            driverInitialLocation =
                if data.driverInitialLocation? then new Location(data.driverInitialLocation.lat, data.driverInitialLocation.lng, '') else null
            @activeTrip.update(
                data.passengerName
                data.pickupTime
                new Location(data.pickupLocation.lat, data.pickupLocation.lng, '')
                data.originatingPartnerName
                data.servicingPartnerName
                data.status
                data.eta
                data.price
                data.driverName
                driverLocation
                new Location(data.dropoffLocation.lat, data.dropoffLocation.lng, '')
                driverInitialLocation
            )
        for listener in @listeners
            if typeof listener.updateActiveTrip is 'function'
                listener.updateActiveTrip(@activeTrip)

    updateLogs: ->


`
$(document).ready(function(){
    var url = window.location
    $('.list-group-item').filter( function(){
        return this.href == url;
    }).addClass('active');
    });
`

$('.developer.dashboard').ready ->
    dashboardManager = new DashboardManager(
        new TripThru('http://192.168.0.135/TripThru.TripThruGateway/', $('#access_token').val())
        [
            new ActiveTripsChart('active-trips-chart')
            new TripList('trips-panel')
            new StatisticsDashboard('statistics-gauges-container')
            new TripTracker('tracking-trip-info', 'tracking-map-container')
        ]
    )

    update = ->
        dashboardManager.update()

    update()
    setInterval ->
        update()
    , 10000

    return



