# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

window.tripthruinterval = null

class window.TripThru

    constructor: (@accessToken) ->
        @baseUrl = 'http://107.170.220.160/'
        if not @accessToken?
            console.error('Wrong parameters')

    getBaseUrl: () =>
        @baseUrl

    getStats: (_callback) =>
        $.get(@baseUrl + 'stats', (data) =>
            if data.result == 100
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getLog: (tripId, _callback) =>
        id = if tripId? then tripId else 'all'
        $.get(@baseUrl + 'log/' + id, (data) =>
            if data.result == 100
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getTrips: (status, _callback) =>
        status = if status? then status else 'all'
        $.get(@baseUrl + 'trips/' + status, (data) =>
            if data.result == 100
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getTripStatus: (tripId, _callback) =>
        $.get(@baseUrl + 'tripstatus/' + tripId, (data) =>
            if data.result == 100
                $.get(@baseUrl + 'triproute/' + tripId, (trip) =>
                    data.historyEnrouteList = trip.historyEnrouteList
                    data.historyPickUpList = trip.historyPickUpList
                    _callback(data)
                ).error( ->
                    _callback(null)
                )
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

    getPartners: (_callback) =>
        $.get(@baseUrl + 'networks', (data) =>
            if data.result == 100
                _callback(data)
            else
                _callback(null)

        ).error( ->
            _callback(null)
        )
        return

class window.Location
    addressById = {}

    constructor: (@lat, @lng, @address, @loadAddress = true) ->
        @id = '<' + @lat + ',' + @lng + '>'
        @gettingAddress = false
        if loadAddress
            if @id of addressById
                @address = addressById[@id]
            else
                @setAddress()

    getAddress: () =>
        if @id of addressById
            addressById[@id]
        else
            @setAddress()
            null

    setAddress: () =>
        if not @gettingAddress
            @gettingAddress = true
            $.ajax
                url: "http://maps.googleapis.com/maps/api/geocode/json?latlng=" + @lat + "," + @lng + "&sensor=false"
                dataType: 'json'
                success: (data) =>
                    if data.results? and data.results.length > 0
                        if @id not of addressById
                            addressById[@id] = data.results[0].formatted_address
                    else
                        setTimeout(() =>
                            @setAddress()
                        ,1000)
                    @gettingAddress = false
                error: () =>
                    @gettingAddress = false


class window.Trip

    constructor: (@id, @passengerName, @pickupTime, @pickupLocation, @origin, @servicing, @status, @ETA,
                  @fare, @driverName, @driverLocation, @dropoffLocation, @driverInitialLocation, @latenessMilliseconds) ->
        @containerId = id.replace(new RegExp('@', 'g'), '-').replace('.', '-')
        @passengerRating = (Math.random() * 2.5) + 2.5
        @driverRating = (Math.random() * 2.5) + 2.5

    update: (@status, @servicing, @driverName, @driverLocation, @driverInitialLocation, @historyEnrouteList, @historyPickUpList) =>

    getContainerId: () =>
        @containerId
    getId: () =>
        @id
    getPassengerName: () =>
        @passengerName
    getPassengerRating: () =>
        @passengerRating
    getPickupTime: () =>
        @pickupTime
    getPickupLocation: () =>
        @pickupLocation
    getOrigin: () =>
        @origin
    getServicing: () =>
        @servicing
    getStatus: () =>
        @status
    getETA: () =>
        @ETA
    getFare: () =>
        @fare
    getDriverName: () =>
        @driverName
    getDriverLocation: () =>
        @driverLocation
    getDriverRating: () =>
        @driverRating
    getDropoffLocation: () =>
        @dropoffLocation
    getDriverInitialLocation: () =>
        @driverInitialLocation
    getHistoryEnrouteList: () =>
        @historyEnrouteList
    getHistoryPickUpList: () =>
        @historyPickUpList
    getLatenessMilliseconds: () =>
        @latenessMilliseconds

