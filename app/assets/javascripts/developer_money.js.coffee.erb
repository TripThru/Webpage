########## DASHBOARD #########

class TripList

  constructor: (@containerId) ->
    @tripsInListById = {}
    @currentNetwork = null
    @statusChanged = false
    $('#trips').scroll @loadAddressIfVisible
    $('#main').scroll @loadAddressIfVisible
    @loadingAddresses = false
    @filterText = null

  loadAddressIfVisible: () =>
    if !@loadingAddresses
      @loadingAddresses = true
      for id, trip of @tripsInListById
        if $('#' + trip.getContainerId())? and $('#' + trip.getContainerId()).visible() and $('#' + trip.getContainerId()).find('.triplist-trip-pickup').html() == 'loading...'
          @setAddress(trip)
      @loadingAddresses = false

  setAddress: (trip) =>
    if !trip.loadingAddress
      trip.getDropoffLocation().getAddress()
      address = trip.getPickupLocation().getAddress()
      address = if address? then address else 'loading...'
      $('#' + trip.getContainerId()).find('.triplist-trip-pickup').fadeOut().html(address).fadeIn()
      if address == 'loading...'
        setTimeout(() =>
          @setAddress(trip)
        , 500);
      else
        trip.loadingAddress = true

  tripChanged: (trip) =>
    if not trip?
      $('#' + @containerId + '>div.active').removeClass('active')
    else
      if not $('#' + trip.getContainerId()).hasClass('active')
        $('#' + @containerId + '>div.active').removeClass('active')
        $("#" + trip.getContainerId()).addClass("active")

  updateNetwork: (network) =>
    if @currentNetwork != network
      @statusChanged = true
      if $('#triplist-loading').length <= 0
        $('#' + @containerId).html('<span id="triplist-loading"><%= image_tag('loading.gif') %></span>')
    @currentNetwork = network

  updateTrips: (tripsById) =>
    if @statusChanged
      @statusChanged = false
      $('#' + @containerId).html('')
      for id, trip of tripsById
        @addTrip(trip)
    else
      for id, trip of tripsById
        if id not of @tripsInListById
          @addTrip(trip)
      for id, trip of @tripsInListById
        if id not of tripsById
          @removeTrip(trip)
        else
          @updateTrip(trip)
    @filterTrips()

  filterTrips: () =>
    if @filterText?
      for id, trip of @tripsInListById
        if  (trip.getId()? and trip.getId().toLowerCase().indexOf(@filterText) >= 0) or
            (trip.getCustomerName()? and trip.getCustomerName().toLowerCase().indexOf(@filterText) >= 0) or
            (trip.getDriverName()? and trip.getDriverName().toLowerCase().indexOf(@filterText)) >= 0
          $('#' + trip.getContainerId()).show()
        else
          $('#' + trip.getContainerId()).hide()
    else
      for id, trip of @tripsInListById
        $('#' + trip.getContainerId()).show()

  updateTrip: (trip) =>

  addTrip: (trip) =>
    @tripsInListById[trip.getId()] = trip
    if trip.id.indexOf('web') > -1
      $('#' + @containerId).prepend @getTripTag(trip)
    else
      $('#' + @containerId).append @getTripTag(trip)
    if $('#' + trip.getContainerId()).visible()
      @setAddress(trip)

  removeTrip: (trip) =>
    delete @tripsInListById[trip.getId()]
    $('#' + trip.getContainerId()).remove()

  getTripTag: (trip) =>
    farmedInLogoId = trip.getOrigin()
    if $('#user_role').val() == 'network' and trip.getServicing()?
      farmedInLogoId = if $('#user_client_id').val() == trip.getOrigin() then trip.getServicing() else trip.getOrigin()
    farmedInLogo = '<img alt="' + farmedInLogoId + '" src="/assets/networks/' + farmedInLogoId + '.png"/>'
    '
                <div class="well trip" id="' + trip.getContainerId() + '">
                    <div>' + farmedInLogo + '<h1>' + trip.getId() + '</h1></div>
                    <p><span>Customer:</span> <i>' + trip.getCustomerName() + '</i></p>
                    <p><span>Time:</span> <i>' + trip.getPickupTime().split('.')[0] + '</i></p>
                    <p><span>Pickup:</span> <i class="triplist-trip-pickup">loading...</i></p>
                </div>
            '

  textFilter: (text) =>
    if !text? or text == ''
      @filterText = null
    else
      @filterText = text.toLowerCase()
    @filterTrips()

class TripTracker

  setZoomEvent: () =>
    google.maps.event.addListener @map, 'zoom_changed', () =>
      zoom = @map.getZoom()
      if zoom != @defaultCleanMapZoom and zoom != @defaultTrackingZoom
        @userChangedZoom = true

  constructor: (@tripInfoContainerId, @mapContainer) ->
    @tripChange = false
    @userChangedZoom = false
    @defaultCleanMapZoom = 4
    @defaultTrackingZoom = 15
    @mapOptions =
      center: if typeof google isnt "undefined" then new google.maps.LatLng(40.32004,-98.9290212) else null
      zoom: @defaultCleanMapZoom
      mapTypeControl: false
      mapTypeId: google.maps.MapTypeId.ROADMAP

    rendererOptions =
      preserveViewport: true
      suppressMarkers: true
      polylineOptions:
        strokeColor: "#8B0000"
        strokeOpacity: 1
        strokeWeight: 5
    rendererOptions2 =
      preserveViewport: true
      suppressMarkers: true
      polylineOptions:
        strokeColor: "#008000"
        strokeOpacity: 1
        strokeWeight: 5

    @directionsDisplay = if typeof google isnt "undefined" then new google.maps.DirectionsRenderer(rendererOptions) else null
    @directionsDisplay2 = if typeof google isnt "undefined" then new google.maps.DirectionsRenderer(rendererOptions2) else null
    @directionsService = if typeof google isnt "undefined" then new google.maps.DirectionsService() else null
    @driverPreviousLocation = null
    @setTripInfoBool = false
    @tripId = null
    @trip = null
    @customerRatingChartId = 'customer-rating'
    @driverRatingChartId = 'driver-rating'
    @latestAddedLogDate = null
    @tcurrentTripIdripId = null

  render: () =>
    if !map?
      @map = if typeof google isnt "undefined" then new google.maps.Map(document.getElementById("map-canvas"), @mapOptions) else null
      @setZoomEvent()

  cleanMap: () =>
    @customerMarker.setMap null  if @customerMarker?
    @driverMarker.setMap null  if @driverMarker?
    @destinationMarker.setMap null  if @destinationMarker?
    @initialMarker.setMap null  if @initialMarker?
    @directionsDisplay.setMap null if @directionsDisplay?
    @directionsDisplay2.setMap null if @directionsDisplay2?
    @map.panTo(new google.maps.LatLng(40.32004,-98.9290212))
    @map.setZoom @defaultCleanMapZoom

  tripChanged: (trip) =>
    @tripChange = true
    @userChangedZoom = false
    @tripId = null
    @driverPreviousLocation = null
    @updateTripInfo(trip)

  updateActiveTrip: (trip) =>
    @updateTripInfo(trip)
    if typeof @directionsDisplay isnt "undefined" and typeof @directionsDisplay2 isnt "undefined" and typeof @directionsService isnt "undefined"
      @updateMap(trip)
    if trip?
      @tripId = trip.getId()
      @trip = trip
    @tripChange = false

  updateTripInfo: (trip) =>
    if trip?
      tripPickupLocation = trip.getPickupLocation().getAddress()
      tripDropoffLocation = trip.getDropoffLocation().getAddress()
      tripDriverName = trip.getDriverName()
      tripDriverLocation = if trip.getDriverLocation()? then trip.getDriverLocation().getAddress() else null
      if !tripDriverLocation? and @driverPreviousLocation?
        tripDriverLocation = @driverPreviousLocation.getAddress()

      pickupLocation = if tripPickupLocation? then tripPickupLocation else 'loading...'
      dropoffLocation = if tripDropoffLocation? then tripDropoffLocation else 'loading...'
      driverLocation = if tripDriverLocation? then ' @ ' + tripDriverLocation else 'None'
      servicing = if trip.getServicing()? then trip.getServicing() else ''
      fare = if trip.getFare()? then (Math.round(trip.getFare() * 100) / 100) else 0.0
      if $('#trip-id-tag').html() != trip.getId()
        $('#' + @tripInfoContainerId).html(
            '<div>
                <div><span>Id: </span><p id="trip-id-tag">' + trip.getId() + '</p></div>
                <div><span>Fare: </span><p id="trip-id-tag">$' + fare + '</p></div>
                <div><span>Status: </span><p id="status-tag">' + trip.getStatus() + '</p></div>
                <div><span>Customer: </span><p>' + trip.getCustomerName() + '  </p>
                   <div class="rating-container">
                        <div class="flexible-stars" data-isLocked="yes"
                                data-init="0" id="' + @customerRatingChartId + '"></div>
                   </div>
                </div>
                <div><span>Time: </span><p>' + trip.getPickupTime().split('.')[0] + '</p></div>
                <div><span>Pickup: </span><p id="pickup-tag">' + pickupLocation + '</p></div>
                <div><span>Dropoff: </span><p id="dropoff-tag">' + dropoffLocation + '</p></div>
                <div>
                  <span>Farmed-Out: </span><p>' + trip.getOrigin() + ' - </p>
                  <span>Farmed-In: </span><p id="farmed-out-tag">' + servicing + '</p>
                </div>
                <div><span>Driver: </span><p id="driver-tag">' + tripDriverName + '  </p>
                    <div class="rating-container">
                      <div class="flexible-stars" data-isLocked="yes"
                                 data-init="0" id="' + @driverRatingChartId + '"></div>
                    </div>
                </div>
             </div>
            '
        )

        $('#' + @customerRatingChartId).html('')
        $('#' + @customerRatingChartId).flexibleStars({
          init: trip.getCustomerRating()
        })

        if trip.getDriverName()?
          $('#' + @driverRatingChartId).html('')
          $('#' + @driverRatingChartId).flexibleStars({
            init: trip.getDriverRating()
          })

    else
      $('#' + @tripInfoContainerId).html('<h1>Select a trip</h1>')

  updateMap: (trip) =>
    return if !trip?
    if @directionsDisplay?
      @directionsDisplay.setMap null
    if @directionsDisplay2?
      @directionsDisplay2.setMap null
    pickupLocation = trip.pickupLocation
    dropoffLocation = trip.dropoffLocation
    driverInitialLocation = trip.driverInitialLocation
    if pickupLocation and dropoffLocation and driverInitialLocation
      customerLocation = null
      customerMarker = null
      destinationLocation = null
      destinationMarker = null
      initialLocation = null
      initalMarker = null
      initialLocation = new google.maps.LatLng(driverInitialLocation.lat, driverInitialLocation.lng)
      initialMarker = new google.maps.Marker(
        position: driverInitialLocation
        map: @map
        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=taxi|FFFF00"
        title: "Initial"
      )
      customerLocation = new google.maps.LatLng(pickupLocation.lat, pickupLocation.lng)
      customerMarker = new google.maps.Marker(
        position: customerLocation
        map: @map
        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=home|FFFF00"
        title: "Pickup"
      )
      destinationLocation = new google.maps.LatLng(dropoffLocation.lat, dropoffLocation.lng)
      destinationMarker = new google.maps.Marker(
        position: dropoffLocation
        map: @map
        icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=cafe|FFFF00"
        title: "Destination"
      )
      unless @map?
        @mapOptions =
          center: (customerLocation)
          zoom: @defaultTrackingZoom
          mapTypeControl: false
          mapTypeId: google.maps.MapTypeId.ROADMAP
        @map = new google.maps.Map(document.getElementById("map-canvas"), @mapOptions)
        @setZoomEvent()
      if driverInitialLocation? and pickupLocation? and dropoffLocation?
        requestRoute =
          origin: initialLocation
          destination: customerLocation
          travelMode: google.maps.TravelMode.DRIVING
        @directionsDisplay.setMap @map
        @directionsService.route requestRoute, (result, status) =>
          @directionsDisplay.setDirections result if status is google.maps.DirectionsStatus.OK and @directionsDisplay?

        requestRoute =
          origin: customerLocation
          destination: destinationLocation
          travelMode: google.maps.TravelMode.DRIVING
        @directionsDisplay2.setMap @map
        @directionsService.route requestRoute, (result, status) =>
          @directionsDisplay2.setDirections result if status is google.maps.DirectionsStatus.OK and @directionsDisplay2?

        @map.setCenter (customerLocation)
        @map.setZoom @defaultTrackingZoom
    @setTripInfoBool = false

class Counter
  sequence = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0].join('\n')
  currency = ['$', '$', '$', '$', '$', '$', '$', '$', '$', '$'].join('\n')
  constructor: (@el, @isCurrency)->
    @el.addClass('counter')
    digitIndex = 0
    if @isCurrency
      @template = """
                      <div class='digit'>
                        <div class='sequence'>#{currency}</div>
                      </div>
                  """ + @template
      digitIndex++
    @el.html(@template)
    @hundredThousandsPlaceSequence = @el.find('.sequence').eq(digitIndex++)
    @tenThousandsPlaceSequence = @el.find('.sequence').eq(digitIndex++)
    @thousandsPlaceSequence = @el.find('.sequence').eq(digitIndex++)
    @hundredsPlaceSequence = @el.find('.sequence').eq(digitIndex++)
    @tensPlaceSequence = @el.find('.sequence').eq(digitIndex++)
    @onesPlaceSequence = @el.find('.sequence').eq(digitIndex++)

  template: """

    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
  """

  countUpTo: (number)->

    n = '' + number
    n = n.split("").reverse().join("")
    hundredThousandsPlace = n.substr(5, 1)
    tenThousandsPlace = n.substr(4, 1)
    thousandsPlace = n.substr(3, 1)
    hundredsPlace = n.substr(2, 1)
    tensPlace = n.substr(1, 1)
    onesPlace = n.substr(0, 1)

    digits = n.length

    @onesPlaceSequence.css
      '-moz-transform': "translate3d(0, #{- (9 - onesPlace) * 10}%, 0)",
      '-webkit-transform': "translate3d(0, #{- (9 - onesPlace) * 10}%, 0)",
      '-ms-transform': "translate3d(0, #{- (9 - onesPlace) * 10}%, 0)"

    if digits > 1
      @tensPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @tensPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - tensPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - tensPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - tensPlace) * 10}%, 0)"
      ,0
    else
      @tensPlaceSequence.addClass('is-hidden')

    if digits > 2
      @hundredsPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @hundredsPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - hundredsPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - hundredsPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - hundredsPlace) * 10}%, 0)"
      ,0
    else
      @hundredsPlaceSequence.addClass('is-hidden')

    if digits > 3
      @thousandsPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @thousandsPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - thousandsPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - thousandsPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - thousandsPlace) * 10}%, 0)"
      ,0
    else
      @thousandsPlaceSequence.addClass('is-hidden')

    if digits > 4
      @tenThousandsPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @tenThousandsPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - tenThousandsPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - tenThousandsPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - tenThousandsPlace) * 10}%, 0)"
      ,0
    else
      @tenThousandsPlaceSequence.addClass('is-hidden')

    if digits > 5
      @hundredThousandsPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @hundredThousandsPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - hundredThousandsPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - hundredThousandsPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - hundredThousandsPlace) * 10}%, 0)"
      ,0
    else
      @hundredThousandsPlaceSequence.addClass('is-hidden')

class StatisticsDashboard

  constructor: (@statisticsContainerId) ->
    @totalInvoiceCounter = 'statistics-total-invoice-counter'
    @totalTripsCounter = 'statistics-total-trips-counter'
    @averageFarmedPieChartId = 'statistics-average-farmed-pie-chart'
    @servicePieChartId = 'statistics-service-pie-chart'
    @durationPieChartId = 'statistics-duration-pie-chart'
    @mileagePieChartId = 'statistics-mileage-service-pie-chart'
    @lastValues = {
      totalInvoiceCounter: -1,
      totalTrips: -1,
      averageFarmed: [],
      serviceLevels: [-1, -1, -1, -1, -1],
      durations: [],
      distances: []
    }

    $('#' + @statisticsContainerId).html('
                            <!--<div class="dashboard-statistics-separator">Total</div>-->

                            <div class="panel panel-default" id="top">
                              <div class="panel-body">
                                <div class="dashboard-statistics-counter-container">
                                  <div class="dashboard-statistics-counter">
                                      <div class="title">Total trips</div>
                                      <div id="' + @totalTripsCounter + '"></div>
                                  </div>
                                  <div class="dashboard-statistics-counter">
                                      <div class="title">Total fare</div>
                                      <div id="' + @totalInvoiceCounter + '"></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <!--<div class="dashboard-statistics-separator">Last 5 minutes</div>-->
                            <div class="panel panel-default" id="bottom">
                              <div class="panel-body">
                                <div class="dashboard-statistics-subpanel">
                                  <div  class="dashboard-statistics-pie-chart" >
                                      <div class="title">Average fare</div>
                                      <div class="pie-chart" id="' + @averageFarmedPieChartId + '"></div>
                                  </div>
                                  <div  class="dashboard-statistics-pie-chart" >
                                      <div class="title">Service level</div>
                                      <div class="pie-chart" id="' + @servicePieChartId + '"></div>
                                  </div>
                                  <div  class="dashboard-statistics-pie-chart" >
                                      <div class="title">Duration</div>
                                      <div class="pie-chart" id="' + @durationPieChartId + '"></div>
                                  </div>
                                  <div  class="dashboard-statistics-pie-chart" >
                                      <div class="title">Mileage</div>
                                      <div class="pie-chart" id="' + @mileagePieChartId + '"></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                        ')

    @invoiceCounter = new Counter($('#' + @totalInvoiceCounter), true)
    @tripsCounter = new Counter($('#' + @totalTripsCounter), false)
    @averageFarmedChart = Morris.Donut({
      element: @averageFarmedPieChartId,
      data: [
        {label: "< 3", value: 0}
        {label: "< 5", value: 0}
        {label: "< 10", value: 0}
        {label: "< 15", value: 0}
        {label: "> 15", value: 0}
      ]
      colors: ['#008000', '#486e52', '#58578b', '#503cc4', '#0000ff']
      resize: true
    })
    @serviceLevelsChart = Morris.Donut({
      element: @servicePieChartId,
      data: [
        {label: "< 3 min.", value: 0}
        {label: "< 5 min.", value: 0}
        {label: "< 10 min.", value: 0}
        {label: "< 15 min.", value: 0}
        {label: "> 15 min.", value: 0}
      ]
      colors: ['#008000', '#6a7900', '#a46a00', '#d05300', '#ff0000']
      resize: true
    })
    @durationChart = Morris.Donut({
      element: @durationPieChartId,
      data: [
        {label: "< 3 min.", value: 0}
        {label: "< 5 min.", value: 0}
        {label: "< 10 min.", value: 0}
        {label: "< 15 min.", value: 0}
        {label: "> 15 min.", value: 0}
      ]
      colors: ['#00008b', '#380089', '#530086', '#6b0083', '#800080']
      resize: true
    })
    @mileageChart = Morris.Donut({
      element: @mileagePieChartId,
      data: [
        {label: "< 0.2 mi", value: 0}
        {label: "< 0.4 mi", value: 0}
        {label: "< 0.6 mi.", value: 0}
        {label: "< 1 mi.", value: 0}
        {label: "> 1 mi.", value: 0}
      ]
      colors: ['#00008b', '#380089', '#530086', '#6b0083', '#800080']
      resize: true
    })
    @updateInvoiceCounter(0)
    @updateTripsCounter(0)

  updateInvoiceStats: (stats) =>
    if stats?
      serviceLevels = [0, 0, 0, 0, 0]
      fares = []
      durations = []
      distances = []
      totalTrips = stats.length
      totalFare = 0
      for stat in stats
        serviceLevels[stat.service_level]++
        durations.push stat.duration_seconds/60
        fares.push stat.amount
        totalFare += stat.amount
        distances.push stat.distance
      fares = getFrequencyDistribution(fares, 5, '$', true)
      durations = getFrequencyDistribution(durations, 5, 'min.', false)
      distances = getFrequencyDistribution(distances, 5, 'mi.', false)

      @updateInvoiceCounter(totalFare)
      @updateTripsCounter(totalTrips)
      @updateAverageFarmed(fares)
      @updateServiceLevels(serviceLevels)
      @updateDurations(durations)
      @updateDistances(distances)

  updateInvoiceCounter: (total) =>
    total = Math.ceil(total)
    if @lastValues.totalInvoiceCounter != total
      @lastValues.totalInvoiceCounter = total
      @invoiceCounter.countUpTo(total)

  updateTripsCounter: (total) =>
    total = Math.ceil(total)
    if @lastValues.totalTripsCounter != total
      @lastValues.totalTripsCounter = total
      @tripsCounter.countUpTo(total)

  updateTotalFarmed: (total, stats) =>
    if @lastValues.totalFarmed == total
      return
    @lastValues.totalFarmed = total
    @totalFarmedChart.setData([
      {label: "Farmed out", value: stats.farmed_out_total.toFixed(2)}
      {label: "Farmed in", value: stats.farmed_in_total.toFixed(2)}
    ])

  updateAverageFarmed: (averages) =>
    hasChanged = false
    data = []
    for average in averages
      data.push({ label: average.name , value: average.value })

    @lastValues.averageFarmed = averages
    @averageFarmedChart.setData data

  updateServiceLevels: (serviceLevels) =>
    hasChanged = false
    for i in [0..@lastValues.serviceLevels.length]
      if @lastValues.serviceLevels[i] != serviceLevels[i]
        hasChanged = true
    if !hasChanged
      return
    @lastValues.serviceLevels = serviceLevels
    @serviceLevelsChart.setData([
      {label: "< 3 min.", value: serviceLevels[0]}
      {label: "< 5 min.", value: serviceLevels[1]}
      {label: "< 10 min.", value: serviceLevels[2]}
      {label: "< 15 min.", value: serviceLevels[3]}
      {label: "> 15 min.", value: serviceLevels[4]}
    ])

  updateDurations: (durations) =>
    hasChanged = false
    data = []
    for duration in durations
      data.push({ label: duration.name , value: duration.value })

    @lastValues.durations = durations
    @durationChart.setData data

  updateDistances: (distances) =>
    hasChanged = false
    data = []
    for distance in distances
      data.push({ label: distance.name , value: distance.value })

    @lastValues.distances = distances
    @mileageChart.setData data

class DashboardManager

  constructor: (@gateway, @startDatePicker, @endDatePicker, @farmedOutButton, @farmedInButton, @networkSelectorContainerId, @listeners) ->
    @tripsById = {}
    @activeTrip = null
    @selectedNetwork = $('#' + @networkSelectorContainerId + ' option:selected').val()
    @updatingInvoiceStats = false
    @updatingTrips = false
    @updatingActiveTrip = false
    @networksById = {}
    @farmedInMode = true
    @farmedOutMode = true
    @farmedModeExclusive = false
    @queryFilter = {}
    if $('#getUserRole').html() isnt 'admin' and $('#getUserRole').html() isnt 'demo'
      @queryFilter.servicingNetworkId = $('#getUserId').html()
      @queryFilter.originatingNetworkId = $('#getUserId').html()

    $('#start-date').datetimepicker(
      format: "YYYY/MM/DD"
    )
    $('#start-time').datetimepicker(
      format: 'HH:mm'
    )
    $('#end-time').datetimepicker(
      format: 'HH:mm'
    )
    @startDate = moment().startOf('day')
    @endDate = moment().endOf('day')
    @preventDateChangeEvent = true
    $('#start-date').data('DateTimePicker').date(@startDate)
    $('#start-time').data('DateTimePicker').date(@startDate)
    $('#end-time').data('DateTimePicker').date(@endDate)
    @preventDateChangeEvent = false

    $('#start-date').on 'dp.change', (e) =>
      if !@preventDateChangeEvent
        startTime = $('#start-time').data('DateTimePicker').date()
        endTime = $('#end-time').data('DateTimePicker').date()
        @startDate = moment(e.date).hours(startTime.hours()).minutes(startTime.minutes())
        @endDate = moment(e.date).hours(endTime.hours()).minutes(endTime.minutes())
        @update()

    $('#start-time').on 'dp.change', (e) =>
      if !@preventDateChangeEvent
        $('#end-time').data('DateTimePicker').minDate(e.date)
        @startDate.hours(e.date.hours()).minutes(e.date.minutes())
        @update()

    $('#end-time').on 'dp.change', (e) =>
      if !@preventDateChangeEvent
        $('#start-time').data('DateTimePicker').maxDate(e.date)
        @endDate.hours(e.date.hours()).minutes(e.date.minutes())
        @update()

    $('#farmedin-button').click =>
      if @farmedModeExclusive
        $('#farmedin-button').toggleClass('active')
        @farmedInMode = not @farmedInMode
        if @farmedInMode
          $('#farmedout-button').removeClass('active')
        else
          $('#farmedout-button').addClass('active')
        @farmedOutMode = not @farmedOutMode
        @update()
      else if not @farmedInMode or @farmedOutMode
        $('#farmedin-button').toggleClass('active')
        @farmedInMode = not @farmedInMode
        @update()
    $('#farmedout-button').click =>
      if @farmedModeExclusive
        $('#farmedout-button').toggleClass('active')
        @farmedOutMode = not @farmedOutMode
        if @farmedOutMode
          $('#farmedin-button').removeClass('active')
        else
          $('#farmedin-button').addClass('active')
        @farmedInMode = not @farmedInMode
        @update()
      else if not @farmedOutMode or @farmedInMode
        $('#farmedout-button').toggleClass('active')
        @farmedOutMode = not @farmedOutMode
        @update()

    $('#' + @networkSelectorContainerId).change =>
      @selectedNetwork = $('#' + @networkSelectorContainerId + ' option:selected').val()
      if $('#getUserRole').html() == 'network'
        @farmedModeExclusive = @selectedNetwork != 'All'
        if @farmedModeExclusive and @farmedInMode and @farmedOutMode
          @farmedInMode = false
          $('#farmedin-button').toggleClass('active')
      @updateSelectedNetwork()
      @update()
    $('#text-filter').donetyping(() =>
        for listener in @listeners
          if typeof listener.textFilter is 'function'
            try
              listener.textFilter($('#text-filter').val())
            catch error
              console.error listener + ' text filter failed: ' + error
    , 500)
    @gateway.getNetworks(@init)


  init: (networks) =>
    for network in networks
      @networksById[network.client_id] = network
      id = parseInt($('#getUserId').html())
      if $('#getUserRole').html() isnt 'network' or id != network.id
        $('#' + @networkSelectorContainerId).append('<option value="' + network.client_id + '">' + network.full_name + '</option>')
    @update()

  render: () =>
    for listener in @listeners
      if typeof listener.render is 'function'
        try
          listener.render()
        catch error
          console.error listener + ' render failed: ' + error

  setDate: (date) =>
    @startDate = moment(date).startOf('day')
    @endDate = moment(date).endOf('day')
    @preventDateChangeEvent = true
    $('#start-date').data('DateTimePicker').date(@startDate)
    $('#start-time').data('DateTimePicker').date(@startDate)
    $('#end-time').data('DateTimePicker').date(@endDate)
    @preventDateChangeEvent = false
    @update()

  update: =>
    query = @generateQuery()
    if not  @updatingInvoiceStats
      @updatingInvoiceStats = true
      @gateway.getInvoice(query, @updateInvoiceStats)

    if not @updatingTrips
      @updatingTrips = true
      query.limit = 30
      @gateway.getTrips(query, @updateTrips)

    if not @updatingActiveTrip
      @updatingActiveTrip = true
      if @activeTrip?
        @gateway.getTrip(@activeTrip.dbId, @updateActiveTrip)
      else
        @updateActiveTrip(null)

  generateQuery: () =>
    query = {
      startDate: @startDate.toDate(),
      endDate: @endDate.toDate(),
      status: 'completed'
    }
    nId = if @selectedNetwork != 'All' then @networksById[@selectedNetwork].id else 'all'
    if @farmedInMode
      query.servicingNetworkId = nId
    if @farmedOutMode
      query.originatingNetworkId = nId
    return query


  updateInvoiceStats: (data) =>
    if data?
      for listener in @listeners
        if typeof listener.updateInvoiceStats is 'function'
          try
            listener.updateInvoiceStats(data)
          catch error
            console.error listener + ' updateInvoiceStats failed: ' + error
    @updatingInvoiceStats = false

  cleanMap: () =>
    for listener in @listeners
      if listener instanceof TripTracker
        listener.cleanMap()

  updateTrips: (data) =>
    if data?
      tripsIds = []
      for i in [0...data.length]
        trip = data[i]
        if trip.trip_id.indexOf('web') > -1
          data.move(i, data.length-1)

      for newTrip in data
        tripsIds.push newTrip.trip_id
        if newTrip.trip_id not of @tripsById
          @processTrip(newTrip)

      for id, trip of @tripsById
        if id not in tripsIds
          delete @tripsById[id]

      for listener in @listeners
        if typeof listener.updateTrips is 'function'
          try
            listener.updateTrips(@tripsById)
          catch error
            console.error listener + ' updateTrips failed: ' + error
    @updatingTrips = false

  processTrip: (newTrip) =>
    trip = new Trip(
        newTrip.trip_id
        newTrip.customer_name
        newTrip.pickup_time
        new Location(parseFloat(newTrip.pickup_location_lat), parseFloat(newTrip.pickup_location_lng))
        if newTrip.user_client_id then newTrip.user_client_id else null
        if newTrip.servicing_network_client_id then newTrip.servicing_network_client_id else null
        newTrip.status
        newTrip.eta
        newTrip.fare
        newTrip.driver_name
        null
        new Location(parseFloat(newTrip.dropoff_location_lat), parseFloat(newTrip.dropoff_location_lng))
        null
    )
    trip.dbId = newTrip.id
    @tripsById[trip.getId()] = trip
    $(document).off('click', '#' + trip.getContainerId()).on 'click', '#' + trip.getContainerId(),  =>
      @activeTripCompleted = false
      @toggleActiveTrip(newTrip.trip_id)


  toggleActiveTrip: (tripId) =>
    trip = @tripsById[tripId]
    if (@activeTrip? and @activeTrip.id != trip.id) or trip?
      @activeTrip = trip
      @gateway.getTrip(@activeTrip.dbId, (data) =>
        @updatingActiveTrip = true
        @updateActiveTrip(data)
        @update())
    else
      @activeTrip = null
      @cleanMap()

    for listener in @listeners
      if typeof listener.tripChanged is 'function'
        try
          listener.tripChanged(@activeTrip)
        catch error
          console.error listener + ' tripChanged failed: ' + error


  updateActiveTrip: (data) =>
    if data?
      firstLocation = data.location_updates[0]
      lastLocation = data.location_updates[data.location_updates.length-1]

      if @activeTrip != null
        @activeTrip.update(
            data.status
            data.servicing_network_client_id
            data.driver_name
            new Location(parseFloat(lastLocation.lat), parseFloat(lastLocation.lng))
            new Location(parseFloat(firstLocation.lat), parseFloat(firstLocation.lng))
        )
    for listener in @listeners
      if typeof listener.updateActiveTrip is 'function'
        try
          listener.updateActiveTrip(@activeTrip)
        catch error
          console.error listener.toString() + ' updateActiveTrip failed: ' + error

    @updatingActiveTrip = false

  updateSelectedNetwork: () =>
    network = if @selectedNetwork != 'All' then @selectedNetwork else null
    for listener in @listeners
      if typeof listener.updateNetwork is 'function'
        try
          listener.updateNetwork(network)
        catch error
          console.error listener + ' updateNetwork failed: ' + error

`
  $(document).ready(function(){
    var url = window.location
    $('.list-group-item').filter( function(){
      return this.href == url;
    }).addClass('active');
  });
`

class InvoiceDisplay

  constructor: (@gateway, @dashboardManager, @containerId) ->
    @gateway.getUserBalance({}, @initTable)

  initTable: (userBalanceByMonth) =>
    if userBalanceByMonth? and userBalanceByMonth.length > 0
      balanceDate = moment(userBalanceByMonth[0].date_id)
      filter = {
        startDate: moment(balanceDate).startOf('month')
        endDate: moment().endOf('day')
        originatingNetworkId: $('#user_id').val()
        interval: 'day'
      }
      @gateway.getInvoiceSummary(filter, (farmedOutInvoices) =>
        filter.originatingNetworkId = null
        filter.servicingNetworkId = $('#user_id').val()
        @gateway.getInvoiceSummary(filter, (farmedInInvoices) =>
            farmedOutInvoicesByDay = {}
            farmedInInvoicesByDay = {}
            for invoice in farmedOutInvoices
              farmedOutInvoicesByDay[moment(invoice.date_id).format('YYYY-MM-DD')] = invoice
            for invoice in farmedInInvoices
              farmedInInvoicesByDay[moment(invoice.date_id).format('YYYY-MM-DD')] = invoice
            tableData = @prepareTableData(userBalanceByMonth, farmedOutInvoicesByDay, farmedInInvoicesByDay)
            @displayTable(tableData)
        )
      )

  prepareTableData: (userBalanceByMonth, farmedOutInvoicesByDay, farmedInInvoicesByDay) =>
    invoicesByMonth = {}
    totalBalanceStartOfMonth = 10000
    for balance in userBalanceByMonth
      balanceDate = moment(balance.date_id).startOf('day')
      dateIndex = balanceDate.format('YYYY-MM-DD')
      invoiceDate = balanceDate
      balanceEndDate = moment(balanceDate).endOf('month').startOf('day')
      balanceEndDate = if balanceEndDate.isAfter(moment()) then moment() else balanceEndDate
      invoicesByMonth[dateIndex] = []
      totalInvoice = {
        type: ''
        amount: 0
        farmedOut: 0
        farmedIn: 0
        tripthruFee: 0
        availableBalance: totalBalanceStartOfMonth
      }
      invoice = {}
      invoicesByMonth[dateIndex].push { type: 'Deposit', date: invoiceDate.format('YYYY-MM-DD'), amount: -10000, farmedIn: 0, farmedOut: 0, tripthruFee: 0, availableBalance: totalBalanceStartOfMonth }
      while invoiceDate.isBefore(balanceEndDate) or invoiceDate.isSame(balanceEndDate)
        invoice = {
          farmedOut: if farmedOutInvoicesByDay[invoiceDate.format('YYYY-MM-DD')]? then farmedOutInvoicesByDay[invoiceDate.format('YYYY-MM-DD')].total else 0
          farmedIn: if farmedInInvoicesByDay[invoiceDate.format('YYYY-MM-DD')]? then farmedInInvoicesByDay[invoiceDate.format('YYYY-MM-DD')].total else 0
        }
        if invoice.farmedOut > 0 or invoice.farmedIn > 0
          invoice.type = 'Trip fare'
          invoice.amount = invoice.farmedIn - invoice.farmedOut
          invoice.tripthruFee = (invoice.farmedIn + invoice.farmedOut) * 0.01
          invoice.amount += invoice.tripthruFee
          while (totalBalanceStartOfMonth - invoice.amount) < 0
            totalBalanceStartOfMonth += 10000
            invoicesByMonth[dateIndex].push { type: 'Deposit', date: invoiceDate.format('YYYY-MM-DD'), amount: -10000, farmedIn: 0, farmedOut: 0, tripthruFee: 0, availableBalance: totalBalanceStartOfMonth }
          totalBalanceStartOfMonth -= invoice.amount
          invoice.availableBalance = totalBalanceStartOfMonth
          invoice.date = invoiceDate.format('YYYY-MM-DD')
          invoicesByMonth[dateIndex].push invoice
          totalInvoice.amount += invoice.amount
          totalInvoice.farmedOut += invoice.farmedOut
          totalInvoice.farmedIn += invoice.farmedIn
          totalInvoice.tripthruFee += invoice.tripthruFee
        invoiceDate = invoiceDate.add(1, 'day')
      totalInvoice.availableBalance = totalBalanceStartOfMonth
      invoicesByMonth[dateIndex].push totalInvoice

    return invoicesByMonth

  formatNumber: (number) =>
    number =  number.toFixed(2)
    return if number < 0 then '- $' + Math.abs(number) else '$' + number

  displayTable: (invoicesByMonth) =>
    for date, invoice of invoicesByMonth
      totalInvoice = invoice[invoice.length-1]
      startDate = moment(date).format('YYYY-MM-DD')
      endDate = moment(date).endOf('month').format('YYYY-MM-DD')
      monthRow = '<tr data-toggle="collapse" data-target="#' + date + '" class="accordion-toggle">
                      <td class="text-center" width="20%"> ' + startDate + ' to ' + endDate + ' </td>
                      <td class="text-right" width="11.6%"> ' + totalInvoice.type + ' </td>
                      <td class="text-right" width="11.6%"> ' + @formatNumber(totalInvoice.amount) + ' </td>
                      <td class="text-right" width="11.6%"> ' + @formatNumber(totalInvoice.farmedIn) + ' </td>
                      <td class="text-right" width="11.6%"> ' + @formatNumber(totalInvoice.farmedOut) + ' </td>
                      <td class="text-right" width="11.6%"> ' + @formatNumber(totalInvoice.tripthruFee) + ' </td>
                      <th class="text-right" width="11.6%"> ' + @formatNumber(totalInvoice.availableBalance) + ' </th>
                      <td class="text-center" width="10%"><img src="/assets/arrow.png"></a></td>
                    </tr>'
      innerRows = ' <tr>
                      <td colspan="12" class="hiddenRow">
                        <div class="accordion-body collapse" id="' + date + '">
                          <table class="table table-condensed table-striped table-hover">
                            <tbody>'
      for i in [0..invoice.length-2]
        id = 'd-' + invoice[i].date
        innerRows +=          ' <tr>
                                  <td class="text-right" width="20%">' + invoice[i].date + '</td>
                                  <td class="text-right" width="11.6%"> ' + invoice[i].type + ' </td>
                                  <td class="text-right" width="11.6%"> ' + @formatNumber(invoice[i].amount) + ' </td>
                                  <td class="text-right" width="11.6%"> ' + @formatNumber(invoice[i].farmedIn) + ' </td>
                                  <td class="text-right" width="11.6%"> ' + @formatNumber(invoice[i].farmedOut) + ' </td>
                                  <td class="text-right" width="11.6%"> ' + @formatNumber(invoice[i].tripthruFee) + ' </td>
                                  <th class="text-right" width="11.6%"> ' + @formatNumber(invoice[i].availableBalance) + ' </th>
                                  <td class="text-center" width="10%"><a href="#" id="' + id + '">See details</a></td>
                                </tr>'
        do(id) =>
          $('body').on('click', '#' + id, (e) =>
            e.preventDefault()
            @switchToDashboard(id.replace('d-', ''))
          )
      innerRows += '        </tbody>
                          </table>
                        </div>
                      </td>
                    </tr>'
      $('#' + @containerId).append(monthRow + innerRows)

  switchToDashboard: (date) =>
    @dashboardManager.setDate(moment(date))
    $('#tabs li.active')
    .next()
    .find('a[data-toggle="tab"]')
    .click()
    @dashboardManager.render()


$('.developer.money').ready ->

  tripthru = new TripThru($('#access_token').val())
  dashboardManager = new DashboardManager(
      tripthru
      'start-date'
      'end-date'
      'farmedout-button'
      'farmedin-button'
      'network-selector'
      [
        new TripList('trips-panel')
        new StatisticsDashboard('statistics-gauges-container')
        new TripTracker('tracking-trip-info', 'tracking-map-container')
      ]
  )
  new InvoiceDisplay(tripthru, dashboardManager, 'invoice-summary-table')
  clearInterval(window.tripthruinterval)

  return