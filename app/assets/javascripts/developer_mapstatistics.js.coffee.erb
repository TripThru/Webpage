########## STATISTICS HEAT MAPS #########

class StatisticsHeatMap

  constructor: (@gateway, @containerId, @selectorId) ->
    @gateway.getPartners(@loadSelectorFleets)
    @startDate = new Date()
    @endDate = new Date()
    @tripsByIdHeatMap = []
    @updatingHeatMap = false
    @tripsById = {}
    @fleets = {}
    @selectedFleet = 'All'
    mapOptions =
      zoom: 4
      center: new google.maps.LatLng(37.09024, -95.712891)
      mapTypeId: google.maps.MapTypeId.TERRAIN
      disableDefaultUI: false
      scrollwheel: true
      draggable: true
      navigationControl: true
      mapTypeControl: false
      scaleControl: true
      disableDoubleClickZoom: false
    @map = new google.maps.Map(document.getElementById(containerId), mapOptions)
    @heatmap = new google.maps.visualization.HeatmapLayer()

    @selectedStat = 'tripsCompleted'
    $('#trips-completed-filter-button').toggleClass('active')
    @stats =
      'tripsCompleted' : 0
      'tripsCancelled' : 0
      'tripsRejected' : 0
      'tripsError' : 0
      'timeEnroute' : 0
      'timeOccupied' : 0
      'timeIdle' : 0
      'mileageEnroute' : 0
      'mileageOccupied' : 0
      'serviceGoal' : 0
      'serviceLateness' : 0
      'ratingDrivers' : 0
      'ratingPassengers' : 0
    @generateRandomData()

    $('#trips-completed-filter-button').click =>
      if @selectedStat != 'tripsCompleted'
        $('.filter-button').removeClass('active')
        $('#trips-completed-filter-button').addClass('active')
        @selectedStat = 'tripsCompleted'
        @drawHeatMap()

    $('#trips-rejected-filter-button').click =>
      if @selectedStat != 'tripsRejected'
        $('.filter-button').removeClass('active')
        $('#trips-rejected-filter-button').addClass('active')
        @selectedStat = 'tripsRejected'
        @drawHeatMap()

    $('#trips-cancelled-filter-button').click =>
      if @selectedStat != 'tripsCancelled'
        $('.filter-button').removeClass('active')
        $('#trips-cancelled-filter-button').addClass('active')
        @selectedStat = 'tripsCancelled'
        @drawHeatMap()

    $('#trips-error-filter-button').click =>
      if @selectedStat != 'tripsError'
        $('.filter-button').removeClass('active')
        $('#trips-error-filter-button').addClass('active')
        @selectedStat = 'tripsError'
        @drawHeatMap()

    $('#time-enroute-filter-button').click =>
      if @selectedStat != 'timeEnroute'
        $('.filter-button').removeClass('active')
        $('#time-enroute-filter-button').addClass('active')
        @selectedStat = 'timeEnroute'
        @drawHeatMap()

    $('#time-occupied-filter-button').click =>
      if @selectedStat != 'timeOccupied'
        $('.filter-button').removeClass('active')
        $('#time-occupied-filter-button').addClass('active')
        @selectedStat = 'timeOccupied'
        @drawHeatMap()

    $('#time-idle-filter-button').click =>
      if @selectedStat != 'timeIdle'
        $('.filter-button').removeClass('active')
        $('#time-idle-filter-button').addClass('active')
        @selectedStat = 'timeIdle'
        @drawHeatMap()

    $('#mileage-enroute-filter-button').click =>
      if @selectedStat != 'mileageEnroute'
        $('.filter-button').removeClass('active')
        $('#mileage-enroute-filter-button').addClass('active')
        @selectedStat = 'mileageEnroute'
        @drawHeatMap()

    $('#mileage-occupied-filter-button').click =>
      if @selectedStat != 'mileageOccupied'
        $('.filter-button').removeClass('active')
        $('#mileage-occupied-filter-button').addClass('active')
        @selectedStat = 'mileageOccupied'
        @drawHeatMap()

    $('#service-goal-filter-button').click =>
      if @selectedStat != 'serviceGoal'
        $('.filter-button').removeClass('active')
        $('#service-goal-filter-button').addClass('active')
        @selectedStat = 'serviceGoal'
        @drawHeatMap()

    $('#service-lateness-filter-button').click =>
      if @selectedStat != 'serviceLateness'
        $('.filter-button').removeClass('active')
        $('#service-lateness-filter-button').addClass('active')
        @selectedStat = 'serviceLateness'
        @drawHeatMap()

    $('#ratings-drivers-filter-button').click =>
      if @selectedStat != 'ratingDrivers'
        $('.filter-button').removeClass('active')
        $('#ratings-drivers-filter-button').addClass('active')
        @selectedStat = 'ratingDrivers'
        @drawHeatMap()

    $('#ratings-passengers-filter-button').click =>
      if @selectedStat != 'ratingPassengers'
        $('.filter-button').removeClass('active')
        $('#ratings-passengers-filter-button').addClass('active')
        @selectedStat = 'ratingPassengers'
        @drawHeatMap()

    google.maps.event.addDomListenerOnce(@map, "tilesloaded", () =>
      google.maps.event.addDomListenerOnce(@map, "tilesloaded", @update()))

  loadSelectorFleets: (fleets) =>
    for fleet in fleets.fleets
      if fleet.fleetName == "TripThru San Francisco"
        continue
      @fleets[fleet.fleetName] =  fleet
      $('#' + @selectorId).append('<option value="' + fleet.fleetName + '">' + fleet.fleetName + '</option>')
    $('#' + @selectorId).change =>
      @selectedFleet = $('#' + @selectorId + ' option:selected').val()
      @generateRandomData()
      @drawHeatMap()

  update: () =>
    if not @updatingHeatMap
      @updatingHeatMap = true
      last10Minutes = new Date();
      last10Minutes.setMinutes(last10Minutes.getMinutes()-10);
      date = +last10Minutes / 1000;
      $.get '/mongo_db/trips_list?startDate=' + date, (data) =>
        @loadHeatMapTrips(data)

  loadHeatMapTrips: (trips) =>
    tripsIds = []
    for newTrip in trips
      tripsIds.push newTrip._id
      if newTrip.id not of @tripsById
        @processTrip(newTrip)

    for id, trip of @tripsById
      if id not in tripsIds
        delete @tripsById[id]
    @drawHeatMap()
    @updatingHeatMap = false

  drawHeatMap: () =>
    taxiData = []
    for key of @tripsById
      if @selectedFleet == 'All' or @selectedFleet == @tripsById[key].servicing
        taxiData.push {
          location: new google.maps.LatLng(@tripsById[key].pickupLocation.lat,@tripsById[key].pickupLocation.lng),
          weight: @stats[@selectedStat]
        }
        taxiData.push {
          location: new google.maps.LatLng(@tripsById[key].dropoffLocation.lat,@tripsById[key].dropoffLocation.lng),
          weight: @stats[@selectedStat]
        }
    if @selectedFleet != 'All'
      @map.panTo(new google.maps.LatLng(@fleets[@selectedFleet].coverage[0].center.lat, @fleets[@selectedFleet].coverage[0].center.lng))
    @heatmap.setMap null
    gradient = [ "rgba(0, 255, 255, 0)", "rgba(13, 0, 229, 1)", "rgba(0, 74, 225, 1)", "rgba(0, 159, 221, 1)", "rgba(0, 217, 193, 1)", "rgba(0, 213, 106, 1)", "rgba(0, 210, 22, 1)", "rgba(58, 206, 0, 1)", "rgba(135, 202, 0, 1)", "rgba(198, 186, 0, 1)", "rgba(194, 106, 0, 1)", "rgba(191, 30, 0, 1)" ]
    @heatmap = new google.maps.visualization.HeatmapLayer({
      data: taxiData,
      radius: 20,
      maxIntensity: 100,
      gradient: gradient
    })
    @heatmap.setMap @map


  processTrip: (newTrip) =>
    driverLocation =
      if newTrip.driverLocation? then new Location(newTrip.driverLocation.lat, newTrip.driverLocation.lng, null) else null
    driverInitialLocation =
      if newTrip.driverInitialLocation? then new Location(newTrip.driverInitialLocation.lat, newTrip.driverInitalLocation.lng, null) else null
    trip = new Trip(
      newTrip._id
      newTrip.passengerName
      newTrip.pickupTime
      new Location(newTrip.PickupLocation.Lat, newTrip.PickupLocation.Lng, null, false)
      newTrip.originatingPartnerName
      newTrip.servicingPartnerName
      newTrip.status
      newTrip.eta
      newTrip.price
      newTrip.driverName
      driverLocation
      new Location(newTrip.DropoffLocation.Lat, newTrip.DropoffLocation.Lng, null, false)
      driverInitialLocation
    )
    @tripsById[trip.getId()] = trip

  generateRandomData: () =>
    @stats['tripsCompleted'] = @r()
    @stats['tripsCancelled'] = @r()
    @stats['tripsRejected'] = @r()
    @stats['tripsError'] = @r()
    @stats['timeEnroute'] = @r()
    @stats['timeOccupied'] = @r()
    @stats['timeIdle'] = @r()
    @stats['mileageEnroute'] = @r()
    @stats['mileageOccupied'] = @r()
    @stats['serviceGoal'] = @r()
    @stats['serviceLateness'] = @r()
    @stats['ratingDrivers'] = @r()
    @stats['ratingPassengers'] = @r()

  r: () =>
    (Math.random() * 80) + 20

$('.developer.mapstatistics').ready ->
  statisticsHeatMap = new StatisticsHeatMap(
    new TripThru($('#access_token').val())
    'heat-map'
    'partners-select'
  )
  setInterval =>
    statisticsHeatMap.update()
  , 10000