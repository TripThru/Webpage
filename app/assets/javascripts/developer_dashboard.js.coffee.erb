########## DASHBOARD #########

class TripList

  constructor: (@containerId) ->
    @tripsInListById = {}
    @currentNetwork = null
    @statusChanged = false
    $('#trips').scroll @loadAddressIfVisible
    $('#main').scroll @loadAddressIfVisible
    @loadingAddresses = false

  loadAddressIfVisible: () =>
    if !@loadingAddresses
      @loadingAddresses = true
      for id, trip of @tripsInListById
        if $('#' + trip.getContainerId())? and $('#' + trip.getContainerId()).visible() and $('#' + trip.getContainerId()).find('.triplist-trip-pickup').html() == 'loading...'
          @setAddress(trip)
      @loadingAddresses = false

  setAddress: (trip) =>
    if !trip.loadingAddress
      address = trip.getPickupLocation().getAddress()
      address = if address? then address else 'loading...'
      $('#' + trip.getContainerId()).find('.triplist-trip-pickup').fadeOut().html(address).fadeIn()
      if address == 'loading...'
        setTimeout(() =>
            @setAddress(trip)
        , 500);
      else
        trip.loadingAddress = true

  tripChanged: (trip) =>
    if not trip?
      $('#' + @containerId + '>div.active').removeClass('active')
    else
      if not $('#' + trip.getContainerId()).hasClass('active')
        $('#' + @containerId + '>div.active').removeClass('active')
        $("#" + trip.getContainerId()).addClass("active")

  updateStatus: (status) =>
    if @currentNetwork != status
      @statusChanged = true
      if $('#triplist-loading').length <= 0
        $('#' + @containerId).html('<span id="triplist-loading"><%= image_tag('loading.gif') %></span>')
    @currentNetwork = status

  updateTrips: (tripsById) =>
    if @statusChanged
      @statusChanged = false
      $('#' + @containerId).html('')
      for id, trip of tripsById
        @addTrip(trip)
    else
      for id, trip of tripsById
        if id not of @tripsInListById
          @addTrip(trip)
      for id, trip of @tripsInListById
        if id not of tripsById
          @removeTrip(trip)
        else
          @updateTrip(trip)

  updateTrip: (trip) =>

  addTrip: (trip) =>
    @tripsInListById[trip.getId()] = trip
    if trip.id.indexOf('web') > -1
      $('#' + @containerId).prepend @getTripTag(trip)
    else
      $('#' + @containerId).append @getTripTag(trip)
    if $('#' + trip.getContainerId()).visible()
      @setAddress(trip)

  removeTrip: (trip) =>
    delete @tripsInListById[trip.getId()]
    $('#' + trip.getContainerId()).remove()

  getTripTag: (trip) =>
    farmedInLogoId = trip.getOrigin()
    if $('#user_role').val() == 'network' and trip.getServicing()?
      farmedInLogoId = if $('#user_client_id').val() == trip.getOrigin() then trip.getServicing() else trip.getOrigin()
    farmedInLogo = '<img alt="' + farmedInLogoId + '" src="/assets/networks/' + farmedInLogoId + '.png"/>'
    '
                <div class="well trip" id="' + trip.getContainerId() + '">
                    <div>' + farmedInLogo + '<h1>' + trip.getId() + '</h1></div>
                    <p><span>Customer:</span> <i>' + trip.getCustomerName() + '</i></p>
                    <p><span>Time:</span> <i>' + trip.getPickupTime().split('.')[0] + '</i></p>
                    <p><span>Pickup:</span> <i class="triplist-trip-pickup">loading...</i></p>
                </div>
            '

class TripTracker

  setZoomEvent: () =>
    google.maps.event.addListener @map, 'zoom_changed', () =>
      zoom = @map.getZoom()
      if zoom != @defaultCleanMapZoom and zoom != @defaultTrackingZoom
        @userChangedZoom = true

  constructor: (@tripInfoContainerId, @mapContainer) ->
    @customerMarker = null
    @destinationMarker = null
    @driverMarker = null
    @initialMarker = null
    @tripChange = false
    @userChangedZoom = false
    @defaultCleanMapZoom = 4
    @defaultTrackingZoom = 15
    @mapOptions =
      center: if typeof google isnt "undefined" then new google.maps.LatLng(40.32004,-98.9290212) else null
      zoom: @defaultCleanMapZoom
      mapTypeControl: false
      mapTypeId: google.maps.MapTypeId.ROADMAP

    @map = if typeof google isnt "undefined" then new google.maps.Map(document.getElementById("map-canvas"), @mapOptions) else null
    if @map?
      @setZoomEvent()

    rendererOptions =
        preserveViewport: true
        suppressMarkers: true
        polylineOptions:
            strokeColor: "#8B0000"
            strokeOpacity: 1
            strokeWeight: 5
    rendererOptions2 =
        preserveViewport: true
        suppressMarkers: true
        polylineOptions:
            strokeColor: "#008000"
            strokeOpacity: 1
            strokeWeight: 5

    @directionsDisplay = if typeof google isnt "undefined" then new google.maps.DirectionsRenderer(rendererOptions) else null
    @directionsDisplay2 = if typeof google isnt "undefined" then new google.maps.DirectionsRenderer(rendererOptions2) else null
    @directionsService = if typeof google isnt "undefined" then new google.maps.DirectionsService() else null
    @driverPreviousLocation = null
    @setTripInfoBool = false
    @tripId = null
    @trip = null
    @customerRatingChartId = 'customer-rating'
    @driverRatingChartId = 'driver-rating'
    @latestAddedLogDate = null
    @tcurrentTripIdripId = null
    @pulseQueue = []
    @updatedTripAudio = document.createElement('audio');
    @updatedTripAudio.setAttribute('src', '/assets/trip-status-update.mp3');
    @tickAudio = document.createElement('audio');
    @tickAudio.setAttribute('src', '/assets/tick.mp3');
    setInterval(() =>
      if @pulseQueue.length > 0
        for i in [0..@pulseQueue.length]
          pulse = @pulseQueue[i]
          if pulse? and !pulse.animating
            isSecondUpdateTripStatusPulse = pulse.type == 'update-trip-status' and (pulse.direction == 'tripthru-origin' or pulse.direction == 'tripthru-servicing') and (i > 0) and (@pulseQueue[i-1].type == 'update-trip-status')
            delay = if isSecondUpdateTripStatusPulse then 1000 else 0
            pulse.animating = true
            do (pulse = pulse, isSecondUpdateTripStatusPulse = isSecondUpdateTripStatusPulse) =>
              setTimeout(() =>
                @animate(pulse)
                if pulse.type == 'update-trip-status' and !isSecondUpdateTripStatusPulse
                  @updatedTripAudio.play()
                else if pulse.type == 'driver-update' or pulse.type == 'get-trip-status'
                  @tickAudio.play()
                @pulseQueue.shift()
              , delay)
    , 500)

  cleanMap: () =>
    @customerMarker.setMap null  if @customerMarker?
    @driverMarker.setMap null  if @driverMarker?
    @destinationMarker.setMap null  if @destinationMarker?
    @initialMarker.setMap null  if @initialMarker?
    @directionsDisplay.setMap null if @directionsDisplay?
    @directionsDisplay2.setMap null if @directionsDisplay2?
    @map.panTo(new google.maps.LatLng(40.32004,-98.9290212))
    @map.setZoom @defaultCleanMapZoom

  tripChanged: (trip) =>
    @tripChange = true
    @userChangedZoom = false
    @tripId = null
    @driverPreviousLocation = null
    @updateTripInfo(trip)

  updateActiveTrip: (trip) =>
    if trip?
      @queuePulse('', '', 'driver-update')
    @updateTripInfo(trip)
    if typeof @directionsDisplay isnt "undefined" and typeof @directionsDisplay2 isnt "undefined" and typeof @directionsService isnt "undefined"
        @updateMap(trip)
    if trip?
      @tripId = trip.getId()
      @trip = trip
    @tripChange = false

  updateLog: (logList, currentTripId) =>
    if currentTripId? and logList? and logList.length > 0
      newLatest = logList[0].creation
      logs = []
      if !@latestAddedLogDate? or @tcurrentTripIdripId != currentTripId
        @tcurrentTripIdripId = currentTripId
      else
        for log in logList
          if Date.parse(log.creation) > Date.parse(@latestAddedLogDate)
            logs.push log
          else
            break

      if logs.length > 0
        logs = logs.reverse()
        for log in logs
          if log.origin? and log.destination? and log.type?
            @queuePulse(log.origin, log.destination, log.type, log.status)
        @latestAddedLogDate = logList[logList.length-1].creation

      @latestAddedLogDate = newLatest

  queuePulse: (origin, destination, type, status) =>
    message = null
    if type == 'driver-update'
      message = {type: type}
    else
      if origin == 'origin'
        message = {direction: 'origin-tripthru'}
      else if origin == 'servicing'
        message = {direction: 'servicing-tripthru'}
      else if origin == 'tripthru' and destination == 'origin'
        message = {direction: 'tripthru-origin'}
      else if origin == 'tripthru' and destination == 'servicing'
        message = {direction: 'tripthru-servicing'}
      message.type = type
      message.status = status
    @pulseQueue.push message

  animate: (pulse) =>
    color = if pulse.status? then pulse.status else 'dark-blue'
    if pulse.type == 'driver-update'
      @toggleAnimation('pulse-customer-origin',    'quick', 'right', 'dark-blue', 0)
      @toggleAnimation('pulse-origin-tripthru',     'quick', 'right', 'dark-blue', 180)
      @toggleAnimation('pulse-tripthru-servicing',  'quick', 'right', 'dark-blue', 360)
      @toggleAnimation('pulse-servicing-driver',    'quick', 'right', 'dark-blue', 540)
      @toggleAnimation('pulse-servicing-driver',    'quick', 'left', 'dark-blue', 720)
      @toggleAnimation('pulse-tripthru-servicing',  'quick', 'left', 'dark-blue', 900)
      @toggleAnimation('pulse-origin-tripthru',     'quick', 'left', 'dark-blue', 1080)
      @toggleAnimation('pulse-customer-origin',    'quick', 'left', 'dark-blue', 1260)
    else if pulse.direction == 'origin-tripthru'
      delay = 0
      if pulse.type == 'update-trip-status'
        delay = 380
        @toggleAnimation('pulse-customer-origin',  'normal', 'right', color, 0)
      @toggleAnimation('pulse-origin-tripthru',     'normal', 'right', color, delay)
    else if pulse.direction == 'servicing-tripthru'
      delay = 0
      if pulse.type == 'update-trip-status'
        delay = 380
        @toggleAnimation('pulse-servicing-driver',  'normal', 'left', color, 0)
      @toggleAnimation('pulse-tripthru-servicing',  'normal', 'left', color, delay)
    else if pulse.direction == 'tripthru-origin'
      @toggleAnimation('pulse-origin-tripthru',     'normal', 'left', color, 0)
      if pulse.type == 'update-trip-status'
        @toggleAnimation('pulse-customer-origin',  'normal', 'left', color, 380)
    else if pulse.direction == 'tripthru-servicing'
      @toggleAnimation('pulse-tripthru-servicing',  'normal', 'right', color, 0)
      if pulse.type == 'update-trip-status'
        @toggleAnimation('pulse-servicing-driver',  'normal', 'right', color, 380)

  toggleAnimation: (containerId, type, direction, color, delay) =>
    animation = if type == 'normal' then 'pulse-' else 'pulse-quick-'
    animation += direction
    duration = if type == 'normal' then 350 else 100
    id = guid()
    element = '<div id="' + id + '" class="orb ' + color + '-orb ' + animation + '"></div>'
    setTimeout(() =>
        $('#' + containerId).append(element)
        setTimeout(() =>
          $('#' + id).fadeOut(100, () => $(this).remove());
        , duration)
    , delay)

  updateTripInfo: (trip) =>
    if trip?
      tripPickupLocation = trip.getPickupLocation().getAddress()
      tripDropoffLocation = trip.getDropoffLocation().getAddress()
      tripDriverName = trip.getDriverName()
      tripDriverLocation = if trip.getDriverLocation()? then trip.getDriverLocation().getAddress() else null
      if !tripDriverLocation? and @driverPreviousLocation?
        tripDriverLocation = @driverPreviousLocation.getAddress()

      pickupLocation = if tripPickupLocation? then tripPickupLocation else 'loading...'
      dropoffLocation = if tripDropoffLocation? then tripDropoffLocation else 'loading...'
      driverLocation = if tripDriverLocation? then ' @ ' + tripDriverLocation else 'None'
      driver = if tripDriverName? then tripDriverName + driverLocation else 'None'
      servicing = if trip.getServicing()? then trip.getServicing() else ''
      farmedInLogo = '<img alt="' + trip.getOrigin() + '" src="/assets/networks/' + trip.getOrigin() + '.png"/>'
      farmedOutLogo = '<img alt="Networks" src="/assets/networks/all.png"/>'
      driverLogo = ''
      if trip.getServicing()?
        farmedOutLogo = '<img alt="' + trip.getServicing() + '" src="/assets/networks/' + trip.getServicing() + '.png"/>'
        driverLogo = '<div class="pulse-line" id="pulse-servicing-driver"></div>
                      <div class="icon"><img alt="Driver" src="/assets/driver.png"/></div>'
      if $('#trip-id-tag').html() != trip.getId()
        $('#' + @tripInfoContainerId).html(
            '<div>
                <div id="icons">
                  <div class="icon"><img alt="Customer" src="/assets/customer.png"/></div>
                  <div class="pulse-line" id="pulse-customer-origin"></div>
                  <div class="icon">' + farmedInLogo + '</div>
                  <div class="pulse-line" id="pulse-origin-tripthru"></div>
                  <div id="tripthru"><img alt="TripThru" src="/assets/tripthru-logo.png"/></div>
                  <div class="pulse-line" id="pulse-tripthru-servicing"></div>
                  <div class="icon" id="farmed-out-logo">' + farmedOutLogo + '</div>
                  ' + driverLogo + '
                </div>
                <div><span>Id: </span><p id="trip-id-tag">' + trip.getId() + '</p></div>
                <div><span>Status: </span><p id="status-tag">' + trip.getStatus() + '</p></div>
                <div><span>Customer: </span><p>' + trip.getCustomerName() + '  </p>
                   <div class="rating-container">
                        <div class="flexible-stars" data-isLocked="yes"
                                data-init="0" id="' + @customerRatingChartId + '"></div>
                   </div>
                </div>
                <div><span>Time: </span><p>' + trip.getPickupTime().split('.')[0] + '</p></div>
                <div><span>Pickup: </span><p id="pickup-tag">' + pickupLocation + '</p></div>
                <div><span>Dropoff: </span><p id="dropoff-tag">' + dropoffLocation + '</p></div>
                <div>
                  <span>Farmed-Out: </span><p>' + trip.getOrigin() + ' - </p>
                  <span>Farmed-In: </span><p id="farmed-out-tag">' + servicing + '</p>
                </div>
                <div><span>Driver: </span><p id="driver-tag">' + driver + '  </p>
                    <div class="rating-container">
                      <div class="flexible-stars" data-isLocked="yes"
                                 data-init="0" id="' + @driverRatingChartId + '"></div>
                    </div>
                </div>
             </div>
            '
        )

        $('#' + @customerRatingChartId).html('')
        $('#' + @customerRatingChartId).flexibleStars({
          init: trip.getCustomerRating()
        })

        if trip.getDriverName()?
          $('#' + @driverRatingChartId).html('')
          $('#' + @driverRatingChartId).flexibleStars({
            init: trip.getDriverRating()
          })
      else
        if trip.getServicing()? and !$('#pulse-servicing-driver').length
          $('#farmed-out-logo').fadeOut(500).html(farmedOutLogo).fadeIn(500)
          $('#icons').append(driverLogo).hide().fadeIn(500)
          $('#farmed-out-tag').append(servicing)
        $('#driver-tag').html(driver)
        $('#status-tag').html(trip.getStatus())
        $('#pickup-tag').html(pickupLocation)
        $('#dropoff-tag').html(dropoffLocation)

    else
      $('#' + @tripInfoContainerId).html('<h1>Select a trip</h1>')

  updateMap: (trip) =>
    return  if @setTripInfoBool is true or !trip? or !trip.driverLocation?
    @setTripInfoBool = true
    if not trip? or @tripId isnt trip.getId()
      @customerMarker.setMap null  if @customerMarker?
      @driverMarker.setMap null  if @driverMarker?
      @destinationMarker.setMap null  if @destinationMarker?
      @initialMarker.setMap null  if @initialMarker?
      @driverPreviousLocation = null
      @tripId = (if trip? then trip.getId() else "")
      if @directionsDisplay?
        @directionsDisplay.setMap null
      if @directionsDisplay2?
        @directionsDisplay2.setMap null
    unless trip?
      @setTripInfoBool = false
      return
    if not @driverPreviousLocation? or trip.driverLocation.lat isnt @driverPreviousLocation.lat or trip.driverLocation.lng isnt @driverPreviousLocation.lng
      @driverPreviousLocation = trip.driverLocation
      pickupLocation = trip.pickupLocation
      driverLocation = trip.driverLocation
      dropoffLocation = trip.dropoffLocation
      driverInitialLocation = trip.driverInitialLocation
      if pickupLocation or driverLocation
        customerLocation = null
        driverCurrentLocation = null
        destinationLocation = null
        initialLocation = null
        if dropoffLocation
          destinationLocation = new google.maps.LatLng(dropoffLocation.lat, dropoffLocation.lng)
          if @destinationMarker?
            @destinationMarker.setMap @map
            @destinationMarker.setPosition destinationLocation
        if pickupLocation
          customerLocation = new google.maps.LatLng(pickupLocation.lat, pickupLocation.lng)
          if @customerMarker?
            @customerMarker.setMap @map
            @customerMarker.setPosition customerLocation
        if driverLocation
          driverCurrentLocation = new google.maps.LatLng(driverLocation.lat, driverLocation.lng)
          if @driverMarker?
            @driverMarker.setMap @map
            @driverMarker.setPosition driverCurrentLocation
        if driverInitialLocation
          initialLocation = new google.maps.LatLng(driverInitialLocation.lat, driverInitialLocation.lng)
          if @initialMarker?
            @initialMarker.setMap @map
            @initialMarker.setPosition driverInitialLocation
        unless @map?
          @mapOptions =
            center: (if driverCurrentLocation? then driverCurrentLocation else customerLocation)
            zoom: @defaultTrackingZoom
            mapTypeControl: false
            mapTypeId: google.maps.MapTypeId.ROADMAP

          @map = new google.maps.Map(document.getElementById("map-canvas"), @mapOptions)
          @setZoomEvent()
        if customerLocation? and not @customerMarker?
          @customerMarker = new google.maps.Marker(
            position: customerLocation
            map: @map
            icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=home|FFFF00"
            title: "Pickup"
          )
        if initialLocation? and not @initialMarker?
          @initialMarker = new google.maps.Marker(
            position: driverInitialLocation
            map: @map
            icon: "http://www.mricons.com/store/png/113267_25418_16_flag_icon.png"
            title: "Initial"
          )
        if driverLocation? and not @driverMarker?
          @driverMarker = new google.maps.Marker(
            position: driverCurrentLocation
            map: @map
            icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=taxi|FFFF00"
            title: "Driver"
          )
        if destinationLocation? and not @destinationMarker?
          @destinationMarker = new google.maps.Marker(
            position: dropoffLocation
            map: @map
            icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=cafe|FFFF00"
            title: "Destination"
          )
        if driverLocation? and pickupLocation? and dropoffLocation?
          routes = []
          switch trip.status
            when "en_route"
              routes = [
                origin: initialLocation
                destination: driverCurrentLocation
              ]
            when "picked_up"
              routes = [
                origin: initialLocation
                destination: customerLocation
              ,
                origin: customerLocation
                destination: driverCurrentLocation
              ]
            when "completed"
              routes = [
                origin: initialLocation
                destination: customerLocation
              ,
                origin: customerLocation
                destination: destinationLocation
              ]
          boleanFirst = true
          routes.forEach (route) =>
            request =
              origin: route.origin
              destination: route.destination
              travelMode: google.maps.TravelMode.DRIVING
            if boleanFirst
                @directionsDisplay.setMap @map
            else
                @directionsDisplay2.setMap @map
            if boleanFirst
              @directionsService.route request, (result, status) =>
                  @directionsDisplay.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay?
              boleanFirst = false
            else
              @directionsService.route request, (result, status) =>
                  @directionsDisplay2.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay2?
        if @tripChange or !@userChangedZoom
          @map.setCenter (if driverCurrentLocation? then driverCurrentLocation else customerLocation)
          @map.setZoom @defaultTrackingZoom
    @setTripInfoBool = false

class ActivityLog

  constructor: (@containerId) ->
    @tripId = ''
    @latestAddedLogDate = null
    @tcurrentTripIdripId = null
    @lastLogId = 0
    @originatingNetworkLogo = null
    @servicingNetworkLogo = null
    @globalNetworkLogo = '<img alt="Networks" src="/assets/networks/all.png"/>'
    @outgoingLogo = '<img alt="Networks" src="/assets/outgoing.png"/>'
    @incomingLogo = '<img alt="Networks" src="/assets/incoming.png"/>'
    @bidirectionalLogo = '<img alt="Networks" src="/assets/bidirectional.png"/>'
    @findLogo = '<img alt="Networks" src="/assets/find.png"/>'

  tripChanged: (trip) =>
    $('#' + @containerId).html('<%= image_tag('loading.gif') %>')
    @lastLogId = 0
    @originatingNetworkLogo = '<img alt="Networks" src="/assets/networks/' + trip.getOrigin() + '.png"/>'
    if trip.getServicing()?
      @servicingNetworkLogo = '<img alt="Networks" src="/assets/networks/' + trip.getServicing() + '.png"/>'
    else
      @servicingNetworkLogo = @globalNetworkLogo

  updateActiveTrip: (trip) =>
    if trip? and trip.getServicing()?
      @servicingNetworkLogo = '<img alt="Networks" src="/assets/networks/' + trip.getServicing() + '.png"/>'

  updateLog: (logList, currentTripId) =>
    if !currentTripId?
      $('#' + @containerId).html('Select a trip')
    else if logList? and logList.length > 0
      newLatest = logList[0].creation
      logs = []
      if !@latestAddedLogDate? or @tcurrentTripIdripId != currentTripId
        @tcurrentTripIdripId = currentTripId
        logs = logList
        $('#' + @containerId).html('')
      else
        for log in logList
          if Date.parse(log.creation) > Date.parse(@latestAddedLogDate)
            logs.push log
          else
            break

      if logs.length > 0
        for log in logs.reverse()
          @lastLogId++
          [id, logString] = @getLogTag(@lastLogId, log)
          $('#' + @containerId).prepend(logString)

        Prism.highlightAll()
        @latestAddedLogDate = logList[logList.length-1].creation

      @tripId = currentTripId
      @latestAddedLogDate = newLatest
    else
      $('#' + @containerId).html('No activity logged')

  getLogTagLogo: (log) =>
    logo = ''
    if log.type == 'quote'
      logo = @globalNetworkLogo
    else if log.destination == 'origin' or log.origin == 'origin'
      logo = @originatingNetworkLogo
    else if log.destination == 'servicing' or log.origin == 'servicing'
      logo = @servicingNetworkLogo

    return logo

  getLogTagDirectionIcon: (log) =>
    directionIcon = ''
    if log.type == 'get-trip-status'
      directionIcon = @bidirectionalLogo
    else if log.type == 'quote'
      directionIcon = @findLogo
    else if log.origin == 'tripthru'
      directionIcon = @outgoingLogo
    else if log.destination == 'tripthru'
      directionIcon = @incomingLogo
    return directionIcon

  getLogTag: (id, log) =>
    id =  id + 'parent-accordion'
    request = if log.messages[0].json? then log.messages[0].json else {}
    response = if log.messages.length > 1 and log.messages[log.messages.length-1].json? then log.messages[log.messages.length-1].json else undefined
    logo = @getLogTagLogo(log)
    directionIcon = @getLogTagDirectionIcon(log)
    logString = '
                            <div class="accordion-group" id="' + id + '">
                                <div class="accordion-heading">
                                    <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion">
                                        ' + log.creation.split('.')[0] + directionIcon + log.messages[0].text +  '
                                    </a>
                                    ' + logo + '
                                </div>
                                <div id="' + id + '-accordion" class="accordion-body collapse">
                                    <div class="accordion-inner">
                                              <div class="accordion-group json-inner-log">
                                                  <div class="accordion-heading">
                                                      <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-request">
                                                          Request
                                                      </a>
                                                  </div>
                                                  <div id="' + id + '-accordion-request" class="accordion-body collapse">
                                                      <div class="accordion-inner">
                                                          <pre><code class="language-javascript">' + FormatJSON(request) + '</code></pre>
                                                      </div>
                                                  </div>
                                              </div>

                          '

    i = 1
    while(i < log.messages.length - 1)
      message = log.messages[i]

      if message.json?

        logString += '
                                                    <div class="accordion-group json-inner-log">
                                                        <div class="accordion-heading">
                                                            <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-' + i + '">
                                                                ' + message.text + '
                                                            </a>
                                                        </div>
                                                        <div id="' + id + '-accordion-' + i + '" class="accordion-body collapse">
                                                            <div class="accordion-inner">
                                                                <pre><code class="language-javascript">
                                                                  Request:\n' + FormatJSON(message.json) + '
                                                                </code></pre>
                                                            </div>
                                                        </div>
                                                    </div>'
      else
        logString +='                               <div class="accordion-group simple-inner-log">
                                                        <div class="accordion-heading">
                                                            <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-' + i + '">
                                                                ' + message.text + '
                                                            </a>
                                                        </div>
                                                     </div>
                                                        '
      i++

    if response?
      logString += '
                                                <div class="accordion-group json-inner-log">
                                                    <div class="accordion-heading">
                                                        <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-response">
                                                        Response
                                                        </a>
                                                    </div>
                                                    <div id="' + id + '-accordion-response" class="accordion-body collapse">
                                                        <div class="accordion-inner">
                                                            <pre><code class="language-javascript">' + FormatJSON(response) + '</code></pre>
                                                        </div>
                                                    </div>
                                                </div>'
    logString +=                        '</div>
                                    </div>
                                </div>
                              '

    return [id, logString]

class Counter
  sequence = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0].join('\n')
  constructor: (@el)->
    @el.addClass('counter')
    @el.html(@template)
    @hundredThousandsPlaceSequence = @el.find('.sequence').eq(0)
    @tenThousandsPlaceSequence = @el.find('.sequence').eq(1)
    @thousandsPlaceSequence = @el.find('.sequence').eq(2)
    @hundredsPlaceSequence = @el.find('.sequence').eq(3)
    @tensPlaceSequence = @el.find('.sequence').eq(4)
    @onesPlaceSequence = @el.find('.sequence').eq(5)

  template: """
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
    <div class='digit'>
      <div class='sequence'>#{sequence}</div>
    </div>
  """

  countUpTo: (number)->

    n = '' + number
    n = n.split("").reverse().join("")
    hundredThousandsPlace = n.substr(5, 1)
    tenThousandsPlace = n.substr(4, 1)
    thousandsPlace = n.substr(3, 1)
    hundredsPlace = n.substr(2, 1)
    tensPlace = n.substr(1, 1)
    onesPlace = n.substr(0, 1)

    digits = n.length

    @onesPlaceSequence.css
      '-moz-transform': "translate3d(0, #{- (9 - onesPlace) * 10}%, 0)",
      '-webkit-transform': "translate3d(0, #{- (9 - onesPlace) * 10}%, 0)",
      '-ms-transform': "translate3d(0, #{- (9 - onesPlace) * 10}%, 0)"

    if digits > 1
      @tensPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @tensPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - tensPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - tensPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - tensPlace) * 10}%, 0)"
      ,0
    else
      @tensPlaceSequence.addClass('is-hidden')

    if digits > 2
      @hundredsPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @hundredsPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - hundredsPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - hundredsPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - hundredsPlace) * 10}%, 0)"
      ,0
    else
      @hundredsPlaceSequence.addClass('is-hidden')

    if digits > 3
      @thousandsPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @thousandsPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - thousandsPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - thousandsPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - thousandsPlace) * 10}%, 0)"
      ,0
    else
      @thousandsPlaceSequence.addClass('is-hidden')

    if digits > 4
      @tenThousandsPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @tenThousandsPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - tenThousandsPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - tenThousandsPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - tenThousandsPlace) * 10}%, 0)"
      ,0
    else
      @tenThousandsPlaceSequence.addClass('is-hidden')

    if digits > 5
      @hundredThousandsPlaceSequence.removeClass('is-hidden')
      setTimeout =>
        @hundredThousandsPlaceSequence.css
          '-moz-transform': "translate3d(0, #{- (9 - hundredThousandsPlace) * 10}%, 0)",
          '-webkit-transform': "translate3d(0, #{- (9 - hundredThousandsPlace) * 10}%, 0)",
          '-ms-transform': "translate3d(0, #{- (9 - hundredThousandsPlace) * 10}%, 0)"
      ,0
    else
      @hundredThousandsPlaceSequence.addClass('is-hidden')

class ActiveTripsChart

  constructor: (@chartContainerId) ->
    @totalChart = -1
    @totalCounter = -1
    @chartId = 'active-trips-dashboard'
    @counterId = 'active-trips-counter'
    @statusIndex = -1
    $('#' + @chartContainerId).html('
        <div id="' + @counterId + '"></div>
        <div id="' + @chartId + '"></div>
    ')
    @counter = new Counter($('#' + @counterId))
    @chart = Morris.Donut({
      element: @chartId,
      data: [
        {label: "New", value: 0}
        {label: "Accepted", value: 0}
        {label: "Enroute", value: 0}
        {label: "Picked up", value: 0}
      ]
      colors: [
        '#2D5AD6'
        '#24BD13'
        '#2DCBD6'
        '#E31010'
      ],
      resize: true
    })
    @updateCounter(0)

  updateStats: (stats) =>
    totalActiveStatuses = stats.new + stats.queued + stats.accepted + stats.en_route + stats.picked_up
    @updateCounter(totalActiveStatuses)
    @updateChart(totalActiveStatuses, stats)

  updateCounter: (total) =>
    if @totalCounter == total
      return
    @totalCounter = total
    @counter.countUpTo(total)

  updateStatus: (status) =>
    switch status
      when 'new'
        @statusIndex = 0
      when 'accepted'
        @statusIndex = 1
      when 'en_route'
        @statusIndex = 2
      when 'picked_up'
        @statusIndex = 3
      else
        @statusIndex = -1
    @chart.select(@statusIndex)

  updateChart: (total, statuses) =>
    if @totalChart == total
      return
    @totalChart = total
    @chart.setData([
        {label: "New", value: statuses.new + statuses.queued}
        {label: "Accepted", value: statuses.accepted}
        {label: "Enroute", value: statuses.en_route}
        {label: "Picked up", value: statuses.picked_up}
    ])
    if @statusIndex > -1
      @chart.select(@statusIndex)


class StatisticsDashboard

  constructor: (@statisticsContainerId) ->
    @completedTripsPieChartId = 'statistics-completed-trips-pie-chart'
    @completeddTripsTitle = @completedTripsPieChartId + '-title'
    @servicePieChartId = 'statistics-service-pie-chart'
    @durationPieChartId = 'statistics-duration-pie-chart'
    @mileagePieChartId = 'statistics-mileage-service-pie-chart'
    @totalCounter = 'statistics-total-trip-counter'
    @totalTripsPieChartId = 'statistics-total-trip-chart'
    @lastValues = {
      totalCounter: -1,
      totalTrips: -1,
      totalComplete: -1,
      serviceLevels: [-1, -1, -1, -1, -1],
      durations: [],
      distances: []
    }

    $('#' + @statisticsContainerId).html('
                            <!--<div class="dashboard-statistics-separator">Total</div>-->

                            <div class="panel panel-default" id="top">
                              <div class="panel-body">
                                <div class="dashboard-statistics-counter-container">
                                  <div class="dashboard-statistics-counter">
                                      <div id="' + @totalCounter + '"></div>
                                  </div>
                                </div>
                                <div  class="dashboard-statistics-pie-chart" >
                                    <div class="pie-chart" id="' + @totalTripsPieChartId + '"></div>
                                </div>
                              </div>
                            </div>
                            <!--<div class="dashboard-statistics-separator">Last 5 minutes</div>-->
                            <div class="panel panel-default" id="bottom">
                              <div class="panel-body">
                                <div class="dashboard-statistics-subpanel">
                                  <div  class="dashboard-statistics-pie-chart" >
                                      <div class="title"><div id="' + @completeddTripsTitle + '">0</div> requests</div>
                                      <div class="pie-chart" id="' + @completedTripsPieChartId + '"></div>
                                  </div>
                                  <div  class="dashboard-statistics-pie-chart" >
                                      <div class="title">Service level</div>
                                      <div class="pie-chart" id="' + @servicePieChartId + '"></div>
                                  </div>
                                  <div  class="dashboard-statistics-pie-chart" >
                                      <div class="title">Duration</div>
                                      <div class="pie-chart" id="' + @durationPieChartId + '"></div>
                                  </div>
                                  <div  class="dashboard-statistics-pie-chart" >
                                      <div class="title">Mileage</div>
                                      <div class="pie-chart" id="' + @mileagePieChartId + '"></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                        ')

    @counter = new Counter($('#' + @totalCounter))
    @totalTripsChart = Morris.Donut({
      element: @totalTripsPieChartId,
      data: [
        {label: "Complete", value: 0}
        {label: "Rejected", value: 0}
        {label: "Cancelled", value: 0}
      ]
      colors: [
        '#24BD13'
        '#2DCBD6'
        '#E31010'
      ]
      resize: true
    })
    @serviceLevelsChart = Morris.Donut({
      element: @servicePieChartId,
      data: [
        {label: "< 3 min.", value: 0}
        {label: "< 5 min.", value: 0}
        {label: "< 10 min.", value: 0}
        {label: "< 15 min.", value: 0}
        {label: "> 15 min.", value: 0}
      ]
      colors: [
        '#24BD13'
        '#84BD13'
        '#B7BD13'
        '#BD7313'
        '#BD2413'
      ]
      resize: true
    })
    @completedStatusesChart = Morris.Donut({
      element: @completedTripsPieChartId,
      data: [
        {label: "Complete", value: 0}
        {label: "Rejected", value: 0}
        {label: "Cancelled", value: 0}
      ]
      colors: [
        '#24BD13'
        '#2DCBD6'
        '#E31010'
      ]
      resize: true
    })
    @durationChart = Morris.Donut({
      element: @durationPieChartId,
      data: [
        {label: "< 3 min.", value: 0}
        {label: "< 5 min.", value: 0}
        {label: "< 10 min.", value: 0}
        {label: "< 15 min.", value: 0}
        {label: "> 15 min.", value: 0}
      ]
      colors: [
        '#49D3E8'
        '#49A6E8'
        '#4E49E8'
        '#8949E8'
        '#BB49E8'
      ]
      resize: true
    })
    @mileageChart = Morris.Donut({
      element: @mileagePieChartId,
      data: [
        {label: "< 0.2 mi", value: 0}
        {label: "< 0.4 mi", value: 0}
        {label: "< 0.6 mi.", value: 0}
        {label: "< 1 mi.", value: 0}
        {label: "> 1 mi.", value: 0}
      ]
      colors: [
        '#49D3E8'
        '#49A6E8'
        '#4E49E8'
        '#8949E8'
        '#BB49E8'
      ]
      resize: true
    })
    @updateCounter(0)

  updateHistoricStats: (stats) =>
    statuses = {
      completed: 0,
      rejected: 0,
      cancelled: 0
    }
    for stat in stats
      if stat.status == 'completed'
        statuses.completed += stat.count
      else if stat.status == 'rejected'
        statuses.rejected += stat.count
      else if stat.status == 'cancelled'
        statuses.cancelled += stats.count
    total = statuses.completed + statuses.rejected + statuses.cancelled
    @updateCounter(total)
    @updateTotalTrips(total, statuses)

  updateStats: (stats) =>
    totalCompleteStatuses = stats.completed + stats.rejected + stats.cancelled
    @updateCompleteTrips(totalCompleteStatuses, stats)
    @updateServiceLevels(stats.serviceLevels)
    if stats.durations?
      @updateDurations(stats.durations)
    if stats.distances?
      @updateDistances(stats.distances)

  updateCounter: (total) =>
    if @lastValues.totalCounter != total
      @lastValues.totalCounter = total
      @counter.countUpTo(total)

  updateTotalTrips: (total, statuses) =>
    if @lastValues.totalTrips == total
      return
    @lastValues.totalTrips = total
    @totalTripsChart.setData([
      {label: "Complete", value: statuses.completed}
      {label: "Rejected", value: statuses.rejected}
      {label: "Cancelled", value: statuses.cancelled}
    ])

  updateServiceLevels: (serviceLevels) =>
    hasChanged = false
    for i in [0..@lastValues.serviceLevels.length]
      if @lastValues.serviceLevels[i] != serviceLevels[i]
        hasChanged = true
    if !hasChanged
      return
    @lastValues.serviceLevels = serviceLevels
    @serviceLevelsChart.setData([
      {label: "< 3 min.", value: serviceLevels[0]}
      {label: "< 5 min.", value: serviceLevels[1]}
      {label: "< 10 min.", value: serviceLevels[2]}
      {label: "< 15 min.", value: serviceLevels[3]}
      {label: "> 15 min.", value: serviceLevels[4]}
    ])

  updateCompleteTrips: (total, statuses) =>
    if @lastValues.totalComplete == total
      return

    @lastValues.totalComplete = total
    $('#' + @completeddTripsTitle).fadeOut().html(total).fadeIn()
    @completedStatusesChart.setData([
      {label: "Complete", value: statuses.completed}
      {label: "Rejected", value: statuses.rejected}
      {label: "Cancelled", value: statuses.cancelled}
    ])

  updateDurations: (durations) =>
    hasChanged = false
    data = []
    for duration in durations
      data.push({ label: duration.name , value: duration.value })

    @lastValues.durations = durations
    @durationChart.setData data

  updateDistances: (distances) =>
    hasChanged = false
    data = []
    for distance in distances
      data.push({ label: distance.name , value: distance.value })

    @lastValues.distances = distances
    @mileageChart.setData data


class DashboardManager

  constructor: (@gateway, @statusSelectorContainerId, @listeners) ->
    @tripsById = {}
    @activeTrip = null
    @selectedStatus = $('#' + @statusSelectorContainerId + ' option:selected').val()
    @updatingStats = false
    @updatingHistoricStats = false
    @updatingTrips = false
    @updatingActiveTrip = false
    @updatingLogs = false
    @activeTripCompleted = false
    @queryFilter = {}
    if $('#getUserRole').html() isnt 'admin' and $('#getUserRole').html() isnt 'demo'
      @queryFilter.servicingNetworkId = $('#getUserId').html()
      @queryFilter.originatingNetworkId = $('#getUserId').html()

    $('#' + @statusSelectorContainerId).change =>
      @selectedStatus = $('#' + @statusSelectorContainerId + ' option:selected').val()
      @updateStatus()
      @update()

  update: =>
    if not  @updatingStats
      @updatingStats = true
      @gateway.getStats(@updateStats)

    if not  @updatingHistoricStats
      @updatingHistoricStats = true
      @gateway.getHistoricStats(@queryFilter, @updateHistoricStats)

    if not @updatingTrips
      @updatingTrips = true
      status = if @selectedStatus != 'All' then @selectedStatus else null
      @gateway.getActiveTrips(status, @updateTrips)

    if not @updatingActiveTrip and not @activeTripCompleted
      @updatingActiveTrip = true
      if @activeTrip?
        @gateway.getTripStatus(@activeTrip.getId(), @updateActiveTrip)
      else
        @updateActiveTrip(null)

    if not @updatingLogs
      if @activeTrip?
        @updatingLogs = true
        @gateway.getLog(@activeTrip.getId(), @updateLogs)
      else
        @updateLogs(null)

  updateStats: (data) =>
    if data?
      for listener in @listeners
        if typeof listener.updateStats is 'function'
          try
            listener.updateStats(data)
          catch error
            console.error listener + ' updateStats failed: ' + error
    @updatingStats = false

  updateHistoricStats: (data) =>
    if data?
      for listener in @listeners
        if typeof listener.updateHistoricStats is 'function'
          try
            listener.updateHistoricStats(data)
          catch error
            console.error listener + ' updateHistoricStats failed: ' + error
    @updatingHistoricStats = false

  cleanMap: () =>
    for listener in @listeners
      if listener instanceof TripTracker
        listener.cleanMap()

  updateTrips: (data) =>
    if data?
      tripsIds = []
      for i in [0...data.trips.length]
        trip = data.trips[i]
        if trip.id.indexOf('web') > -1
          data.trips = moveArray(data.trips, i, data.trips.length-1)

      for newTrip in data.trips
        tripsIds.push newTrip.id
        if newTrip.id not of @tripsById
          @processTrip(newTrip)

      for id, trip of @tripsById
        if id not in tripsIds
          delete @tripsById[id]

      for listener in @listeners
        if typeof listener.updateTrips is 'function'
          try
            listener.updateTrips(@tripsById)
          catch error
            console.error listener + ' updateTrips failed: ' + error
    @updatingTrips = false

  processTrip: (newTrip) =>
    driverId = null
    driverLocation = null
    driverInitialLocation = null
    if newTrip.driver?
      driverId = newTrip.driver.name
      driverLocation = new Location(newTrip.driver.location.lat, newTrip.driver.location.lng)
      if newTrip.driver.initialLocation?
        driverInitialLocation =  new Location(newTrip.driver.initialLocation.lat, newTrip.driver.initialLocation.lng)
    trip = new Trip(
      newTrip.id
      newTrip.customer.name
      newTrip.pickupTime
      new Location(newTrip.pickupLocation.lat, newTrip.pickupLocation.lng)
      if newTrip.originatingNetwork then newTrip.originatingNetwork.id else null
      if newTrip.servicingNetwork then newTrip.servicingNetwork.id else null
      newTrip.status
      newTrip.eta
      newTrip.price
      driverId
      driverLocation
      new Location(newTrip.dropoffLocation.lat, newTrip.dropoffLocation.lng)
      driverInitialLocation
    )
    @tripsById[trip.getId()] = trip
    $(document).off('click', '#' + trip.getContainerId()).on 'click', '#' + trip.getContainerId(),  =>
      @activeTripCompleted = false
      @toggleActiveTrip(newTrip.id)


  toggleActiveTrip: (tripId) =>
    trip = @tripsById[tripId]
    if not @activeTrip? or !trip? or @activeTrip.id != trip.id
      @activeTrip = trip
      @gateway.getTripStatus(@activeTrip.getId(), (data) =>
        @updatingActiveTrip = true
        @updateActiveTrip(data)
        @update())
    else
      @activeTrip = null
      @cleanMap()

    for listener in @listeners
      if typeof listener.tripChanged is 'function'
        try
          listener.tripChanged(@activeTrip)
        catch error
          console.error listener + ' tripChanged failed: ' + error


  updateActiveTrip: (data) =>
    if data?
      if !@activeTrip? or (data.driver? and data.driver.location? and !@activeTrip.getDriverLocation()?) or
        (data.driver? and data.driver.location? and
          @activeTrip.getDriverLocation()? and
          data.driver.location.lat != @activeTrip.getDriverLocation().lat and
          data.driver.location.lng != @activeTrip.getDriverLocation().lng)
        driverLocation = new Location(data.driver.location.lat, data.driver.location.lng)
      else
        driverLocation = @activeTrip.getDriverLocation()

      if !@activeTrip? or (data.routeEnrouteLocation and !@activeTrip.getDriverInitialLocation()?)
        driverInitialLocation = new Location(data.routeEnrouteLocation.lat, data.routeEnrouteLocation.lng)
      else
        driverInitialLocation = @activeTrip.getDriverInitialLocation()

      if @activeTrip != null
        @activeTrip.update(
          if data.status? then data.status else @activeTrip.getStatus()
          if data.servicingNetwork? then data.servicingNetwork.id else @activeTrip.getServicing()
          if data.driver? then data.driver.name else ''
          driverLocation
          driverInitialLocation
          if data.routeEnrouteLocation then data.routeEnrouteLocation else (driverInitialLocation || driverLocation)
          data.pickupLocation
        )
      @activeTripCompleted = data.status == 'completed' or data.status == 'cancelled'
    for listener in @listeners
      if typeof listener.updateActiveTrip is 'function'
        try
          listener.updateActiveTrip(@activeTrip)
        catch error
          console.error listener.toString() + ' updateActiveTrip failed: ' + error

    @updatingActiveTrip = false

  updateLogs: (data) =>
    logs = if data? then data.logs.reverse() else null
    tripId = if @activeTrip? then @activeTrip.getId() else null
    for listener in @listeners
      if typeof listener.updateLog is 'function'
        try
          listener.updateLog(logs, tripId)
        catch error
          console.error listener + ' updateLogs failed: ' + error
    @updatingLogs = false

  updateStatus: () =>
    status = if @selectedStatus != 'All' then @selectedStatus else null
    for listener in @listeners
      if typeof listener.updateStatus is 'function'
        try
          listener.updateStatus(status)
        catch error
          console.error listener + ' updateStatus failed: ' + error

`
$(document).ready(function(){
    var url = window.location
    $('.list-group-item').filter( function(){
        return this.href == url;
    }).addClass('active');
    });
`

$('.developer.dashboard').ready ->
  reset()
  dashboardManager = new DashboardManager(
    new TripThru($('#access_token').val())
    'trip-status-selector'
    [
      new ActiveTripsChart('active-trips-chart')
      new TripList('trips-panel')
      new StatisticsDashboard('statistics-gauges-container')
      new TripTracker('tracking-trip-info', 'tracking-map-container')
      new ActivityLog('activity-log')
    ]
  )
  update = ->
    dashboardManager.update()

  update()
  window.tripthruinterval = setInterval ->
    update()
  , 5000

  return