########## DASHBOARD #########

class ActiveTripsChart

  constructor: (chartContainer) ->
    @chart = new JustGage({
      id: chartContainer
      value: 0
      min: 0
      max: 10
      label: 'trips'
      relativeGaugeSize: true
    })
    @activeTripsCount = []
    @max = 0

  updateStats: (stats) =>
    @update(stats.activeTrips, stats.activeTrips)

  update: (activeTrips, selectedTypeActiveTrips) =>
    if not activeTrips? or not selectedTypeActiveTrips?
      console.error('Wrong parameters')
      return

    @max = if activeTrips > @max then activeTrips else @max
    upperLimit = if @max < 10 then 10 else Math.ceil(@max * 1.4)

    @chart.refresh(selectedTypeActiveTrips, upperLimit)


class TripList

  constructor: (@containerId) ->
    @tripsInListById = {}
    @currentStatus = null
    @statusChanged = false
    $('#trips').scroll @loadAddressIfVisible
    $('#main').scroll @loadAddressIfVisible
    @loadingAddresses = false

  loadAddressIfVisible: () =>
    if !@loadingAddresses
      @loadingAddresses = true
      for id, trip of @tripsInListById
        if $('#' + trip.getContainerId())? and $('#' + trip.getContainerId()).visible() and $('#' + trip.getContainerId()).find('.triplist-trip-pickup').html() == 'loading...'
          @setAddress(trip)
      @loadingAddresses = false

  setAddress: (trip) =>
    if !trip.loadingAddress
      address = trip.getPickupLocation().getAddress()
      address = if address? then address else 'loading...'
      $('#' + trip.getContainerId()).find('.triplist-trip-pickup').fadeOut().html(address).fadeIn()
      if address == 'loading...'
        setTimeout(() =>
            @setAddress(trip)
        , 500);
      else
        trip.loadingAddress = true

  tripChanged: (trip) =>
    if not trip?
      $('#' + @containerId + '>div.active').removeClass('active')
    else
      if not $('#' + trip.getContainerId()).hasClass('active')
        $('#' + @containerId + '>div.active').removeClass('active')
        $("#" + trip.getContainerId()).addClass("active")

  updateStatus: (status) =>
    if @currentStatus != status
      @statusChanged = true
      if $('#triplist-loading').length <= 0
        $('#' + @containerId).prepend('<span id="triplist-loading"><%= image_tag('loading.gif') %></span>')
    @currentStatus = status

  updateTrips: (tripsById) =>
    if @statusChanged
      @statusChanged = false
      $('#' + @containerId).html('')
      for id, trip of tripsById
        @addTrip(trip)
    else
      for id, trip of tripsById
        if id not of @tripsInListById
          @addTrip(trip)
      for id, trip of @tripsInListById
        if id not of tripsById
          @removeTrip(trip)
        else
          @updateTrip(trip)

  updateTrip: (trip) =>

  addTrip: (trip) =>
    @tripsInListById[trip.getId()] = trip
    if trip.id.indexOf('web') > -1
      $('#' + @containerId).prepend @getTripTag(trip)
    else
      $('#' + @containerId).append @getTripTag(trip)
    if $('#' + trip.getContainerId()).visible()
      @setAddress(trip)

  removeTrip: (trip) =>
    delete @tripsInListById[trip.getId()]
    $('#' + trip.getContainerId()).remove()

  getTripTag: (trip) =>
    farmedInLogo = '<img alt="' + trip.getOrigin() + '" src="/assets/networks/' + trip.getOrigin() + '.png"/>'
    '
                <div class="well trip" id="' + trip.getContainerId() + '">
                    <div>' + farmedInLogo + '<h1>' + trip.getId() + '</h1></div>
                    <p><span>Passenger:</span> <i>' + trip.getPassengerName() + '</i></p>
                    <p><span>Time:</span> <i>' + trip.getPickupTime().split('.')[0] + '</i></p>
                    <p><span>Pickup:</span> <i class="triplist-trip-pickup">loading...</i></p>
                </div>
            '

class TripTracker

  setZoomEvent: () =>
    google.maps.event.addListener @map, 'zoom_changed', () =>
      zoom = @map.getZoom()
      if zoom != @defaultCleanMapZoom and zoom != @defaultTrackingZoom
        @userChangedZoom = true

  constructor: (@tripInfoContainerId, @mapContainer) ->
    @passengerMarker = null
    @destinationMarker = null
    @driverMarker = null
    @initialMarker = null
    @tripChange = false
    @userChangedZoom = false
    @defaultCleanMapZoom = 4
    @defaultTrackingZoom = 15
    @mapOptions =
      center: if typeof google isnt "undefined" then new google.maps.LatLng(40.32004,-98.9290212) else null
      zoom: @defaultCleanMapZoom
      mapTypeControl: false
      mapTypeId: google.maps.MapTypeId.ROADMAP

    @map = if typeof google isnt "undefined" then new google.maps.Map(document.getElementById("map-canvas"), @mapOptions) else null
    if @map?
      @setZoomEvent()

    rendererOptions =
        preserveViewport: true
        suppressMarkers: true
        polylineOptions:
            strokeColor: "#8B0000"
            strokeOpacity: 1
            strokeWeight: 5
    rendererOptions2 =
        preserveViewport: true
        suppressMarkers: true
        polylineOptions:
            strokeColor: "#008000"
            strokeOpacity: 1
            strokeWeight: 5

    @directionsDisplay = if typeof google isnt "undefined" then new google.maps.DirectionsRenderer(rendererOptions) else null
    @directionsDisplay2 = if typeof google isnt "undefined" then new google.maps.DirectionsRenderer(rendererOptions2) else null
    @directionsService = if typeof google isnt "undefined" then new google.maps.DirectionsService() else null
    @driverPreviousLocation = null
    @setTripInfoBool = false
    @tripId = null
    @trip = null
    @passengerRatingChartId = 'passenger-rating'
    @driverRatingChartId = 'driver-rating'
    @latestAddedLogDate = null
    @tcurrentTripIdripId = null
    @pulseQueue = []
    setInterval(() =>
      if @pulseQueue.length > 0
        for i in [0..@pulseQueue.length]
          pulse = @pulseQueue[i]
          if pulse? and !pulse.animating
            do (pulse) =>
              delay = if i > 0 and @pulseQueue[i-1].type == 'update-trip-status' then 1000 else 0
              pulse.animating = true
              setTimeout(() =>
                @animate(pulse)
                @pulseQueue.shift()
              , delay)
    , 500)

  cleanMap: () =>
    @passengerMarker.setMap null  if @passengerMarker?
    @driverMarker.setMap null  if @driverMarker?
    @destinationMarker.setMap null  if @destinationMarker?
    @initialMarker.setMap null  if @initialMarker?
    @directionsDisplay.setMap null if @directionsDisplay?
    @directionsDisplay2.setMap null if @directionsDisplay2?
    @map.panTo(new google.maps.LatLng(40.32004,-98.9290212))
    @map.setZoom @defaultCleanMapZoom

  tripChanged: (trip) =>
    @tripChange = true
    @userChangedZoom = false
    @tripId = null
    @driverPreviousLocation = null
    @updateTripInfo(trip)

  updateActiveTrip: (trip) =>
    if trip?
      @queuePulse('', '', 'driver-update')
    @updateTripInfo(trip)
    if typeof @directionsDisplay isnt "undefined" and typeof @directionsDisplay2 isnt "undefined" and typeof @directionsService isnt "undefined"
        @updateMap(trip)
    if trip?
      @tripId = trip.getId()
      @trip = trip
    @tripChange = false

  updateLog: (logList, currentTripId) =>
    if currentTripId? and logList? and logList.length > 0
      newLatest = logList[0].creation
      logs = []
      if !@latestAddedLogDate? or @tcurrentTripIdripId != currentTripId
        @tcurrentTripIdripId = currentTripId
      else
        for log in logList
          if Date.parse(log.creation) > Date.parse(@latestAddedLogDate)
            logs.push log
          else
            break

      if logs.length > 0
        logs = logs.reverse()
        for log in logs
          if log.origin? and log.destination? and log.type?
            @queuePulse(log.origin, log.destination, log.type, log.status)
        @latestAddedLogDate = logList[logList.length-1].creation

      @latestAddedLogDate = newLatest

  queuePulse: (origin, destination, type, status) =>
    message = null
    if type == 'driver-update'
      message = {type: type}
    else
      if origin == 'origin'
        message = {direction: 'origin-tripthru'}
      else if origin == 'servicing'
        message = {direction: 'servicing-tripthru'}
      else if origin == 'tripthru' and destination == 'origin'
        message = {direction: 'tripthru-origin'}
      else if origin == 'tripthru' and destination == 'servicing'
        message = {direction: 'tripthru-servicing'}
      message.type = type
      message.status = status
    @pulseQueue.push message

  animate: (pulse) =>
    color = if pulse.status? then pulse.status else 'dark-blue'
    if pulse.type == 'driver-update'
      @toggleAnimation('pulse-passenger-origin',    'quick', 'right', 'dark-blue', 0)
      @toggleAnimation('pulse-origin-tripthru',     'quick', 'right', 'dark-blue', 180)
      @toggleAnimation('pulse-tripthru-servicing',  'quick', 'right', 'dark-blue', 360)
      @toggleAnimation('pulse-servicing-driver',    'quick', 'right', 'dark-blue', 540)
      @toggleAnimation('pulse-servicing-driver',    'quick', 'left', 'dark-blue', 720)
      @toggleAnimation('pulse-tripthru-servicing',  'quick', 'left', 'dark-blue', 900)
      @toggleAnimation('pulse-origin-tripthru',     'quick', 'left', 'dark-blue', 1080)
      @toggleAnimation('pulse-passenger-origin',    'quick', 'left', 'dark-blue', 1260)
    else if pulse.direction == 'origin-tripthru'
      if pulse.type == 'update-trip-status'
        @toggleAnimation('pulse-passenger-origin',  'normal', 'right', color, 0)
      @toggleAnimation('pulse-origin-tripthru',     'normal', 'right', color, 380)
    else if pulse.direction == 'servicing-tripthru'
      if pulse.type == 'update-trip-status'
        @toggleAnimation('pulse-servicing-driver',  'normal', 'left', color, 0)
      @toggleAnimation('pulse-tripthru-servicing',  'normal', 'left', color, 380)
    else if pulse.direction == 'tripthru-origin'
      @toggleAnimation('pulse-origin-tripthru',     'normal', 'left', color, 0)
      if pulse.type == 'update-trip-status'
        @toggleAnimation('pulse-passenger-origin',  'normal', 'left', color, 380)
    else if pulse.direction == 'tripthru-servicing'
      @toggleAnimation('pulse-tripthru-servicing',  'normal', 'right', color, 0)
      if pulse.type == 'update-trip-status'
        @toggleAnimation('pulse-servicing-driver',  'normal', 'right', color, 380)

  toggleAnimation: (containerId, type, direction, color, delay) =>
    animation = if type == 'normal' then 'pulse-' else 'pulse-quick-'
    animation += direction
    duration = if type == 'normal' then 350 else 100
    id = guid()
    element = '<div id="' + id + '" class="orb ' + color + '-orb ' + animation + '"></div>'
    setTimeout(() =>
        $('#' + containerId).append(element)
        setTimeout(() =>
          $('#' + id).fadeOut(100, () => $(this).remove());
        , duration)
    , delay)

  updateTripInfo: (trip) =>
    if trip?
      tripPickupLocation = trip.getPickupLocation().getAddress()
      tripDropoffLocation = trip.getDropoffLocation().getAddress()
      tripDriverName = trip.getDriverName()
      tripDriverLocation = if trip.getDriverLocation()? then trip.getDriverLocation().getAddress() else null
      if !tripDriverLocation? and @driverPreviousLocation?
        tripDriverLocation = @driverPreviousLocation.getAddress()

      pickupLocation = if tripPickupLocation? then tripPickupLocation else 'loading...'
      dropoffLocation = if tripDropoffLocation? then tripDropoffLocation else 'loading...'
      driverLocation = if tripDriverLocation? then ' @ ' + tripDriverLocation else 'None'
      driver = if tripDriverName? then tripDriverName + driverLocation else 'None'
      servicing = if trip.getServicing()? then trip.getServicing() else ''
      farmedInLogo = '<img alt="' + trip.getOrigin() + '" src="/assets/networks/' + trip.getOrigin() + '.png"/>'
      farmedOutLogo = '<img alt="Netowrks" src="/assets/networks/all.png"/>'
      driverLogo = ''
      if trip.getServicing()
        farmedOutLogo = '<img alt="' + trip.getServicing() + '" src="/assets/networks/' + trip.getServicing() + '.png"/>'
        driverLogo = '<div class="pulse-line" id="pulse-servicing-driver"></div>
                      <div class="icon"><img alt="Driver" src="/assets/driver.png"/></div>'
      if $('#trip-id-tag').html() != trip.getId()
        $('#' + @tripInfoContainerId).html(
            '<div>
                <div id="icons">
                  <div class="icon"><img alt="Passenger" src="/assets/passenger.png"/></div>
                  <div class="pulse-line" id="pulse-passenger-origin"></div>
                  <div class="icon">' + farmedInLogo + '</div>
                  <div class="pulse-line" id="pulse-origin-tripthru"></div>
                  <div id="tripthru"><img alt="TripThru" src="/assets/tripthrulogo.png"/></div>
                  <div class="pulse-line" id="pulse-tripthru-servicing"></div>
                  <div class="icon" id="farmed-out-logo">' + farmedOutLogo + '</div>
                  ' + driverLogo + '
                </div>
                <div><span>Id: </span><p id="trip-id-tag">' + trip.getId() + '</p></div>
                <div><span>Status: </span><p id="status-tag">' + trip.getStatus() + '</p></div>
                <div><span>Passenger: </span><p>' + trip.getPassengerName() + '  </p>
                   <div class="rating-container">
                        <div class="flexible-stars" data-isLocked="yes"
                                data-init="0" id="' + @passengerRatingChartId + '"></div>
                   </div>
                </div>
                <div><span>Time: </span><p>' + trip.getPickupTime().split('.')[0] + '</p></div>
                <div><span>Pickup: </span><p id="pickup-tag">' + pickupLocation + '</p></div>
                <div><span>Dropoff: </span><p id="dropoff-tag">' + dropoffLocation + '</p></div>
                <div>
                  <span>Farmed-In: </span><p>' + trip.getOrigin() + ' - </p>
                  <span>Farmed-Out: </span><p id="farmed-out-tag">' + servicing + '</p>
                </div>
                <div><span>Driver: </span><p id="driver-tag">' + driver + '  </p>
                    <div class="rating-container">
                      <div class="flexible-stars" data-isLocked="yes"
                                 data-init="0" id="' + @driverRatingChartId + '"></div>
                    </div>
                </div>
             </div>
            '
        )

        $('#' + @passengerRatingChartId).html('')
        $('#' + @passengerRatingChartId).flexibleStars({
          init: trip.getPassengerRating()
        })

        if trip.getDriverName()?
          $('#' + @driverRatingChartId).html('')
          $('#' + @driverRatingChartId).flexibleStars({
            init: trip.getDriverRating()
          })
      else if @trip
        if trip.getServicing() != @trip.getServicing() and !$('#pulse-servicing-driver')?
          $('#farmed-out-logo').hide().html(farmedOutLogo).fadeIn(500)
          $('#icons').append(driverLogo).hide().fadeIn(500)
          $('#farmed-out-tag').append(servicing)
        $('#driver-tag').html(driver)
        $('#status-tag').html(trip.getStatus())
        $('#pickup-tag').html(pickupLocation)
        $('#dropoff-tag').html(dropoffLocation)

    else
      $('#' + @tripInfoContainerId).html('<h1>Select a trip</h1>')

  updateMap: (trip) =>
    return  if @setTripInfoBool is true or !trip? or !trip.driverLocation?
    @setTripInfoBool = true
    if not trip? or @tripId isnt trip.getId()
      @passengerMarker.setMap null  if @passengerMarker?
      @driverMarker.setMap null  if @driverMarker?
      @destinationMarker.setMap null  if @destinationMarker?
      @initialMarker.setMap null  if @initialMarker?
      @driverPreviousLocation = null
      @tripId = (if trip? then trip.getId() else "")
      if @directionsDisplay?
        @directionsDisplay.setMap null
      if @directionsDisplay2?
        @directionsDisplay2.setMap null
    unless trip?
      @setTripInfoBool = false
      return
    if not @driverPreviousLocation? or trip.driverLocation.lat isnt @driverPreviousLocation.lat or trip.driverLocation.lng isnt @driverPreviousLocation.lng
      @driverPreviousLocation = trip.driverLocation
      pickupLocation = trip.pickupLocation
      driverLocation = trip.driverLocation
      dropoffLocation = trip.dropoffLocation
      driverInitialLocation = trip.driverInitialLocation
      if pickupLocation or driverLocation
        passengerLocation = null
        driverCurrentLocation = null
        destinationLocation = null
        initialLocation = null
        if dropoffLocation
          destinationLocation = new google.maps.LatLng(dropoffLocation.lat, dropoffLocation.lng)
          if @destinationMarker?
            @destinationMarker.setMap @map
            @destinationMarker.setPosition destinationLocation
        if pickupLocation
          passengerLocation = new google.maps.LatLng(pickupLocation.lat, pickupLocation.lng)
          if @passengerMarker?
            @passengerMarker.setMap @map
            @passengerMarker.setPosition passengerLocation
        if driverLocation
          driverCurrentLocation = new google.maps.LatLng(driverLocation.lat, driverLocation.lng)
          if @driverMarker?
            @driverMarker.setMap @map
            @driverMarker.setPosition driverCurrentLocation
        if driverInitialLocation
          initialLocation = new google.maps.LatLng(driverInitialLocation.lat, driverInitialLocation.lng)
          if @initialMarker?
            @initialMarker.setMap @map
            @initialMarker.setPosition driverInitialLocation
        unless @map?
          @mapOptions =
            center: (if driverCurrentLocation? then driverCurrentLocation else passengerLocation)
            zoom: @defaultTrackingZoom
            mapTypeControl: false
            mapTypeId: google.maps.MapTypeId.ROADMAP

          @map = new google.maps.Map(document.getElementById("map-canvas"), @mapOptions)
          @setZoomEvent()
        if passengerLocation? and not @passengerMarker?
          @passengerMarker = new google.maps.Marker(
            position: passengerLocation
            map: @map
            icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=home|FFFF00"
            title: "Pickup"
          )
        if initialLocation? and not @initialMarker?
          @initialMarker = new google.maps.Marker(
            position: driverInitialLocation
            map: @map
            icon: "http://www.mricons.com/store/png/113267_25418_16_flag_icon.png"
            title: "Initial"
          )
        if driverLocation? and not @driverMarker?
          @driverMarker = new google.maps.Marker(
            position: driverCurrentLocation
            map: @map
            icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=taxi|FFFF00"
            title: "Driver"
          )
        if destinationLocation? and not @destinationMarker?
          @destinationMarker = new google.maps.Marker(
            position: dropoffLocation
            map: @map
            icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=cafe|FFFF00"
            title: "Destination"
          )
        if driverLocation? and pickupLocation? and dropoffLocation?
          routes = []
          switch trip.status
            when "enroute"
              routes = [
                origin: initialLocation
                destination: driverCurrentLocation
              ]
            when "pickedup"
              routes = [
                origin: initialLocation
                destination: passengerLocation
              ,
                origin: passengerLocation
                destination: driverCurrentLocation
              ]
            when "complete"
              routes = [
                origin: initialLocation
                destination: passengerLocation
              ,
                origin: passengerLocation
                destination: destinationLocation
              ]
          boleanFirst = true
          routes.forEach (route) =>
            request =
              origin: route.origin
              destination: route.destination
              travelMode: google.maps.TravelMode.DRIVING
            if boleanFirst
                @directionsDisplay.setMap @map
            else
                @directionsDisplay2.setMap @map
            if boleanFirst
              @directionsService.route request, (result, status) =>
                  @directionsDisplay.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay?
              boleanFirst = false
            else
              @directionsService.route request, (result, status) =>
                  @directionsDisplay2.setDirections result  if status is google.maps.DirectionsStatus.OK and @directionsDisplay2?
        if @tripChange or !@userChangedZoom
          @map.setCenter (if driverCurrentLocation? then driverCurrentLocation else passengerLocation)
          @map.setZoom @defaultTrackingZoom
    @setTripInfoBool = false

class ActivityLog

  constructor: (@containerId) ->
    @tripId = ''
    @latestAddedLogDate = null
    @tcurrentTripIdripId = null
    @lastLogId = 0

  tripChanged: (trip) =>
    $('#' + @containerId).html('<%= image_tag('loading.gif') %>')
    @lastLogId = 0

  updateLog: (logList, currentTripId) =>
    if !currentTripId?
      $('#' + @containerId).html('Select a trip')
    else if logList? and logList.length > 0
      newLatest = logList[0].creation
      logs = []
      if !@latestAddedLogDate? or @tcurrentTripIdripId != currentTripId
        @tcurrentTripIdripId = currentTripId
        logs = logList
        $('#' + @containerId).html('')
      else
        for log in logList
          if Date.parse(log.creation) > Date.parse(@latestAddedLogDate)
            logs.push log
          else
            break

      if logs.length > 0
        for log in logs.reverse()
          @lastLogId++
          [id, logString] = @getLogTag(@lastLogId, log)
          $('#' + @containerId).prepend(logString)

        Prism.highlightAll()
        @latestAddedLogDate = logList[logList.length-1].creation

      @tripId = currentTripId
      @latestAddedLogDate = newLatest
    else
      $('#' + @containerId).html('No activity logged')

  getLogTag: (id, log) =>
    id =  id + 'parent-accordion'
    request = if log.messages[0].json? then log.messages[0].json else {}
    response = if log.messages.length > 1 and log.messages[log.messages.length-1].json? then log.messages[log.messages.length-1].json else undefined
    logString = '
                            <div class="accordion-group" id="' + id + '">
                                <div class="accordion-heading">
                                    <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion">
                                        ' + log.creation.split('.')[0] + ' | ' + log.messages[0].text +  '
                                    </a>
                                </div>
                                <div id="' + id + '-accordion" class="accordion-body collapse">
                                    <div class="accordion-inner">
                                              <div class="accordion-group json-inner-log">
                                                  <div class="accordion-heading">
                                                      <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-request">
                                                          Request
                                                      </a>
                                                  </div>
                                                  <div id="' + id + '-accordion-request" class="accordion-body collapse">
                                                      <div class="accordion-inner">
                                                          <pre><code class="language-javascript">' + FormatJSON(request) + '</code></pre>
                                                      </div>
                                                  </div>
                                              </div>

                          '

    i = 1
    while(i < log.messages.length - 1)
      message = log.messages[i]

      if message.json?

        logString += '
                                                    <div class="accordion-group json-inner-log">
                                                        <div class="accordion-heading">
                                                            <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-' + i + '">
                                                                ' + message.text + '
                                                            </a>
                                                        </div>
                                                        <div id="' + id + '-accordion-' + i + '" class="accordion-body collapse">
                                                            <div class="accordion-inner">
                                                                <pre><code class="language-javascript">
                                                                  Request:\n' + FormatJSON(message.json) + '
                                                                </code></pre>
                                                            </div>
                                                        </div>
                                                    </div>'
      else
        logString +='                               <div class="accordion-group simple-inner-log">
                                                        <div class="accordion-heading">
                                                            <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-' + i + '">
                                                                ' + message.text + '
                                                            </a>
                                                        </div>
                                                     </div>
                                                        '
      i++

    if response?
      logString += '
                                                <div class="accordion-group json-inner-log">
                                                    <div class="accordion-heading">
                                                        <a class="accordion-toggle" data-parent="#accordion" data-toggle="collapse" href="#' + id + '-accordion-response">
                                                        Response
                                                        </a>
                                                    </div>
                                                    <div id="' + id + '-accordion-response" class="accordion-body collapse">
                                                        <div class="accordion-inner">
                                                            <pre><code class="language-javascript">' + FormatJSON(response) + '</code></pre>
                                                        </div>
                                                    </div>
                                                </div>'
    logString +=                        '</div>
                                    </div>
                                </div>
                              '

    return [id, logString]

class StatisticsDashboard

  constructor: (@statisticsContainerId, @ratingsContainerId) ->
    @activeTripsPieChartId = 'trips-pie-chart'
    @activeTripsPieChartTitleId = @activeTripsPieChartId + '-title'
    @completeTripsPieChartId = 'complete-trips-pie-chart'
    @servicePieChartId = 'service-pie-chart'
    @driversRatingChartId = 'drivers-rating-chart'
    @passengersRatingChartId = 'passengers-rating-chart'
    @lastValues = {
      totalActive: -1,
      totalComplete: -1,
      serviceLevels: [-1, -1, -1, -1, -1]
    }

    $('#' + @statisticsContainerId).html('
                            <div  class="dashboard-statistics-pie-chart" >
                                <div class="title" id="' + @activeTripsPieChartTitleId + '">0 Trips</div>
                                <div class="pie-chart" id="' + @activeTripsPieChartId + '"></div>
                            </div>
                            <div  class="dashboard-statistics-pie-chart" >
                                <div class="title">Completed</div>
                                <div class="pie-chart" id="' + @completeTripsPieChartId + '"></div>
                            </div>
                            <div  class="dashboard-statistics-pie-chart" >
                                <div class="title">Service level</div>
                                <div class="pie-chart" id="' + @servicePieChartId + '"></div>
                            </div>
                        ')

    $('#' + @ratingsContainerId).html('
                            <div id="dashboard-ratings-container">
                                <div  class="dashboard-statistics-rating" >
                                    <div class="title">Drivers</div>
                                    <div class="flexible-stars" data-isLocked="yes"
                                     data-init="0"  id="' + @driversRatingChartId + '"></div>
                                </div>
                                <div  class="dashboard-statistics-rating" >
                                    <div class="title">Passengers</div>
                                    <div class="flexible-stars" data-isLocked="yes"
                                        data-init="0"  id="' + @passengersRatingChartId + '"></div>
                                </div>
                            </div>
                        ')

  updateStats: (stats) =>
    last24Hrs = new Date()
    last24Hrs.setDate(last24Hrs.getDate()-1)
    partnerId = ''
    if $('#getUserRole').html() isnt 'admin' and $('#getUserRole').html() isnt 'demo'
        partnerId = '&servicingNetworkId=' + $('#getUserId').html() + '&originatingNetworkId=' + $('#getUserId').html()

    totalActiveStatuses = stats.new + stats.dispatched + stats.enroute + stats.pickedup
    @updateActiveStatuses(totalActiveStatuses, stats)
    @updateServiceLevels(stats.serviceLevels)
    @updateRatings(80, 95)
    $.get '/mongo_db/trips_count?startDate=' + last24Hrs + partnerId + '&interval=day&bucketSize=1&by_status=true', (data) =>
        statuses = {
          complete: 0,
          rejected: 0,
          cancelled: 0
        }
        for entry in data
          statuses[entry._id.status] += entry.count
        total = statuses.complete + statuses.rejected + statuses.cancelled
        @updateCompleteStatuses(total, statuses)

  updateServiceLevels: (serviceLevels) =>
    hasChanged = false
    for i in [0..@lastValues.serviceLevels.length]
      if @lastValues.serviceLevels[i] != serviceLevels[i]
        hasChanged = true
    if !hasChanged
      return

    @lastValues.serviceLevels = serviceLevels
    Morris.Donut({
      element: @servicePieChartId,
      data: [
        {label: "< 3 min.", value: serviceLevels[0]}
        {label: "< 5 min.", value: serviceLevels[1]}
        {label: "< 10 min.", value: serviceLevels[2]}
        {label: "< 15 min.", value: serviceLevels[3]}
        {label: "> 15 min.", value: serviceLevels[4]}
      ]
      colors: [
        '#24BD13'
        '#84BD13'
        '#B7BD13'
        '#BD7313'
        '#BD2413'
      ]
    })

  updateCompleteStatuses: (total, statuses) =>
    if @lastValues.totalComplete == total
      return
    @lastValues.totalComplete = total

    Morris.Donut({
      element: @completeTripsPieChartId,
      data: [
        {label: "Complete", value: statuses.complete}
        {label: "Rejected", value: statuses.rejected}
        {label: "Cancelled", value: statuses.cancelled}
      ]
      colors: [
        '#24BD13'
        '#2DCBD6'
        '#E31010'
      ]
    })

  updateActiveStatuses: (total, statuses) =>
    if @lastValues.totalActive == total
      return
    @lastValues.totalActive = total
    $('#' + @activeTripsPieChartTitleId).fadeOut().html(total + ' trips').fadeIn()
    Morris.Donut({
        element: @activeTripsPieChartId,
        data: [
            {label: "New", value: statuses.new}
            {label: "Dispatched", value: statuses.dispatched}
            {label: "Enroute", value: statuses.enroute}
            {label: "Picked up", value: statuses.pickedup}
        ]
        colors: [
            '#2D5AD6'
            '#24BD13'
            '#2DCBD6'
            '#E31010'
        ]
    })

  updateRatings: (passengerRating, driverRating) =>
    if $('#' + @passengersRatingChartId).html() != '' #No need to keep updating static values
      return

    passengerRatingStars = passengerRating/100*5
    $('#' + @passengersRatingChartId).html('')
    $('#' + @passengersRatingChartId).flexibleStars({
      init: passengerRatingStars
    })

    driverRatingStars = driverRating/100*5
    $('#' + @driversRatingChartId).html('')
    $('#' + @driversRatingChartId).flexibleStars({
      init: driverRatingStars
    })

class DashboardManager

  constructor: (@gateway, @statusSelectorContainerId, @listeners) ->
    @tripsById = {}
    @activeTrip = null
    @selectedStatus = 'All'
    @updatingStats = false
    @updatingTrips = false
    @updatingActiveTrip = false
    @updatingLogs = false
    @activeTripCompleted = false

    $('#' + @statusSelectorContainerId).change =>
      @selectedStatus = $('#' + @statusSelectorContainerId + ' option:selected').val()
      @updateStatus()
      @update()

  update: =>
    if not  @updatingStats
      @updatingStats = true
      @gateway.getStats(@updateStats)

    if not @updatingTrips
      @updatingTrips = true
      status = if @selectedStatus != 'All' then @selectedStatus else null
      @gateway.getTrips(status, @updateTrips)

    if not @updatingActiveTrip and not @activeTripCompleted
      @updatingActiveTrip = true
      if @activeTrip?
        @gateway.getTripStatus(@activeTrip.getId(), @updateActiveTrip)
      else
        @updateActiveTrip(null)

    if not @updatingLogs
      if @activeTrip?
        @updatingLogs = true
        @gateway.getLog(@activeTrip.getId(), @updateLogs)
      else
        @updateLogs(null)

  updateStats: (data) =>
    if data?
      for listener in @listeners
        if typeof listener.updateStats is 'function'
          try
            listener.updateStats(data)
          catch error
            console.error listener + ' updateStats failed: ' + error
    @updatingStats = false

  cleanMap: () =>
    for listener in @listeners
      if listener instanceof TripTracker
        listener.cleanMap()

  updateTrips: (data) =>
    if data?
      tripsIds = []
      for i in [0...data.trips.length]
        trip = data.trips[i]
        if trip.id.indexOf('web') > -1
          data.trips.move(i, data.trips.length-1)

      for newTrip in data.trips
        tripsIds.push newTrip.id
        if newTrip.id not of @tripsById
          @processTrip(newTrip)

      for id, trip of @tripsById
        if id not in tripsIds
          delete @tripsById[id]

      for listener in @listeners
        if typeof listener.updateTrips is 'function'
          try
            listener.updateTrips(@tripsById)
          catch error
            console.error listener + ' updateTrips failed: ' + error
    @updatingTrips = false

  processTrip: (newTrip) =>
    driverId = null
    driverLocation = null
    driverInitialLocation = null
    if newTrip.driver?
      driverId = newTrip.driver.id
      driverLocation = new Location(newTrip.driver.location.lat, newTrip.driver.location.lng)
      if newTrip.driver.initialLocation?
        driverInitialLocation =  new Location(newTrip.driver.initialLocation.lat, newTrip.driver.initialLocation.lng, null)
    trip = new Trip(
      newTrip.id
      newTrip.passenger.name
      newTrip.pickupTime
      new Location(newTrip.pickupLocation.lat, newTrip.pickupLocation.lng, null)
      if newTrip.originatingPartner then newTrip.originatingPartner.id else null
      if newTrip.servicingPartner then newTrip.servicingPartner.id else null
      newTrip.status
      newTrip.eta
      newTrip.price
      driverId
      driverLocation
      new Location(newTrip.dropoffLocation.lat, newTrip.dropoffLocation.lng, null)
      driverInitialLocation
    )
    @tripsById[trip.getId()] = trip
    $(document).off('click', '#' + trip.getContainerId()).on 'click', '#' + trip.getContainerId(),  =>
      @activeTripCompleted = false
      @toggleActiveTrip(newTrip.id)


  toggleActiveTrip: (tripId) =>
    trip = @tripsById[tripId]
    if not @activeTrip? or !trip? or @activeTrip.id != trip.id
      @activeTrip = trip
    else
      @activeTrip = null
      @cleanMap()

    for listener in @listeners
      if typeof listener.tripChanged is 'function'
        try
          listener.tripChanged(@activeTrip)
        catch error
          console.error listener + ' tripChanged failed: ' + error

    @update()


  updateActiveTrip: (data) =>
    if data?
      if !@activeTrip? or (data.driver? and data.driver.location? and !@activeTrip.getDriverLocation()?) or
        (data.driver? and data.driver.location? and
          @activeTrip.getDriverLocation()? and
          data.driver.location.lat != @activeTrip.getDriverLocation().lat and
          data.driver.location.lng != @activeTrip.getDriverLocation().lng)
        driverLocation = new Location(data.driver.location.lat, data.driver.location.lng, null)
      else
        driverLocation = @activeTrip.getDriverLocation()

      if !@activeTrip? or (data.historyEnrouteList and !@activeTrip.getDriverInitialLocation()?)
        driverInitialLocation = new Location(data.historyEnrouteList.lat, data.historyEnrouteList.lng, null)
      else
        driverInitialLocation = @activeTrip.getDriverInitialLocation()

      if @activeTrip != null
        @activeTrip.update(
          if data.status? then data.status else @activeTrip.getStatus()
          if data.driver? then data.driver.id else ''
          driverLocation
          driverInitialLocation
          data.historyEnrouteList
          data.historyPickUpList
        )
      @activeTripCompleted = data.status == 'complete' or data.status == 'cancelled'
    for listener in @listeners
      if typeof listener.updateActiveTrip is 'function'
        try
          listener.updateActiveTrip(@activeTrip)
        catch error
          console.error listener.toString() + ' updateLogs failed: ' + error

    @updatingActiveTrip = false

  updateLogs: (data) =>
    logs = if data? then data.logs.reverse() else null
    tripId = if @activeTrip? then @activeTrip.getId() else null
    for listener in @listeners
      if typeof listener.updateLog is 'function'
        try
          listener.updateLog(logs, tripId)
        catch error
          console.error listener + ' updateLogs failed: ' + error
    @updatingLogs = false

  updateStatus: () =>
    status = if @selectedStatus != 'All' then @selectedStatus else null
    for listener in @listeners
      if typeof listener.updateStatus is 'function'
        try
          listener.updateStatus(status)
        catch error
          console.error listener + ' updateStatus failed: ' + error

`
$(document).ready(function(){
    var url = window.location
    $('.list-group-item').filter( function(){
        return this.href == url;
    }).addClass('active');
    });
`

$('.developer.dashboard').ready ->

  dashboardManager = new DashboardManager(
    new TripThru($('#access_token').val())
    'trip-status-selector'
    [
      new ActiveTripsChart('active-trips-chart')
      new TripList('trips-panel')
      new StatisticsDashboard('statistics-gauges-container', 'ratings-container')
      new TripTracker('tracking-trip-info', 'tracking-map-container')
      new ActivityLog('activity-log')
    ]
  )
  clearInterval(window.tripthruinterval)
  update = ->
    dashboardManager.update()

  update()
  window.tripthruinterval = setInterval ->
    update()
  , 5000

  return