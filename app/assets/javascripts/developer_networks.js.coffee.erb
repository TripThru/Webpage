########## PARTNERS #########

class Stats

    constructor: (@statisticsContainerId, @ratingsContainerId, @gateway) ->
        @tripsPieChartId = 'network-trips-pie-chart'
        @servicePieChartId = 'network-service-pie-chart'
        @driversRatingChartId = 'network-drivers-rating-chart'
        @customersRatingChartId = 'network-customers-rating-chart'
        @lastValues =
            customerRating: -1
            driverRating: -1
            request: -1
            cancelled: -1
            completed: -1
            error: -1
            rejected: -1
            lateness: -1
            withinServiceGoal: -1

        $('#' + @statisticsContainerId).html('
                                      <div  class="dashboard-statistics-pie-chart" >
                                          <div class="title">Trips</div>
                                          <div class="pie-chart" id="' + @tripsPieChartId + '"></div>
                                      </div>
                                      <div  class="dashboard-statistics-pie-chart" >
                                          <div class="title">Service level</div>
                                          <div class="pie-chart" id="' + @servicePieChartId + '"></div>
                                      </div>
                                  ')

        $('#' + @ratingsContainerId).html('
                                      <div id="dashboard-ratings-container">
                                          <div  class="dashboard-statistics-rating" >
                                              <div class="title">Drivers</div>
                                              <div class="flexible-stars" data-isLocked="yes"
                                               data-init="0"  id="' + @driversRatingChartId + '"></div>
                                          </div>
                                          <div  class="dashboard-statistics-rating" >
                                              <div class="title">Customers</div>
                                              <div class="flexible-stars" data-isLocked="yes"
                                                  data-init="0"  id="' + @customersRatingChartId + '"></div>
                                          </div>
                                      </div>
                                  ')

        @tripsChart = Morris.Donut({
          element: @tripsPieChartId,
          data: [
            {label: "Requested", value: 0}
            {label: "Completed", value: 0}
            {label: "Rejected", value: 0}
            {label: "Cancelled", value: 0}
            {label: "Error", value: 0}
          ]
          colors: [
            '#2922DD'
            '#0BA462'
            '#DADD0F'
            '#DD1D18'
            '#DD1D18'
          ]
          resize: true
        })

        @serviceChart = Morris.Donut({
          element: @servicePieChartId,
          data: [
            {label: "In service", value: 0}
            {label: "Out service", value: 0}
          ]
          colors: [
            '#0BA462'
            '#DD1D18'
          ]
          formatter: (x) -> x + "%"
          resize: true
        })

        @update(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

    updateStats: (network) =>
      if network?
        query = {}
        lastWeek = new Date();
        lastWeek.setDate(lastWeek.getDate()-7);
        query.startDate = lastWeek
        query.interval = 'week'
        query.bucketSize = 1
        query.byStatus = true
        if $('#getUserRole').html() isnt 'admin' and $('#getUserRole').html() isnt 'demo'
          query.servicingNetworkId = $('#getUserId').html()
          query.originatingNetworkId = $('#getUserId').html()
        @gateway.getTripCount query, (data) =>
            request = data
            completed = 0
            rejected = 0
            cancelled = 0
            error = 0
            for entry in data
                switch entry.status
                    when 'new'
                        request += entry.count
                    when 'complete'
                        completed += entry.count
                    when 'cancelled'
                        cancelled += entry.count
                    when 'rejected'
                        rejected += entry.count
                    when 'error'
                        error += entry.count
            @update(0, 0, request, cancelled, completed, rejected, error, 15, 95)

    update: (customerRating, driverRating, request, cancelled, completed, rejected, error, lateness, withinServiceGoal) =>
        if @lastValues.request != request or @lastValues.completed != completed or @lastValues.cancelled != cancelled or @lastValues.rejected != rejected or @lastValues.error != error
            @lastValues.request = request
            @lastValues.completed = completed
            @lastValues.cancelled = cancelled
            @lastValues.rejected = rejected
            @lastValues.error = error
            @tripsChart.setData([
              {label: "Requested", value: request}
              {label: "Completed", value: completed}
              {label: "Rejected", value: rejected}
              {label: "Cancelled", value: cancelled}
              {label: "Error", value: error}
            ])

        customerRatingStars = customerRating/100*5
        if customerRatingStars != @lastValues.customerRating
            $('#' + @customersRatingChartId).html('')
            $('#' + @customersRatingChartId).flexibleStars({
                init: customerRatingStars
            })

        driverRatingStars = driverRating/100*5
        if driverRatingStars != @lastValues.driverRating
            $('#' + @driversRatingChartId).html('')
            $('#' + @driversRatingChartId).flexibleStars({
                init: driverRatingStars
            })


        if @lastValues.withinServiceGoal != withinServiceGoal or @lastValues.lateness != lateness

            @lastValues.withinServiceGoal = withinServiceGoal
            @lastValues.lateness = lateness
            @serviceChart.setData([
              {label: "In service", value: withinServiceGoal}
              {label: "Out service", value: lateness}
            ])

class CoverageMap

  constructor: (@containerId, @network) ->
    @mapCanvas = null
    @markers = []
    $('#' + @containerId).html('<%= image_tag('loading.gif', height: 128, width: 128) %>')
    google.maps.event.addDomListener window, "load", @init()


  init: () =>
    if @network?
      $('#' + @containerId).html('')
      @loadMap()
      @updateCoverage()

  updateNetwork: (network) =>
    @network = network
    if network?
      @updateCoverage()

  loadMap: () =>
      mapOptions =
          zoom: 4
          center: new google.maps.LatLng(37.09024, -95.712891)
          mapTypeId: google.maps.MapTypeId.TERRAIN
      @mapCanvas = new google.maps.Map(document.getElementById(@containerId), mapOptions)

  clearMap: () =>
    for marker in @markers
      marker.setMap(null)
    @markers = []

  updateCoverage: () =>
    @clearMap()
    colors = [ "#006600", "#0D6B00", "#1A7000", "#267500", "#337A00", "#408000", "#4C8500", "#598A00", "#668F00", "#739400", "#809900", "#8C9E00", "#99A300", "#A6A800", "#B2AD00", "#BFB200", "#CCB800", "#D9BD00", "#E6C200", "#F2C700", "#FFCC00", "#FCC200", "#FAB800", "#F7AD00", "#F5A300", "#F29900", "#F08F00", "#ED8500", "#EB7A00", "#E87000", "#E66600", "#E35C00", "#E05200", "#DE4700", "#DB3D00", "#D93300", "#D62900", "#D41F00", "#D11400", "#CF0A00", "#CC0000" ]
    driversTotal = [89,5,37,90,35,18,51,47,31,19,74,10,92,65,65,20,32]
    driver = 0

    citymap = {}
    count = 0
    locations = []
    for product in @network.products
      driver++
      citymap[product.name]=
        center: new google.maps.LatLng(product.coverage_lat, product.coverage_lng)
        population: product.coverage_radius
        drivers: driversTotal[driver]
      if count < driversTotal[driver]
        count = driversTotal[driver]
      locations.push({ lat: product.coverage_lat, lng: product.coverage_lng })

    steps = (colors.length / count)
    cityCircle = undefined
    for city of citymap
      temporalVar = (steps * citymap[city].drivers)
      colorNumber = Math.floor(temporalVar)
      populationOptions =
        strokeColor: if colorNumber > (colors.length - 1) then colors[colors.length - 1] else colors[colorNumber]
        strokeOpacity: 0.8
        strokeWeight: 2
        fillColor: if colorNumber > (colors.length - 1) then colors[colors.length - 1] else colors[colorNumber]
        fillOpacity: 0.35
        map: @mapCanvas
        center: citymap[city].center
        radius: citymap[city].population * 1000
      marker = new google.maps.Marker({
        position: citymap[city].center
        map: @mapCanvas
        title: city
      })
      cityCircle = new google.maps.Circle(populationOptions)
      @markers.push marker
      @markers.push cityCircle
    @setMapZoom(locations)

  setMapZoom: (locations) =>
    if locations.length == 1
      @mapCanvas.panTo new google.maps.LatLng(locations[0].lat, locations[0].lng)
      @mapCanvas.setZoom 4
    else if locations.length > 0
      geoCenter = @getCentrePointFromListOfCoordinates(locations)
      bounds = new google.maps.LatLngBounds()
      bounds.extend(new google.maps.LatLng(geoCenter.maxlat, geoCenter.maxlng))
      bounds.extend(new google.maps.LatLng(geoCenter.minlat, geoCenter.minlng))
      @mapCanvas.fitBounds(bounds)
    else
      @mapCanvas.panTo new google.maps.LatLng(37.09024, -95.712891)
      @mapCanvas.setZoom 4

  getCentrePointFromListOfCoordinates: (list) =>
    minlat = null
    minlng = null
    maxlat = null
    maxlng = null
    for point in list
      minlat = if !minlat? or point.lat < minlat then point.lat else minlat
      maxlat = if !maxlat? or point.lat > maxlat then point.lat else maxlat
      minlng = if !minlng? or point.lng < minlng then point.lng else minlng
      maxlng = if !maxlng? or point.lng > maxlng then point.lng else maxlng

    lat = maxlat - ((maxlat - minlat)/2)
    lng = maxlng - ((maxlng - minlng)/2)
    {lat: lat, lng: lng, maxlat: maxlat, maxlng: maxlng, minlat: minlat, minlng: minlng}

class NetworkOptions

    constructor: (@containerId) ->
        $('#network-options-networkship').click =>

        $('#network-options-rules').click =>

        $('#network-options-rate').click =>

    updateNetwork: (network) =>
        if network? and network.full_name
            $('#' + @containerId).html('
                <div class="col-md-5 col-md-push-1 col-sm-5" id="network-info-main">
                  <h1>' + network.full_name + '</h1>
                  <div class="row">
                     <input type="submit" id="networkship-button" value="Request networkship"/>
                  </div>
                  <div class="row">
                     <input type="submit" id="negotiate-button" value="Negotiate rules"/>
                  </div>
                </div>
                <div class="col-md-6 col-sm-7" id="network-info-rating">
                  <div class="panel panel-default">
                      <div class="panel-body">
                        <div id="network-rating">
                            <div class="row pull-left"><div id="rate-me" data-isLocked="no" data-init="0" class="flexible-stars"></div></div>
                            <div class="row"><textarea id="review-text" type="textarea">Write a review</textarea></div>
                            <div class="row"><div class="pull-right"><input type="submit" value="Submit" id="submit-rating"/></div></div>
                        </div>
                      </div>
                    </div>
                </div>
            ')

            rating = ((Math.random() * 1.5) + 3.5)
            $('#rate-me').flexibleStars({
                init: rating
            })
        else
            $('#' + @containerId).html('<h1>Select a network</h1>')


class NetworksManager

    constructor: (@gateway, @coverageMapId, @networkStatsId, @networkRatingsId, @networkOptionsId, @selectorId) ->
        @coverageMap = null
        @stats = null
        @networkOptions = null
        @networks = {}
        @allProducts = { products: [] }
        @selectedNetwork = null

        $('#' + @selectorId).change =>
            selected = $('#' + @selectorId + ' option:selected').val()
            network = @allProducts
            if selected != 'All'
              network = @networks[selected]
            @selectedNetwork = network
            @updateNetwork(network)
        @stats = new Stats(@networkStatsId, @networkRatingsId, @gateway)
        @networkOptions = new NetworkOptions(@networkOptionsId)
        @gateway.getNetworks(@initNetworks)

    initNetworks: (networks) =>
      for network in networks
        @networks[network.client_id] = network
        id = parseInt($('#getUserId').html())
        if $('#getUserRole').html() isnt 'network' or id != network.id
          $('#' + @selectorId).append('<option value="' + network.client_id + '">' + network.full_name + '</option>')
        if network.products
          @allProducts.products = @allProducts.products.concat(network.products)
      @coverageMap = new CoverageMap(@coverageMapId, @allProducts)
      @updateNetwork(@selectedNetwork)

    update: () =>
        if @stats?
            #@gateway.getStats(@updateStats)
            @updateStats(null)

    updateNetwork: (network) =>
        @coverageMap.updateNetwork(network)
        @networkOptions.updateNetwork(network)
        @stats.updateStats(network)

    updateStats: (network) =>
        @stats.updateStats(network)


$('.developer.networks').ready ->

    networksManager = new NetworksManager(
        new TripThru($('#access_token').val())
        'network-coverage-map'
        'statistics-gauges-container'
        'ratings-container'
        'network-info'
        'network-select'
    )
    clearInterval(window.tripthruinterval)

    update = ->
        networksManager.update()

    update()
    window.tripthruinterval = setInterval ->
        update()
    , 10000

    return
