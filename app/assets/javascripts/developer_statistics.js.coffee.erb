Highcharts.setOptions(
  global:
    useUTC: false
)

class UpdateRequest

  constructor: (@chartTypeUpdated =  false
                @dataModeUpdated =   false
                @togglesUpdated  =   false
                @dateUpdated =       false
                @timeModeUpdated =   false
                @productUpdated =      false
                @selectedStatsUpdated = false
                @zoomUpdated =       false
                @clearZoomUpdated =  false) ->
    @obsolete = false
    @creationTime = new Date()

  isObsolete: () =>
    @obsolete
  makeObsolete: () =>
    @obsolete = true
  isChartTypeUpdate: () =>
    @chartTypeUpdated
  isDataModeUpdate: () =>
    @dataModeUpdated
  isToggleUpdate: () =>
    @togglesUpdated
  isDateUpdate: () =>
    @dateUpdated
  isTimeModeUpdate: () =>
    @timeModeUpdated
  isProductUpdate: () =>
    @productUpdated
  isSelectedStatsUpdate: () =>
    @selectedStatsUpdated
  isZoomUpdate: () =>
    @zoomUpdated
  isClearZoomUpdate: () =>
    @clearZoomUpdated
  equals: (update) =>
    @isChartTypeUpdate()    == update.isChartTypeUpdate() and
    @isDataModeUpdate()     == update.isDataModeUpdate() and
    @isToggleUpdate()       == update.isToggleUpdate() and
    @isDateUpdate()         == update.isDateUpdate() and
    @isTimeModeUpdate()     == update.isTimeModeUpdate() and
    @isProductUpdate()        == update.isProductUpdate() and
    @isSelectedStatsUpdate() == update.isSelectedStatsUpdate() and
    @isZoomUpdate()         == update.isZoomUpdate() and
    @isClearZoomUpdate()    == update.isClearZoomUpdate()


class TimeSeries

  constructor: (@gateway, @historicChartContainerId, @forecastChartContainerId, @mapContainer) ->
    @gateway.getNetworks(@loadSelectorFilters)
    @data = null

    @historicChart = null
    @forecastChart = null
    window.map = null
    @heatmap = null
    window.selectedGeographicZone = null
    @selectedGeographicZone = {
        lat: null
        lng: null
        radius: null
    }
    @networks = {}
    @products = {}
    @drivers = {}
    @tripsById = {}
    @stats = []

    @pendingUpdateRequests = []
    @selectedStat = 'tripsCompleted'
    @selectedNetwork = 'All'
    @selectedProduct = 'All'
    @selectedDriver = 'All'
    @chartType = 'series'
    @realtimeMode = true
    @percentageMode = true
    @forecastDataMode = false
    @farmedInMode = true
    @farmedOutMode = true
    @localTripsMode = true
    @updatingRealTime = false
    @updatingTimeRange = false
    @firstTimeShowingMap = true
    @pickupTripsLoaded = false
    @dropoffTripsLoaded = false
    @latestCountQuery = ''
    @latestListQuery = ''
    @realtimeModeInterval  = {
        seconds: true
        minutes: false
        hours: false
        days: false
        weeks: false
        months: false
    }

    @startDate = new Date()
    @startDate.setDate(@startDate.getDate()-7)
    @endDate = new Date()
    $('#start-date').datetimepicker(
      format: "YYYY/MM/DD HH:mm"
    )
    $('#end-date').datetimepicker(
      format: "YYYY/MM/DD HH:mm"
    )
    $('#start-date').data('DateTimePicker').date(@startDate)
    $('#end-date').data('DateTimePicker').date(@endDate)

    $('#trips-requested-filter-button').addClass('active')
    $('#trips-completed-filter-button').addClass('active')
    $('#trips-rejected-filter-button').addClass('active')
    $('#trips-cancelled-filter-button').addClass('active')
    $('#trips-error-filter-button').addClass('active')
    $('#farmedin-button').addClass('active')
    $('#farmedout-button').addClass('active')
    $('#local-button').addClass('active')
    $('#seconds-button').addClass('active')
    $('#realtime-button').addClass('active')
    $('#datepicker>input').attr("disabled", true)
    $('#time-range-panel').addClass('hidden')

    allStatuses = ['complete', 'rejected', 'cancelled', 'error']
    @tripsRequested =   @createSeriesObject('Requested trips',  allStatuses, '#6FC6F5', true, true, true)
    @tripsCompleted =   @createSeriesObject('Completed trips',  ['complete'],  '#009933', false, true, true)
    @tripsCancelled =   @createSeriesObject('Cancelled trips',  ['cancelled'],  '#FF9900', true, true, true)
    @tripsRejected =    @createSeriesObject('Rejected trips',   ['rejected'],  '#BB6FF5', true, true, true)
    @tripsError =       @createSeriesObject('Error trips',      ['error'],  '#CC0000', true, true, true)
    @serviceLateness =  @createSeriesObject('Lateness',         allStatuses,  '#3482B3', true, false, false)
    @timeEnroute =      @createSeriesObject('Time enroute',     allStatuses,  '#993366', true, true, false)
    @timeOccupied =     @createSeriesObject('Time occupied',    allStatuses,  '#D17445', true, true, false)
    @timeIdle =         @createSeriesObject('Time idle',        allStatuses,  '#993300', true, true, false)
    @mileageEnroute =   @createSeriesObject('Mileage enroute',  allStatuses,  '#339966', true, true, false)
    @mileageOccupied =  @createSeriesObject('Mileage occupied', allStatuses,  '#FF9999', true, true, false)
    @ratingDrivers =    @createSeriesObject('Drivers rating',   allStatuses,  '#3399FF', true, true, false)
    @ratingPassengers = @createSeriesObject('Passengers rating',allStatuses,  '#00CC99', true, true, false)

    @loadCharts()
    $('#forecast-chart-container').hide()
    @setFilterEvents()

    $('#seconds-button').click =>
        if (@realtimeMode and not $('#seconds-button').hasClass('active')) or not @realtimeMode
            $('#realtime-intervals-container').find('.active').removeClass('active')
            for name of @realtimeModeInterval
                @realtimeModeInterval[name] = false
            $('#seconds-button').addClass('active')
            @realtimeModeInterval.seconds = true
            @realtimeMode = true
        else
            $('#realtime-intervals-container').find('.active').removeClass('active')
            @realtimeMode = false
        @toggleRealTime()

    $('#minutes-button').click =>
      if (@realtimeMode and not $('#minutes-button').hasClass('active')) or not @realtimeMode
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#minutes-button').addClass('active')
          @realtimeModeInterval.minutes = true
          @realtimeMode = true
      else
          $('#realtime-intervals-container').find('.active').removeClass('active')
          @realtimeMode = false
      @toggleRealTime()

    $('#hours-button').click =>
      if (@realtimeMode and not $('#hours-button').hasClass('active')) or not @realtimeMode
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#hours-button').addClass('active')
          @realtimeModeInterval.hours = true
          @realtimeMode = true
      else
          $('#realtime-intervals-container').find('.active').removeClass('active')
          @realtimeMode = false
      @toggleRealTime()

    $('#days-button').click =>
      if (@realtimeMode and not $('#days-button').hasClass('active')) or not @realtimeMode
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#days-button').addClass('active')
          @realtimeModeInterval.days = true
          @realtimeMode = true
      else
          $('#realtime-intervals-container').find('.active').removeClass('active')
          @realtimeMode = false
      @toggleRealTime()

    $('#weeks-button').click =>
      if (@realtimeMode and not $('#weeks-button').hasClass('active')) or not @realtimeMode
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#weeks-button').addClass('active')
          @realtimeModeInterval.weeks = true
          @realtimeMode = true
      else
          $('#realtime-intervals-container').find('.active').removeClass('active')
          @realtimeMode = false
      @toggleRealTime()

    $('#realtime-button').click =>
      if @realtimeMode
        @realtimeMode = false
        $('#realtime-button').val('Time range')
        $('#datepicker>input').attr("disabled", false)
        $('#realtime-intervals-container>input').addClass('disabled')
        $('#realtime-panel').addClass('hidden')
        $('#time-range-panel').removeClass('hidden')
      else
        @realtimeMode = true
        $('#realtime-button').val('Real-time')
        $('#datepicker>input').attr("disabled", true)
        $('#realtime-intervals-container>input').removeClass('disabled')
        $('#realtime-panel').removeClass('hidden')
        $('#time-range-panel').addClass('hidden')
      updateRequest = @createUpdateRequest({timeModeUpdate: true, togglesUpdate: true})
      @update(updateRequest)

    $('#start-date').on 'dp.change', (e) =>
        @startDate = e.date
        $('#end-date').data('DateTimePicker').minDate(e.date)
        updateRequest = @createUpdateRequest({dateUpdate: true})
        @update(updateRequest)

    $('#end-date').on 'dp.change', (e) =>
        @endDate = e.date
        $('#start-date').data('DateTimePicker').maxDate(e.date)
        updateRequest = @createUpdateRequest({dateUpdate: true})
        @update(updateRequest)

    $('#networks-select').change =>
      @selectedNetwork = $('#networks-select option:selected').val()
      @selectedProduct = 'All'
      $('#products-select').html '<option value="All" selected="selected">All</option>'
      if @selectedNetwork == 'All'
        for id, product of @products
          $('#products-select').append('<option value="' + product.name + '">' + product.name + '</option>')
      else
        for product in @networks[@selectedNetwork].products
          $('#products-select').append('<option value="' + product.name + '">' + product.name + '</option>')
      updateRequest = @createUpdateRequest({togglesUpdate: true, productUpdate: true})
      @update(updateRequest)

    $('#products-select').change =>
      @selectedProduct = $('#products-select option:selected').val()
      updateRequest = @createUpdateRequest({togglesUpdate: true, productUpdate: true})
      @update(updateRequest)

    $('#drivers-select').change =>
      @selectedDriver = $('#drivers-select option:selected').val()
      updateRequest = @createUpdateRequest({togglesUpdate: true, productUpdate: true})
      @update(updateRequest)

    $('#chart-type-toggle-container>#toggle-button').click =>
        if @chartType == 'series'
            @chartType = 'map'
            $('#statistics-toggle').hide()
            $('#heatmap-toggle').show()
        else
            @chartType = 'series'
            $('#heatmap-toggle').hide()
            $('#statistics-toggle').show()
        @setFilterEvents()
        events = {chartTypeUpdate: true}
        if @firstTimeShowingMap
          events.clearZoomUpdate = true
          @firstTimeShowingMap = false
        updateRequest = @createUpdateRequest(events)
        @update(updateRequest)

    $('#historic-toggle-container>#toggle-button').click =>
        if @forecastDataMode
            $('#forecast-toggle').hide()
            $('#historic-toggle').show()
        else
            $('#historic-toggle').hide()
            $('#forecast-toggle').show()
        @forecastDataMode = not @forecastDataMode
        updateRequest = @createUpdateRequest({dataModeUpdate: true})
        @update(updateRequest)


    $('#data-mode-toggle-container>#toggle-button').click =>
        if @percentageMode
          $('#percentage-toggle').hide()
          $('#absolute-toggle').show()
        else
          $('#absolute-toggle').hide()
          $('#percentage-toggle').show()
        @percentageMode = not @percentageMode
        updateRequest = @createUpdateRequest({dataModeUpdate: true})
        @update(updateRequest)

    $('#farmedin-button').click =>
      if not @farmedInMode or @farmedOutMode or @localTripsMode
        $('#farmedin-button').toggleClass('active')
        @farmedInMode = not @farmedInMode
        updateRequest = @createUpdateRequest({togglesUpdate: true, clearZoomUpdate: true})
        @update(updateRequest)

    $('#farmedout-button').click =>
      if not @farmedOutMode or @farmedInMode or @localTripsMode
        $('#farmedout-button').toggleClass('active')
        @farmedOutMode = not @farmedOutMode
        updateRequest = @createUpdateRequest({togglesUpdate: true, clearZoomUpdate: true})
        @update(updateRequest)

    $('#local-button').click =>
      if not @localTripsMode or @farmedInMode or @farmedOutMode
        $('#local-button').toggleClass('active')
        @localTripsMode = not @localTripsMode
        updateRequest = @createUpdateRequest({togglesUpdate: true, clearZoomUpdate: true})
        @update(updateRequest)

    @update()

  createUpdateRequest: (type) =>
    chartTypeUpdated =  type.chartTypeUpdate? and type.chartTypeUpdate
    dataModeUpdated =   type.dataModeUpdate? and type.dataModeUpdate
    togglesUpdated  =   type.togglesUpdate? and type.togglesUpdate
    dateUpdated =       type.dateUpdate? and type.dateUpdate
    timeModeUpdated =   type.timeModeUpdate? and type.timeModeUpdate
    productUpdated =      type.productUpdate? and type.productUpdate
    selectedStatsUpdated = type.selectedStatsUpdate? and type.selectedStatsUpdate
    zoomUpdated =       type.zoomUpdate? and type.zoomUpdate
    clearZoomUpdated =  type.clearZoomUpdate? and type.clearZoomUpdate

    @pendingUpdateRequests = @getPendingRequestsNotObsolete()
    newUpdate = new UpdateRequest(chartTypeUpdated, dataModeUpdated, togglesUpdated, dateUpdated, timeModeUpdated, productUpdated, selectedStatsUpdated, zoomUpdated, clearZoomUpdated)
    for update in @pendingUpdateRequests
      if update.equals(newUpdate)
        update.makeObsolete()
    @pendingUpdateRequests.push newUpdate
    return newUpdate

  getPendingRequestsNotObsolete: () =>
    $.grep(@pendingUpdateRequests, (updateRequest) => !updateRequest.isObsolete())

  createSeriesObject: (name, tripStatuses, color, isPickupStat, isBasedOnLocationConcentration, show) =>
    stat = {
      name: name
      id: name
      tripStatuses: tripStatuses
      color: color
      data: []
      isPickupStat: isPickupStat
      isBasedOnLocationConcentration: isBasedOnLocationConcentration
      show: show
    }
    @stats.push stat
    return stat

  toggleRealTime: () =>
      if @realtimeMode
        @loadCharts()
      updateRequest = @createUpdateRequest({togglesUpdate: true})
      @update(updateRequest)

  setFilterEvents: () =>
      if @chartType == 'series'
          $('.filter-button').removeClass('active')
          $('#trips-requested-filter-button').toggleClass('active')
          $('#trips-completed-filter-button').toggleClass('active')
          $('#trips-rejected-filter-button').toggleClass('active')
          $('#trips-cancelled-filter-button').toggleClass('active')
          $('#trips-error-filter-button').toggleClass('active')

          $('#trips-requested-filter-button').off('click').on 'click', =>
            $('#trips-requested-filter-button').toggleClass('active')
            @tripsRequested.show= not @tripsRequested.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)
          
          $('#trips-completed-filter-button').off('click').on 'click', =>
            $('#trips-completed-filter-button').toggleClass('active')
            @tripsCompleted.show= not @tripsCompleted.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#trips-rejected-filter-button').off('click').on 'click', =>
            $('#trips-rejected-filter-button').toggleClass('active')
            @tripsRejected.show= not @tripsRejected.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#trips-cancelled-filter-button').off('click').on 'click', =>
            $('#trips-cancelled-filter-button').toggleClass('active')
            @tripsCancelled.show= not @tripsCancelled.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#trips-error-filter-button').off('click').on 'click', =>
            $('#trips-error-filter-button').toggleClass('active')
            @tripsError.show= not @tripsError.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#time-enroute-filter-button').off('click').on 'click', =>
            $('#time-enroute-filter-button').toggleClass('active')
            @timeEnroute.show = not @timeEnroute.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#time-occupied-filter-button').off('click').on 'click', =>
            $('#time-occupied-filter-button').toggleClass('active')
            @timeOccupied.show = not @timeOccupied.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#time-idle-filter-button').off('click').on 'click', =>
            $('#time-idle-filter-button').toggleClass('active')
            @timeIdle.show = not @timeIdle.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#mileage-enroute-filter-button').off('click').on 'click', =>
            $('#mileage-enroute-filter-button').toggleClass('active')
            @mileageEnroute.show = not @mileageEnroute.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#mileage-occupied-filter-button').off('click').on 'click', =>
            $('#mileage-occupied-filter-button').toggleClass('active')
            @mileageOccupied.show = not @mileageOccupied.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#service-lateness-filter-button').off('click').on 'click', =>
            $('#service-lateness-filter-button').toggleClass('active')
            @serviceLateness.show = not @serviceLateness.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#ratings-drivers-filter-button').off('click').on 'click', =>
            $('#ratings-drivers-filter-button').toggleClass('active')
            @ratingDrivers.show = not @ratingDrivers.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)

          $('#ratings-customers-filter-button').off('click').on 'click', =>
            $('#ratings-customers-filter-button').toggleClass('active')
            @ratingPassengers.show = not @ratingPassengers.show
            updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
            @update(updateRequest)
      else
          @selectedStat = @tripsCompleted
          $('.filter-button').removeClass('active')
          $('#trips-completed-filter-button').addClass('active')

          $('#trips-requested-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @tripsRequested.name
              $('.filter-button').removeClass('active')
              $('#trips-requested-filter-button').addClass('active')
              @selectedStat = @tripsRequested
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#trips-completed-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @tripsCompleted.name
              $('.filter-button').removeClass('active')
              $('#trips-completed-filter-button').addClass('active')
              @selectedStat = @tripsCompleted
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#trips-rejected-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @tripsRejected.name
              $('.filter-button').removeClass('active')
              $('#trips-rejected-filter-button').addClass('active')
              @selectedStat = @tripsRejected
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#trips-cancelled-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @tripsCancelled.name
              $('.filter-button').removeClass('active')
              $('#trips-cancelled-filter-button').addClass('active')
              @selectedStat = @tripsCancelled
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#trips-error-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @tripsError.name
              $('.filter-button').removeClass('active')
              $('#trips-error-filter-button').addClass('active')
              @selectedStat = @tripsError
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#time-enroute-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @timeEnroute.name
              $('.filter-button').removeClass('active')
              $('#time-enroute-filter-button').addClass('active')
              @selectedStat = @timeEnroute
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#time-occupied-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @timeOccupied.name
              $('.filter-button').removeClass('active')
              $('#time-occupied-filter-button').addClass('active')
              @selectedStat = @timeOccupied
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#time-idle-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @timeIdle.name
              $('.filter-button').removeClass('active')
              $('#time-idle-filter-button').addClass('active')
              @selectedStat = @timeIdle
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#mileage-enroute-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @mileageEnroute.name
              $('.filter-button').removeClass('active')
              $('#mileage-enroute-filter-button').addClass('active')
              @selectedStat = @mileageEnroute
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#mileage-occupied-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @mileageOccupied.name
                $('.filter-button').removeClass('active')
                $('#mileage-occupied-filter-button').addClass('active')
                @selectedStat = @mileageOccupied
                updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
                @update(updateRequest)

          $('#service-lateness-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @serviceLateness.name
              $('.filter-button').removeClass('active')
              $('#service-lateness-filter-button').addClass('active')
              @selectedStat = @serviceLateness
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#ratings-drivers-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @ratingDrivers.name
              $('.filter-button').removeClass('active')
              $('#ratings-drivers-filter-button').addClass('active')
              @selectedStat = @ratingDrivers
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

          $('#ratings-customers-filter-button').off('click').on 'click', =>
            if @selectedStat.name != @ratingPassengers.name
              $('.filter-button').removeClass('active')
              $('#ratings-customers-filter-button').addClass('active')
              @selectedStat = @ratingPassengers
              updateRequest = @createUpdateRequest({togglesUpdate: true, selectedStatsUpdate: true})
              @update(updateRequest)

  update: (updateRequest) =>
      if !updateRequest?
        activeRequests = @getPendingRequestsNotObsolete()
        if activeRequests? and activeRequests.length == 0
          updateRequest = @createUpdateRequest({})
        else
          return
      if updateRequest.isObsolete()
        return
      if updateRequest.isChartTypeUpdate() and @chartType == 'series'
        $('#map-container').hide()
        $('#time-series-container').show()
        @loadCharts()
      else if updateRequest.isChartTypeUpdate() and @chartType == 'map'
        $('#time-series-container').hide()
        $('#map-container').show()
        if !window.map?
          @loadMap()
          google.maps.event.addDomListenerOnce(window.map, "tilesloaded", () =>
              google.maps.event.addDomListenerOnce(window.map, "tilesloaded", @update(updateRequest)))
          return
        else
          google.maps.event.trigger(window.map,'resize')

      if updateRequest.isDataModeUpdate()
        if @forecastDataMode
          $('#chart-title>h2').html 'Forecast'
          if @chartType == 'series'
            $('#historic-chart-container').hide()
            $('#forecast-chart-container').show()
            @loadCharts()
        else
          $('#chart-title>h2').html 'Historic'
          if @chartType == 'series'
            $('#forecast-chart-container').hide()
            $('#historic-chart-container').show()
            @loadCharts()

      if @realtimeMode
        @showLoadingIndicator()
        if @chartType == 'series'
          @updateSeriesRealTime(updateRequest)
        else
          @updateHeatMapRealTime(updateRequest)
      else if not @realtimeMode and (updateRequest.isDateUpdate() or updateRequest.isToggleUpdate() or updateRequest.isChartTypeUpdate() or updateRequest.isDataModeUpdate())
        @showLoadingIndicator()
        if @chartType == 'series'
          @updateSeriesTimeRange(updateRequest)
        else
          @updateHeatMapTimeRange(updateRequest)
      else
        updateRequest.makeObsolete()
      
  updateSeriesRealTime: (updateRequest) =>
    [query, dates] = @getTripsCountRealTimeQuery()
    query.byStatus = true
    if !@queriesAreEqual(query, @latestCountQuery)
      @gateway.getTripCount query, (countByStatus) =>
        query.byStatus = false
        query.byCreationTime = true
        @gateway.getTripCount query, (totalCount) =>
          query.byStatus = true
          query.byCreationTime = false
          @latestCountQuery = query
          @setStats @countQueryResultToStats(countByStatus, totalCount, dates), updateRequest
    else
      @setStats @stats, updateRequest

  updateSeriesTimeRange: (updateRequest) =>
    [query, dates] = @getTripsCountTimeRangeQuery(new Date(@startDate), new Date(@endDate))
    query.byStatus = true
    if !@queriesAreEqual(query, @latestCountQuery) or updateRequest.isDataModeUpdate()
      @gateway.getTripCount query, (countByStatus) =>
        query.byStatus = false
        query.byCreationTime = true
        @gateway.getTripCount query, (totalCount) =>
          query.byStatus = true
          query.byCreationTime = false
          @latestCountQuery = query
          @setStats @countQueryResultToStats(countByStatus, totalCount, dates), updateRequest
    else
      @setStats @stats, updateRequest

  setStats: (stats, updateRequest) =>
    if @chartType == 'series'
      if updateRequest.isObsolete()
        return
      yAxisMax = 0
      for stat in stats
          serie = {
            name: stat.name
            id: stat.id
            color: stat.color
            data: stat.data
            marker: {
              enabled: true,
              radius: 3
              symbol: 'circle'
            }
          }
          if stat.show
            for val in stat.data
              if val[1] > yAxisMax
                yAxisMax = val[1]
          if @forecastDataMode
              existingSerie = @forecastChart.get(stat.name)
              if stat.show
                if existingSerie?
                  existingSerie.update({pointStart: stat.data[0], data: stat.data})
                else
                  @forecastChart.addSeries(serie, false, false)
              else
                existingSerie.remove(false)
          else
              existingSerie = @historicChart.get(stat.name)
              if stat.show
                if existingSerie?
                  existingSerie.update({pointStart: stat.data[0], data: stat.data})
                else
                  @historicChart.addSeries(serie, false, false)
              else if existingSerie?
                existingSerie.remove(false)
      if not @percentageMode
          if @forecastDataMode
              @forecastChart.yAxis[0].setExtremes(0, yAxisMax)
          else
              @historicChart.yAxis[0].setExtremes(0, yAxisMax)
      else
          if @forecastDataMode
              @forecastChart.yAxis[0].setExtremes(0, 100)
          else
              @historicChart.yAxis[0].setExtremes(0, 100)
      @refreshCharts()
      @hideLoadingIndicator()
      updateRequest.makeObsolete()

  updateHeatMapRealTime: (updateRequest) =>
    @loadHeatMapTrips(updateRequest, @getTripsListRealTimeQuery())

  updateHeatMapTimeRange: (updateRequest) =>
    @loadHeatMapTrips(updateRequest, @getTripsListTimeRangeQuery(new Date(@startDate), new Date(@endDate)))

  loadHeatMapTrips: (updateRequest, query) =>
    isPickupStat = @selectedStat.isPickupStat
    if @queriesAreEqual(query, @latestListQuery) or
        updateRequest.isSelectedStatsUpdate() and
        ((isPickupStat and @pickupTripsLoaded) or (not isPickupStat and @dropoffTripsLoaded))
      @drawHeatMap(updateRequest)
      updateRequest.makeObsolete()
      @hideLoadingIndicator()
    else
      if not updateRequest.isSelectedStatsUpdate()
        @pickupTripsLoaded = false
        @dropoffTripsLoaded = false
      @gateway.getTrips query , (trips) =>
        tripsIds = []
        for newTrip in trips
          newTripId = '<' + isPickupStat + ',' + newTrip.status + ',' + newTrip.location_id + '>'
          tripsIds.push newTripId
          if newTripId not of @tripsById or
              (isPickupStat and !@tripsById[newTripId].pickup_location_lat?) or
              (not isPickupStat and !@tripsById[newTripId].dropoff_location_lat?)

            @tripsById[newTripId] = {
                                      location: { lat: newTrip.location_lat, lng: newTrip.location_lng }
                                      status: newTrip.status
                                      count: newTrip.count
                                      lateness: newTrip.lateness_average/1000
                                      isPickupLocation: isPickupStat
                                    }
        for id, trip of @tripsById
          if id not in tripsIds and isPickupStat == trip.isPickupLocation
            delete @tripsById[id]
        if isPickupStat
          @pickupTripsLoaded = true
        else
          @dropoffTripsLoaded = true
        @latestListQuery = query
        if not updateRequest.isObsolete()
          @drawHeatMap(updateRequest)
          @hideLoadingIndicator()
          updateRequest.makeObsolete()

  drawHeatMap: (updateRequest) =>
      taxiData = []
      trips = []
      intensity = 0

      #if @selectedStat.isBasedOnLocationConcentration

      for id, trip of @tripsById
        if trip.status in @selectedStat.tripStatuses and trip.isPickupLocation == @selectedStat.isPickupStat
          location = new google.maps.LatLng(trip.location.lat,trip.location.lng)
          if !window.selectedGeographicZone? or (window.selectedGeographicZone.isHere(location))
            trips.push {
              lat: trip.location.lat
              lng: trip.location.lng
            }
            taxiData.push {
              location: location,
              weight: trip.count*5
            }
            intensity++
      #else

      @setMapZoom(trips, updateRequest)
      @heatmap.setMap null
      gradient = [ "rgba(0, 255, 255, 0)", "rgba(13, 0, 229, 1)", "rgba(0, 74, 225, 1)", "rgba(0, 159, 221, 1)", "rgba(0, 217, 193, 1)", "rgba(0, 213, 106, 1)", "rgba(0, 210, 22, 1)", "rgba(58, 206, 0, 1)", "rgba(135, 202, 0, 1)", "rgba(198, 186, 0, 1)", "rgba(194, 106, 0, 1)", "rgba(191, 30, 0, 1)" ]
      @heatmap = new google.maps.visualization.HeatmapLayer({
          data: taxiData,
          radius: 20,
          maxIntensity: intensity*2,
          gradient: gradient,
      })
      @heatmap.setMap window.map

  setMapZoom: (trips, updateRequest) =>
    if window.map? and (updateRequest.isProductUpdate() or updateRequest.isClearZoomUpdate())
      if trips.length > 0
        geoCenter = @getCentrePointFromListOfCoordinates(trips)
        bounds = new google.maps.LatLngBounds()
        bounds.extend(new google.maps.LatLng(geoCenter.maxlat, geoCenter.maxlng))
        bounds.extend(new google.maps.LatLng(geoCenter.minlat, geoCenter.minlng))
        window.map.fitBounds(bounds)
      else if @selectedProduct != 'All'
        networkPosition = new google.maps.LatLng(@products[@selectedProduct].coverage_lat, @products[@selectedProduct].coverage_lng)
        if window.selectedGeographicZone? and !window.selectedGeographicZone.isHere(networkPosition)
          window.selectedGeographicZone.setMap null
          window.selectedGeographicZone = null
        window.map.panTo networkPosition
        window.map.setZoom 8
      else
        window.map.panTo new google.maps.LatLng(37.09024, -95.712891)
        window.map.setZoom 4

  getTripsCountRealTimeQuery: () =>
    startDate = new Date()
    intervalCount = 0
    bucketSize = 1
    intervalName = ''
    if @realtimeModeInterval.seconds
      startDate.setMinutes(startDate.getMinutes()-10)
      intervalCount = 41
      bucketSize = 15
      intervalName = 'second'
    else if @realtimeModeInterval.minutes
      startDate.setHours(startDate.getHours()-10)
      intervalCount = 41
      bucketSize = 15
      intervalName = 'minute'
    else if @realtimeModeInterval.hours
      startDate.setDate(startDate.getDate()-2)
      intervalCount = 49
      intervalName = 'hour'
    else if @realtimeModeInterval.days
      startDate.setMonth(startDate.getMonth()-1)
      intervalCount = 33
      intervalName = 'day'
    else if @realtimeModeInterval.weeks
      startDate.setMonth(startDate.getMonth()-3)
      intervalCount = 14
      intervalName = 'week'
    date = new Date(startDate);

    dates = @getDatesByInterval(startDate, intervalName, intervalCount, bucketSize)
    query = @getQuery(date)
    query.interval = intervalName
    query.bucketSize = bucketSize
    return [query, dates]

  getTripsCountTimeRangeQuery: (startDate, endDate) =>
    startMoment = moment(startDate)
    endMoment = moment(endDate)
    days = endMoment.diff(startMoment, 'days')
    intervalCount = 0
    bucketSize = 1
    intervalName = ''

    if days < 1
      hours = endMoment.diff(startMoment, 'hours')
      if hours < 1
        minutes = endMoment.diff(startMoment, 'minutes')
        if minutes <= 15
          bucketSize = 15
          intervalCount = minutes * 60 / bucketSize
          intervalName = 'second'
        else
          intervalCount = minutes
          intervalName = 'minute'
      else if hours < 12
        bucketSize = 5
        intervalCount = hours * 60 / bucketSize
        intervalName = 'minute'
      else
        intervalCount = hours
        intervalName = 'hour'
    else if days >= 1 and days < 3
      intervalCount = days * 24
      intervalName = 'hour'
    else if days >= 3 and days < 7
      bucketSize = 8
      intervalCount = days * 24 / bucketSize
      intervalName = 'hour'
    else if days < 61
      intervalCount = days
      intervalName = 'day'
    else
      intervalCount = (days / 7).toFixed(0)
      intervalName = 'week'

    dates = @getDatesByInterval(new Date(startDate), intervalName, intervalCount, bucketSize)
    startDate.setDate(startDate.getDate() - 1)
    endDate.setDate(endDate.getDate() + 1)
    query = @getQuery(startDate, endDate)
    query.interval = intervalName
    query.bucketSize = bucketSize
    return [query, dates]

  getDatesByInterval: (startDate, intervalName, intervalCount, bucketSize) =>
    dates = []
    date = moment(startDate)
    switch intervalName
      when 'second'
        date.startOf('minute')
      when 'minute'
        date.startOf('minute')
      when 'hour'
        date.startOf('hour')
      when 'day'
        date.startOf('day')
      when 'week'
        date.startOf('isoWeek')
    for i in [0..intervalCount]
      dates.push new Date(date.toDate())
      switch intervalName
        when 'second'
          date.add(bucketSize, 'second')
        when 'minute'
          date.add(bucketSize, 'minute')
        when 'hour'
          date.add(bucketSize, 'hour')
        when 'day'
          date.add(bucketSize, 'day')
        when 'week'
          date.add(7, 'day')
    return dates

  getTripsListRealTimeQuery: () =>
    startDate = new Date()
    if @realtimeModeInterval.seconds
      startDate.setMinutes(startDate.getMinutes()-10)
    else if @realtimeModeInterval.minutes
      startDate.setHours(startDate.getHours()-10)
    else if @realtimeModeInterval.hours
      startDate.setDate(startDate.getDate()-2)
    else if @realtimeModeInterval.days
      startDate.setMonth(startDate.getMonth()-1)
    else if @realtimeModeInterval.weeks
      startDate.setMonth(startDate.getMonth()-3)
    date = new Date(startDate)

    query = @getQuery(date, null)
    query.byPickupLocation = @selectedStat.isPickupStat
    return query

  getTripsListTimeRangeQuery: (startDate, endDate) =>
    query = @getQuery(startDate, endDate)
    query.byPickupLocation = @selectedStat.isPickupStat
    return query

  getQuery: (startDate, endDate) =>
    query = {}
    if window.selectedGeographicZone?
      query.center = {}
      query.center.lat = window.selectedGeographicZone.getCenter().lat()
      query.center.lng = window.selectedGeographicZone.getCenter().lng()
      query.center.radius = window.selectedGeographicZone.getRadius() / 1609.344

    nId = if @selectedNetwork != 'All' then @networks[@selectedNetwork].id else 'all'
    fId = if @selectedProduct != 'All' then @products[@selectedProduct].id else 'all'
    if @farmedInMode
      query.originatingNetworkId = nId
      query.originatingProductId = fId
    if @farmedOutMode
      query.servicingNetworkId = nId
      query.servicingProductId = fId
    if @localTripsMode
      query.localNetworkId = nId
      query.localProductId = fId
    if startDate
      query.startDate = startDate
    if endDate
      query.endDate = endDate
    query.byStatus = false
    query.byCreationTime = false

    return query

  queriesAreEqual: (query1, query2) =>
    equal = true
    if query1.byStatus != query2.byStatus
      equal = false
    if query1.byCreationTime != query2.byCreationTime
      equal = false
    if query1.byPickupLocation != query2.byPickupLocation
      equal = false
    if query1.originatingNetworkId != query2.originatingNetworkId
      equal = false
    if query1.servicingNetworkId != query2.servicingNetworkId
      equal = false
    if query2.localNetworkId != query2.localNetworkId
      equal = false
    if query1.originatingProductId != query2.originatingProductId
      equal = false
    if query1.servicingProductId != query2.servicingProductId
      equal = false
    if query2.localProductId != query2.localProductId
      equal = false
    if query1.center? and query2.center?
      if query1.center.radius != query2.center.radius
        equal = false
      if query1.center.lat != query2.center.lat
        equal = false
      if query1.center.lng != query2.center.lng
        equal = false
    else if query1.center? or query2.center?
      equal = false
    if query1.interval != query2.interval
      equal = false
    if query1.bucketSize != query2.bucketSize
      equal = false
    if query1.startDate != query2.startDate
      equal = false
    if query1.endDate != query2.endDate
      equal = false
    return equal

  countQueryResultToStats: (countByStatus, totalCount, dates) =>
    for stat in @stats
      stat.data = []
    @YAxisMax = 0
    countIndex = 0
    totalsIndex = 0
    nextCountDate = null
    nextTotalDate = null
    if countIndex < countByStatus.length
      nextCountDate = moment(countByStatus[countIndex].interval, 'YYYY-MM-DD HH:mm:ss Z').utc()
    if totalsIndex < totalCount.length
      nextTotalDate = moment(totalCount[totalsIndex].interval, 'YYYY-MM-DD HH:mm:ss Z').utc()

    for date in dates
      date = moment(date).utc()
      countRequested = 0
      countComplete = 0
      countCancelled = 0
      countRejected = 0
      countError = 0
      latenessAverage = 0
      latenessAverages = []

      if nextCountDate? and date.isSame(nextCountDate)
        while countIndex < countByStatus.length and date.isSame(nextCountDate)
          count = countByStatus[countIndex]
          switch count.status
            when 'complete'
              countComplete += count.count
              latenessAverages.push(count.lateness_average || 0)
            when 'rejected'
              countRejected += count.count
            when 'cancelled'
              countCancelled += count.count
            when 'error'
              countError += count.count
          if ++countIndex < countByStatus.length
            nextCountDate = moment(countByStatus[countIndex].interval, 'YYYY-MM-DD HH:mm:ss Z').utc()

      if nextTotalDate? and totalsIndex < totalCount.length and date.isSame(nextTotalDate)
        countRequested = totalCount[totalsIndex].count
        if ++totalsIndex < totalCount.length
          nextTotalDate = moment(totalCount[totalsIndex].interval, 'YYYY-MM-DD HH:mm:ss Z').utc()

      for avg in latenessAverages
        latenessAverage += avg
      if latenessAverage > 0
        latenessAverage = (latenessAverage / latenessAverages.length)/1000/60
      total = countComplete + countCancelled + countRejected + countError

      if @percentageMode
        countRequested = if countRequested > 0 then 100 else 0
        countComplete = if countComplete > 0 then countComplete * 100 / total else 0
        countCancelled = if countCancelled > 0 then countCancelled * 100 / total else 0
        countRejected = if countRejected > 0 then countRejected * 100 / total else 0
        countError = if countError > 0 then countError * 100 / total else 0

      dateIndex = date.toDate().getTime()
      @tripsRequested.data.push [dateIndex, countRequested]
      @tripsCompleted.data.push [dateIndex, countComplete]
      @tripsRejected.data.push [dateIndex, countRejected]
      @tripsCancelled.data.push [dateIndex, countCancelled]
      @tripsError.data.push [dateIndex, countError]
      @serviceLateness.data.push [dateIndex, latenessAverage]
    @stats

  loadMap: () =>
      mapOptions =
          zoom: 4
          center: new google.maps.LatLng(37.09024, -95.712891)
          mapTypeId: google.maps.MapTypeId.TERRAIN
          disableDefaultUI: false
          scrollwheel: true
          draggable: true
          navigationControl: true
          mapTypeControl: false
          scaleControl: true
          disableDoubleClickZoom: false
      window.map = new google.maps.Map(document.getElementById(@mapContainer), mapOptions)
      @heatmap = new google.maps.visualization.HeatmapLayer()
      drawingManager = new google.maps.drawing.DrawingManager(
          drawingMode: null
          drawingControl: true
          drawingControlOptions:
              position: google.maps.ControlPosition.TOP_CENTER
              drawingModes: [google.maps.drawing.OverlayType.CIRCLE ]
          circleOptions:
              fillColor: "#ffff00"
              fillOpacity: .13
              strokeWeight: 2
              clickable: false
              zIndex: 1
              editable: true
      )
      homeControlDiv = document.createElement("div")
      homeControl = new @HomeControl(homeControlDiv, window.map)
      homeControlDiv.index = 1
      window.map.controls[google.maps.ControlPosition.TOP_RIGHT].push homeControlDiv

      drawingManager.setMap window.map
      google.maps.event.addListener drawingManager, "circlecomplete", (circle) ->
         circle.isHere = (latLng) ->
            @getBounds().contains(latLng) and google.maps.geometry.spherical.computeDistanceBetween(@getCenter(), latLng) <= @getRadius()
         if window.selectedGeographicZone isnt null
            window.selectedGeographicZone.setMap null
         window.selectedGeographicZone = circle
         window.map.fitBounds circle.getBounds()
         updateRequest = window.timeSeries.createUpdateRequest({togglesUpdate: true, zoomUpdate: true})
         window.timeSeries.update(updateRequest)

  loadSelectorFilters: (networks) =>
    for network in networks
      @networks[network.client_id] = network
      if $('#getUserRole').html() is 'network'
        @selectedNetwork = network.client_id
      else
        $('#networks-select').append('<option value="' + network.client_id + '">' + network.full_name + '</option>')
      for product in network.products
        product.client_id = network.client_id
        @products[product.name] = product
        $('#products-select').append('<option value="' + product.name + '">' + product.name + '</option>')

  HomeControl: (controlDiv, map) =>
        controlDiv.style.padding = "5px"

        controlUI = document.createElement("div")
        controlUI.style.backgroundColor = "white"
        controlUI.style.borderStyle = "solid"
        controlUI.style.borderWidth = "2px"
        controlUI.style.cursor = "pointer"
        controlUI.style.textAlign = "center"
        controlUI.title = "Clear filter"
        controlDiv.appendChild controlUI

        controlText = document.createElement("div")
        controlText.style.fontFamily = "Arial,sans-serif"
        controlText.style.fontSize = "12px"
        controlText.style.paddingLeft = "4px"
        controlText.style.paddingRight = "4px"
        controlText.innerHTML = "<b>Reset</b>"
        controlUI.appendChild controlText

        google.maps.event.addDomListener controlUI, "click", =>
          if window.selectedGeographicZone isnt null
              window.selectedGeographicZone.setMap null
              window.selectedGeographicZone = null
          updateRequest = @createUpdateRequest({togglesUpdate: true, clearZoomUpdate: true, zoomUpdate: true})
          @update(updateRequest)

  loadCharts: () =>
    if @forecastDataMode
        @forecastChart = new Highcharts.Chart
          chart:
              renderTo: @forecastChartContainerId
              type: 'spline'
          title:
              text: ''
          xAxis:
              type: 'datetime',
              dateTimeLabelFormats:
                  month: '%e. %b',
                  year: '%b'
              title:
                  text: ''
          yAxis:
              title:
                  text: ''
              max: 100
          tooltip:
              headerFormat: '<b>{series.name}</b><br>',
              pointFormat: '{point.x:%e. %b}: {point.y:.2f}'
          series: [

          ]
    else
        @historicChart = new Highcharts.Chart
          chart:
            renderTo: @historicChartContainerId
            type: 'spline'
          title:
            text: ''
          xAxis:
            type: 'datetime',
            dateTimeLabelFormats:
              month: '%e. %b',
              year: '%b'
            title:
              text: ''
          yAxis:
            title:
              text: ''
            max: 100
          tooltip:
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x:%e. %b}: {point.y:.2f}'
          series: [

          ]

  refreshCharts: () =>
    if @historicChart?
        @historicChart.redraw()
    if @forecastChart?
        @forecastChart.redraw()

  showLoadingIndicator: () =>
    $('.loading-indicator>img').show()

  hideLoadingIndicator: () =>
    $('.loading-indicator>img').hide()

  getCentrePointFromListOfCoordinates: (list) =>
    minlat = null
    minlng = null
    maxlat = null
    maxlng = null
    for point in list
        minlat = if !minlat? or point.lat < minlat then point.lat else minlat
        maxlat = if !maxlat? or point.lat > maxlat then point.lat else maxlat
        minlng = if !minlng? or point.lng < minlng then point.lng else minlng
        maxlng = if !maxlng? or point.lng > maxlng then point.lng else maxlng

    lat = maxlat - ((maxlat - minlat)/2)
    lng = maxlng - ((maxlng - minlng)/2)
    {lat: lat, lng: lng, maxlat: maxlat, maxlng: maxlng, minlat: minlat, minlng: minlng}

$('.developer.statistics').ready ->
  window.timeSeries = new TimeSeries(new TripThru($('#access_token').val()), 'historic-chart', 'forecast-chart', 'heat-map')

  reset()
  window.tripthruinterval = setInterval =>
    timeSeries.update()
  , 15000
