class TimeSeries

  constructor: (@gateway, @historicChartContainerId, @forecastChartContainerId, @mapContainer) ->
    @gateway.getPartners(@loadSelectorFleets)
    @startDate = new Date()
    @endDate = new Date()
    @data = null

    @YAxisMax = 100

    @historicChart = null
    @forecastChart = null
    @map = null
    @heatmap = null
    @fleets = {}
    @tripsById = {}


    @selectedStat = 'tripsCompleted'
    @selectedFleet = 'All'
    @chartType = 'series'
    @chartTypeChanged = false
    @realtimeMode = true
    @percentageMode = true
    @forecastDataMode = false
    @dataModeChanged = false
    @realtimeModeInterval  = {
        seconds: true
        hours: false
        days: false
        weeks: false
        months: false
    }

    @tripsCompletedSelected =   true
    @tripsCancelledSelected =   true
    @tripsRejectedSelected =    true
    @tripsErrorSelected =       true
    @timeEnrouteSelected =      false
    @timeOccupiedSelected =     false
    @timeIdleSelected =         false
    @mileageEnrouteSelected =   false
    @mileageOccupiedSelected =  false
    @serviceGoalSelected =      false
    @serviceLatenessSelected =  false
    @ratingDriversSelected =    false
    @ratingPassengersSelected = false

    $('#trips-completed-filter-button').addClass('active')
    $('#trips-rejected-filter-button').addClass('active')
    $('#trips-cancelled-filter-button').addClass('active')
    $('#trips-error-filter-button').addClass('active')
    $('#realtime-button').addClass('active')
    $('#percentage-button').addClass('active')
    $('#seconds-button').addClass('active')
    $('#datepicker>input').attr("disabled", true)
    $('#data-mode-toggle-container>#toggle-button>.image-wrapper').addClass('active')

    @tripsCompleted = { name: 'Completed trips', id: 'Completed trips', data: []}
    @tripsCancelled = { name: 'Cancelled trips', id: 'Cancelled trips', data: []}
    @tripsRejected =  { name: 'Rejected trips', id: 'Rejected trips', data: []}
    @tripsError =     { name: 'Error trips', id: 'Error trips', data: []}
    @timeEnroute =      { name: 'Time enroute', id: 'Time enroute', data: []}
    @timeOccupied =     { name: 'Time occupied', id: 'Time occupied', data: []}
    @timeIdle =         { name: 'Time idle', id: 'Time idle', data: []}
    @mileageEnroute =   { name: 'Mileage enroute', id: 'Mileage enroute', data: []}
    @mileageOccupied =  { name: 'Mileage occupied', id: 'Mileage occupied', data: []}
    @serviceGoal =      { name: 'In service', id: 'In service', data: []}
    @serviceLateness =  { name: 'Out service', id: 'Out service', data: []}
    @ratingDrivers =    { name: 'Drivers rating', id: 'Drivers rating', data: []}
    @ratingPassengers = { name: 'Passengers rating', id: 'Passengers rating', data: []}

    @tripsCompletedF = { name: 'Completed trips', id: 'Completed trips', data: []}
    @tripsCancelledF = { name: 'Cancelled trips', id: 'Cancelled trips', data: []}
    @tripsRejectedF =  { name: 'Rejected trips', id: 'Rejected trips', data: []}
    @tripsErrorF =     { name: 'Error trips', id: 'Error trips', data: []}
    @timeEnrouteF =      { name: 'Time enroute', id: 'Time enroute', data: []}
    @timeOccupiedF =     { name: 'Time occupied', id: 'Time occupied', data: []}
    @timeIdleF =         { name: 'Time idle', id: 'Time idle', data: []}
    @mileageEnrouteF =   { name: 'Mileage enroute', id: 'Mileage enroute', data: []}
    @mileageOccupiedF =  { name: 'Mileage occupied', id: 'Mileage occupied', data: []}
    @serviceGoalF =      { name: 'In service', id: 'In service', data: []}
    @serviceLatenessF =  { name: 'Out service', id: 'Out service', data: []}
    @ratingDriversF =    { name: 'Drivers rating', id: 'Drivers rating', data: []}
    @ratingPassengersF = { name: 'Passengers rating', id: 'Passengers rating', data: []}

    @dates = [
      Date.UTC(2014, 5, 25, 0, 0, 0)
      Date.UTC(2014, 5, 25, 1, 0, 0)
      Date.UTC(2014, 5, 25, 2, 0, 0)
      Date.UTC(2014, 5, 25, 3, 0, 0)
      Date.UTC(2014, 5, 25, 4, 0, 0)
      Date.UTC(2014, 5, 25, 5, 0, 0)
      Date.UTC(2014, 5, 25, 6, 0, 0)
      Date.UTC(2014, 5, 25, 7, 0, 0)
      Date.UTC(2014, 5, 25, 8, 0, 0)
      Date.UTC(2014, 5, 25, 9, 0, 0)
      Date.UTC(2014, 5, 25, 10, 0, 0)
      Date.UTC(2014, 5, 25, 11, 0, 0)
      Date.UTC(2014, 5, 25, 12, 0, 0)
      Date.UTC(2014, 5, 25, 13, 0, 0)
      Date.UTC(2014, 5, 25, 14, 0, 0)
      Date.UTC(2014, 5, 25, 15, 0, 0)
      Date.UTC(2014, 5, 25, 16, 0, 0)
      Date.UTC(2014, 5, 25, 17, 0, 0)
      Date.UTC(2014, 5, 25, 18, 0, 0)
      Date.UTC(2014, 5, 25, 19, 0, 0)
      Date.UTC(2014, 5, 25, 20, 0, 0)
      Date.UTC(2014, 5, 25, 21, 0, 0)
      Date.UTC(2014, 5, 25, 22, 0, 0)
      Date.UTC(2014, 5, 25, 23, 0, 0)
    ]

    @loadCharts()
    @generateRandomData(@dates)

    $('#forecast-chart-container').hide()
    @setFilterEvents()

    $('#seconds-button').click =>
        if @realtimeMode and not $('#seconds-button').hasClass('active')
            $('#realtime-intervals-container').find('.active').removeClass('active')
            for name of @realtimeModeInterval
                @realtimeModeInterval[name] = false
            $('#seconds-button').addClass('active')
            @realtimeModeInterval.seconds = true
            @update()

    $('#minutes-button').click =>
      if @realtimeMode and  not $('#minutes-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#minutes-button').addClass('active')
          @realtimeModeInterval.minutes = true
          @update()

    $('#hours-button').click =>
      if @realtimeMode and  not $('#hours-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#hours-button').addClass('active')
          @realtimeModeInterval.hours = true
          @update()

    $('#days-button').click =>
      if @realtimeMode and  not $('#days-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#days-button').addClass('active')
          @realtimeModeInterval.days = true
          @update()

    $('#weeks-button').click =>
      if @realtimeMode and  not $('#weeks-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#weeks-button').addClass('active')
          @realtimeModeInterval.weeks = true
          @update()

    $('#realtime-button').click =>
      if $('#realtime-button').hasClass('active')
        @realtimeMode = false
        $('#datepicker>input').attr("disabled", false)
        $('#realtime-intervals-container>input').addClass('disabled')
        @update()
      else
        @realtimeMode = true
        $('#datepicker>input').attr("disabled", true)
        $('#realtime-intervals-container>input').removeClass('disabled')
        @loadCharts()
        @update()
      $('#realtime-button').toggleClass('active')

    $('#partners-select').change =>
      @selectedFleet = $('#partners-select option:selected').val()
      @update()

    $('#chart-type-toggle-container>#toggle-button').click =>
        if @chartType == 'series'
            @chartType = 'map'
            $('#statistics-toggle').hide()
            $('#heatmap-toggle').show()
        else
            @chartType = 'series'
            $('#heatmap-toggle').hide()
            $('#statistics-toggle').show()
        @chartTypeChanged = true
        @setFilterEvents()
        @update()
        @chartTypeChanged = false

    $('#historic-toggle-container>#toggle-button').click =>
        if @forecastDataMode
            @forecastDataMode = false
            $('#forecast-toggle').hide()
            $('#historic-toggle').show()
        else
            @forecastDataMode = true
            $('#historic-toggle').hide()
            $('#forecast-toggle').show()
        @dataModeChanged = true
        @update()
        @dataModeChanged = false

    $('#data-mode-toggle-container>#toggle-button').click =>
        @percentageMode = not @percentageMode
        $('#data-mode-toggle-container>#toggle-button>.image-wrapper').toggleClass('active')
        @update()

    @update()
    clearInterval(window.tripthruinterval)
    window.tripthruinterval = setInterval =>
      if @realtimeMode and not @updatingRealTime
        @updatingRealTime = true
        @update()
    , 15000

  setFilterEvents: () =>
      if @chartType == 'series'
          $('.filter-button').removeClass('active')
          $('#trips-completed-filter-button').toggleClass('active')
          $('#trips-rejected-filter-button').toggleClass('active')
          $('#trips-cancelled-filter-button').toggleClass('active')
          $('#trips-error-filter-button').toggleClass('active')
          $('#trips-completed-filter-button').off('click').on('click', =>
              $('#trips-completed-filter-button').toggleClass('active')
              @tripsCompletedSelected= not @tripsCompletedSelected
              @update([{
                  name: 'Completed trips'
                  historicData: @tripsCompleted
                  forecastData: @tripsCompletedF
                  load: @tripsCompletedSelected
              }]))

          $('#trips-rejected-filter-button').off('click').on('click', =>
              $('#trips-rejected-filter-button').toggleClass('active')
              @tripsRejectedSelected= not @tripsRejectedSelected
              @update([{
                  name: 'Rejected trips'
                  historicData: @tripsRejectedF
                  forecastData: @tripsRejectedF
                  load: @tripsRejectedSelected
              }]))

          $('#trips-cancelled-filter-button').off('click').on('click', =>
              $('#trips-cancelled-filter-button').toggleClass('active')
              @tripsCancelledSelected= not @tripsCancelledSelected
              @update([{
                  name: 'Cancelled trips'
                  historicData: @tripsCancelled
                  forecastData: @tripsCancelledF
                  load: @tripsCancelledSelected
              }]))

          $('#trips-error-filter-button').off('click').on('click', =>
              $('#trips-error-filter-button').toggleClass('active')
              @tripsErrorSelected= not @tripsErrorSelected
              @update([{
                  name: 'Error trips'
                  historicData: @tripsError
                  forecastData: @tripsErrorF
                  load: @tripsErrorSelected
              }]))

          $('#time-enroute-filter-button').off('click').on('click', =>
              $('#time-enroute-filter-button').toggleClass('active')
              @timeEnrouteSelected = not @timeEnrouteSelected
              @update([{
                  name: 'Time enroute'
                  historicData: @timeEnroute
                  forecastData: @timeEnrouteF
                  load: @timeEnrouteSelected
              }]))

          $('#time-occupied-filter-button').off('click').on('click', =>
              $('#time-occupied-filter-button').toggleClass('active')
              @timeOccupiedSelected = not @timeOccupiedSelected
              @update([{
                  name: 'Time occupied'
                  historicData: @timeOccupied
                  forecastData: @timeOccupiedF
                  load: @timeOccupiedSelected
              }]))

          $('#time-idle-filter-button').off('click').on('click', =>
              $('#time-idle-filter-button').toggleClass('active')
              @timeIdleSelected = not @timeIdleSelected
              @update([{
                  name: 'Time idle'
                  historicData: @timeIdle
                  forecastData: @timeIdleF
                  load: @timeIdleSelected
              }]))

          $('#mileage-enroute-filter-button').off('click').on('click', =>
              $('#mileage-enroute-filter-button').toggleClass('active')
              @mileageEnrouteSelected = not @mileageEnrouteSelected
              @update([{
                  name: 'Mileage enroute'
                  historicData: @mileageEnroute
                  forecastData: @mileageEnrouteF
                  load: @mileageEnrouteSelected
              }]))

          $('#mileage-occupied-filter-button').off('click').on('click', =>
              $('#mileage-occupied-filter-button').toggleClass('active')
              @mileageOccupiedSelected = not @mileageOccupiedSelected
              @update([{
                  name: 'Mileage occupied'
                  historicData: @mileageOccupied
                  forecastData: @mileageOccupiedF
                  load: @mileageOccupiedSelected
              }]))

          $('#service-goal-filter-button').off('click').on('click', =>
              $('#service-goal-filter-button').toggleClass('active')
              @serviceGoalSelected = not @serviceGoalSelected
              @update([{
                  name: 'In service'
                  historicData: @serviceGoal
                  forecastData: @serviceGoalF
                  load: @serviceGoalSelected
              }]))

          $('#service-lateness-filter-button').off('click').on('click', =>
              $('#service-lateness-filter-button').toggleClass('active')
              @serviceLatenessSelected = not @serviceLatenessSelected
              @update([{
                  name: 'Out service'
                  historicData: @serviceLateness
                  forecastData: @serviceLatenessF
                  load: @serviceLatenessSelected
              }]))

          $('#ratings-drivers-filter-button').off('click').on('click', =>
              $('#ratings-drivers-filter-button').toggleClass('active')
              @ratingDriversSelected = not @ratingDriversSelected
              @update([{
                  name: 'Rating drivers'
                  historicData: @ratingDrivers
                  forecastData: @ratingDriversF
                  load: @ratingDriversSelected
              }]))

          $('#ratings-passengers-filter-button').off('click').on('click', =>
              $('#ratings-passengers-filter-button').toggleClass('active')
              @ratingPassengersSelected = not @ratingPassengersSelected
              @update([{
                  name: 'Rating passengers'
                  historicData: @ratingPassengers
                  forecastData: @ratingPassengersF
                  load: @ratingPassengersSelected
              }]))
      else
          @selectedStat = 'Completed trips'
          $('.filter-button').removeClass('active')
          $('#trips-completed-filter-button').addClass('active')
          $('#trips-completed-filter-button').off('click').on('click', =>
              if @selectedStat != 'tripsCompleted'
                  $('.filter-button').removeClass('active')
                  $('#trips-completed-filter-button').addClass('active')
                  @selectedStat = 'Completed trips'
                  @update()
          )

          $('#trips-rejected-filter-button').off('click').on('click', =>
              if @selectedStat != 'tripsRejected'
                  $('.filter-button').removeClass('active')
                  $('#trips-rejected-filter-button').addClass('active')
                  @selectedStat = 'Rejected trips'
                  @update()
          )

          $('#trips-cancelled-filter-button').off('click').on('click', =>
              if @selectedStat != 'tripsCancelled'
                  $('.filter-button').removeClass('active')
                  $('#trips-cancelled-filter-button').addClass('active')
                  @selectedStat = 'Cancelled trips'
                  @update()
          )

          $('#trips-error-filter-button').off('click').on('click', =>
              if @selectedStat != 'tripsError'
                  $('.filter-button').removeClass('active')
                  $('#trips-error-filter-button').addClass('active')
                  @selectedStat = 'Error trips'
                  @update()
          )

          $('#time-enroute-filter-button').off('click').on('click', =>
              if @selectedStat != 'timeEnroute'
                  $('.filter-button').removeClass('active')
                  $('#time-enroute-filter-button').addClass('active')
                  @selectedStat = 'Time enroute'
                  @update()
          )

          $('#time-occupied-filter-button').off('click').on('click', =>
              if @selectedStat != 'timeOccupied'
                  $('.filter-button').removeClass('active')
                  $('#time-occupied-filter-button').addClass('active')
                  @selectedStat = 'Time occupied'
                  @update()
          )

          $('#time-idle-filter-button').off('click').on('click', =>
              if @selectedStat != 'timeIdle'
                  $('.filter-button').removeClass('active')
                  $('#time-idle-filter-button').addClass('active')
                  @selectedStat = 'Time idle'
                  @update()
          )

          $('#mileage-enroute-filter-button').off('click').on('click', =>
              if @selectedStat != 'mileageEnroute'
                  $('.filter-button').removeClass('active')
                  $('#mileage-enroute-filter-button').addClass('active')
                  @selectedStat = 'Mileage enroute'
                  @update()
          )

          $('#mileage-occupied-filter-button').off('click').on('click', =>
              if @selectedStat != 'mileageOccupied'
                  $('.filter-button').removeClass('active')
                  $('#mileage-occupied-filter-button').addClass('active')
                  @selectedStat = 'Mileage occupied'
                  @update()
          )

          $('#service-goal-filter-button').off('click').on('click', =>
              if @selectedStat != 'serviceGoal'
                  $('.filter-button').removeClass('active')
                  $('#service-goal-filter-button').addClass('active')
                  @selectedStat = 'Service goal'
                  @update()
          )

          $('#service-lateness-filter-button').off('click').on('click', =>
              if @selectedStat != 'serviceLateness'
                  $('.filter-button').removeClass('active')
                  $('#service-lateness-filter-button').addClass('active')
                  @selectedStat = 'Out service'
                  @update()
          )

          $('#ratings-drivers-filter-button').off('click').on('click', =>
              if @selectedStat != 'ratingDrivers'
                  $('.filter-button').removeClass('active')
                  $('#ratings-drivers-filter-button').addClass('active')
                  @selectedStat = 'Rating drivers'
                  @update()
          )

          $('#ratings-passengers-filter-button').off('click').on('click', =>
              if @selectedStat != 'ratingPassengers'
                  $('.filter-button').removeClass('active')
                  $('#ratings-passengers-filter-button').addClass('active')
                  @selectedStat = 'Rating passengers'
                  @update()
          )
      
  updateRealTime: () =>
    [startDate, intervalName, bucketSize, dates, intervals] = @getRealTimeQueryParams()
    $.get '/mongo_db/trips_count?startDate=' + startDate + '&interval=' + intervalName + '&bucketSize=' + bucketSize, (data) =>
      @tripsCompleted.data = []
      @tripsCompletedF.data = []
      @tripsRejected.data = []
      @tripsRejectedF.data = []
      @tripsCancelled.data = []
      @tripsCancelledF.data = []
      @tripsError.data = []
      @tripsErrorF.data = []

      @YAxisMax = 0
      i = 0
      for interval in intervals
        date = dates[i]
        id = interval

        count = data.filter((v) -> v._id.Status == 'Complete' and v._id.Interval == parseInt(id))
        countComplete = if count.length == 0 then 0 else count[0].count
        count = data.filter((v) -> v._id.Status == 'Cancelled' and v._id.Interval == parseInt(id))
        countCancelled = if count.length == 0 then 0 else count[0].count
        count = data.filter((v) -> v._id.Status == 'Rejected' and v._id.Interval == parseInt(id))
        countRejected = if count.length == 0 then 0 else count[0].count
        count = data.filter((v) -> v._id.Status == 'Error' and v._id.Interval == parseInt(id))
        countError = if count.length == 0 then 0 else count[0].count
        total = countComplete + countCancelled + countRejected + countError
        @YAxisMax = if total > @YAxisMax then total else @YAxisMax

        if @percentageMode
          countComplete = if countComplete > 0 then countComplete*100/total else 0
          countCancelled = if countCancelled > 0 then countCancelled*100/total else 0
          countRejected = if countRejected > 0 then countRejected*100/total else 0
          countError = if countError > 0 then countError*100/total else 0

        if @tripsCompletedSelected
          @tripsCompleted.data.push [date, countComplete]
          @tripsCompletedF.data.push [date, countComplete]
        if @tripsRejectedSelected
          @tripsRejected.data.push [date, countRejected]
          @tripsRejectedF.data.push [date, countRejected]
        if @tripsCancelledSelected
          @tripsCancelled.data.push [date, countCancelled]
          @tripsCancelledF.data.push [date, countCancelled]
        if @tripsErrorSelected
          @tripsError.data.push [date, countError]
          @tripsErrorF.data.push [date, countError]

        i++

      updateData = []
      updateData.push({
          name: 'Completed trips'
          historicData: @tripsCompleted
          forecastData: @tripsCompletedF
          load: @tripsCompletedSelected
        })
      updateData.push({
          name: 'Rejected trips'
          historicData: @tripsRejectedF
          forecastData: @tripsRejectedF
          load: @tripsRejectedSelected
        })
      updateData.push({
          name: 'Cancelled trips'
          historicData: @tripsCancelled
          forecastData: @tripsCancelledF
          load: @tripsCancelledSelected
        })
      updateData.push({
          name: 'Error trips'
          historicData: @tripsError
          forecastData: @tripsErrorF
          load: @tripsErrorSelected
        })
      @setSeries updateData
      @updatingRealTime = false

  getRealTimeQueryParams: () =>
      startDate = new Date()
      intervals = 0
      bucketSize = 1
      intervalName = ''
      if @realtimeModeInterval.seconds
          startDate.setMinutes(startDate.getMinutes()-10)
          intervals = 41
          bucketSize = 15
          intervalName = 'second'
      else if @realtimeModeInterval.minutes
          startDate.setHours(startDate.getHours()-10)
          intervals = 41
          bucketSize = 15
          intervalName = 'minute'
      else if @realtimeModeInterval.hours
          startDate.setDate(startDate.getDate()-2)
          intervals = 49
          intervalName = 'hour'
      else if @realtimeModeInterval.days
          startDate.setMonth(startDate.getMonth()-1)
          intervals = 33
          intervalName = 'day'
      else if @realtimeModeInterval.weeks
          startDate.setMonth(startDate.getMonth()-3)
          intervals = 14
          intervalName = 'week'
          bucketSize = 7
      returnDate = new Date(startDate)

      dates = []
      intervalIds = []
      for i in [0..intervals]
          interval = 0
          if @realtimeModeInterval.seconds
              interval = startDate.getUTCHours()*3600 + startDate.getUTCMinutes()*60 + startDate.getUTCSeconds()
              dates.push startDate.getTime()
              intervalIds.push (interval/bucketSize).toFixed(0)
              startDate.setSeconds(startDate.getSeconds() + bucketSize)
          else if @realtimeModeInterval.minutes
              interval = startDate.getUTCHours()*60 + startDate.getUTCMinutes()
              dates.push startDate.getTime()
              intervalIds.push (interval/bucketSize).toFixed(0)
              startDate.setMinutes(startDate.getMinutes() + bucketSize)
          else if @realtimeModeInterval.hours
              interval = startDate.getDayOfYear() * 24 + startDate.getUTCHours()
              dates.push startDate.getTime()
              intervalIds.push (interval/bucketSize).toFixed(0)
              startDate.setHours(startDate.getHours() + bucketSize)
          else if @realtimeModeInterval.days
              interval = startDate.getDayOfYear()
              dates.push startDate.getTime()
              intervalIds.push (interval/bucketSize).toFixed(0)
              startDate.setDate(startDate.getDate() + bucketSize)
          else if @realtimeModeInterval.weeks
              interval = startDate.getUTCMonth() * 30.5 + startDate.getDayOfYear()
              dates.push startDate.getTime()
              intervalIds.push (interval/bucketSize).toFixed(0)
              startDate.setDate(startDate.getDate() + bucketSize)

      return [returnDate, intervalName, bucketSize, dates, intervalIds]

  update: (series) =>
    if @chartTypeChanged and @chartType == 'series'
        $('#map-container').hide()
        $('#time-series-container').show()
        @loadCharts()
    else if @chartTypeChanged and @chartType == 'map'
        $('#time-series-container').hide()
        $('#map-container').show()
        if !@map?
            @loadMap()
            google.maps.event.addDomListenerOnce(@map, "tilesloaded", () =>
                google.maps.event.addDomListenerOnce(@map, "tilesloaded", @update(series)))
        else
            google.maps.event.trigger(@map,'resize')

    if @dataModeChanged
        if @forecastDataMode
            $('#chart-title').html 'Forecast'
            if @chartType == 'series'
                $('#historic-chart-container').hide()
                $('#forecast-chart-container').show()
                @loadCharts()
        else
            $('#chart-title').html 'Historic'
            if @chartType == 'series'
                $('#forecast-chart-container').hide()
                $('#historic-chart-container').show()
                @loadCharts()

    if @realtimeMode
        @updateRealTime()
    else if series?
        @setSeries(series)
    else
        @loadCharts()
        @setSeries(@generateSeries())

  setSeries: (series) =>
    if @chartType == 'series'
        for serie in series
            if @forecastDataMode
                fserie = @forecastChart.get(serie.forecastData.name)
                if fserie?
                    fserie.remove(false)
                if serie.load
                    @forecastChart.addSeries(serie.forecastData, false, false)
            else
                hserie = @historicChart.get(serie.historicData.name)
                if hserie?
                    hserie.remove(false)
                if serie.load
                    @historicChart.addSeries(serie.historicData, false, false)
        if not @percentageMode
            if @forecastDataMode
                @forecastChart.yAxis[0].setExtremes(0, @YAxisMax)
            else
                @historicChart.yAxis[0].setExtremes(0, @YAxisMax)
        else
            if @forecastDataMode
                @forecastChart.yAxis[0].setExtremes(0, 100)
            else
                @historicChart.yAxis[0].setExtremes(0, 100)
        @refreshCharts()
    else
        last10Minutes = new Date();
        last10Minutes.setMinutes(last10Minutes.getMinutes()-10);
        date = +last10Minutes / 1000;
        $.get '/mongo_db/trips_list?startDate=' + date, (trips) =>
          @loadHeatMapTrips(trips, series)

  loadHeatMapTrips: (trips, series) =>
      tripsIds = []
      for newTrip in trips
          tripsIds.push newTrip._id
          if newTrip.id not of @tripsById
              @processTrip(newTrip)

      for id, trip of @tripsById
          if id not in tripsIds
              delete @tripsById[id]
      @drawHeatMap(series)

  drawHeatMap: (series) =>
      taxiData = []
      weight = 0
      if @realtimeMode
          if not @percentageMode
             weightValue = series[0].historicData.data[0][1] * 20
             weight = if weightValue > 100 then 100 else weightValue
          else
             weight = series[0].historicData.data[0][1]
      else
        for serie in series
            if serie.name == @selectedStat
                weight = series[0].historicData.data[0][1]
                break
      for key of @tripsById
          if @selectedFleet == 'All' or @selectedFleet == @tripsById[key].servicing
              taxiData.push {
                  location: new google.maps.LatLng(@tripsById[key].pickupLocation.lat,@tripsById[key].pickupLocation.lng),
                  weight: weight
              }
              taxiData.push {
                  location: new google.maps.LatLng(@tripsById[key].dropoffLocation.lat,@tripsById[key].dropoffLocation.lng),
                  weight: weight
              }
      if @selectedFleet != 'All'
          @map.panTo(new google.maps.LatLng(@fleets[@selectedFleet].coverage[0].center.lat, @fleets[@selectedFleet].coverage[0].center.lng))
      @heatmap.setMap null
      gradient = [ "rgba(0, 255, 255, 0)", "rgba(13, 0, 229, 1)", "rgba(0, 74, 225, 1)", "rgba(0, 159, 221, 1)", "rgba(0, 217, 193, 1)", "rgba(0, 213, 106, 1)", "rgba(0, 210, 22, 1)", "rgba(58, 206, 0, 1)", "rgba(135, 202, 0, 1)", "rgba(198, 186, 0, 1)", "rgba(194, 106, 0, 1)", "rgba(191, 30, 0, 1)" ]
      @heatmap = new google.maps.visualization.HeatmapLayer({
          data: taxiData,
          radius: 30,
          maxIntensity: 100,
          gradient: gradient
      })
      @heatmap.setMap @map


  processTrip: (newTrip) =>
      driverLocation =
          if newTrip.driverLocation? then new Location(newTrip.driverLocation.lat, newTrip.driverLocation.lng, null) else null
      driverInitialLocation =
          if newTrip.driverInitialLocation? then new Location(newTrip.driverInitialLocation.lat, newTrip.driverInitalLocation.lng, null) else null
      trip = new Trip(
              newTrip._id
              newTrip.passengerName
              newTrip.pickupTime
              new Location(newTrip.PickupLocation.Lat, newTrip.PickupLocation.Lng, null, false)
              newTrip.OriginatingPartnerName
              newTrip.ServicingPartnerName
              newTrip.status
              newTrip.eta
              newTrip.price
              newTrip.driverName
              driverLocation
              new Location(newTrip.DropoffLocation.Lat, newTrip.DropoffLocation.Lng, null, false)
              driverInitialLocation
      )
      @tripsById[trip.getId()] = trip

  generateSeries: () =>
    @generateRandomData(@dates)
    [
        {
            name: 'Completed trips'
            historicData: @tripsCompleted
            forecastData: @tripsCompletedF
            load: @tripsCompletedSelected
        },
        {
            name: 'Rejected trips'
            historicData: @tripsRejectedF
            forecastData: @tripsRejectedF
            load: @tripsRejectedSelected
        },
        {
            name: 'Cancelled trips'
            historicData: @tripsCancelled
            forecastData: @tripsCancelledF
            load: @tripsCancelledSelected
        },
        {
            name: 'Error trips'
            historicData: @tripsError
            forecastData: @tripsErrorF
            load: @tripsErrorSelected
        },
        {
            name: 'Time enroute'
            historicData: @timeEnroute
            forecastData: @timeEnrouteF
            load: @timeEnrouteSelected
        },
        {
            name: 'Time occupied'
            historicData: @timeOccupied
            forecastData: @timeOccupiedF
            load: @timeOccupiedSelected
        },
        {
            name: 'Time idle'
            historicData: @timeIdle
            forecastData: @timeIdleF
            load: @timeIdleSelected
        },
        {
            name: 'Mileage enroute'
            historicData: @mileageEnroute
            forecastData: @mileageEnrouteF
            load: @mileageEnrouteSelected
        },
        {
            name: 'Mileage occupied'
            historicData: @mileageOccupied
            forecastData: @mileageOccupiedF
            load: @mileageOccupiedSelected
        },
        {
            name: 'In service'
            historicData: @serviceGoal
            forecastData: @serviceGoalF
            load: @serviceGoalSelected
        },
        {
            name: 'Out service'
            historicData: @serviceLateness
            forecastData: @serviceLatenessF
            load: @serviceLatenessSelected
        },
        {
            name: 'Rating drivers'
            historicData: @ratingDrivers
            forecastData: @ratingDriversF
            load: @ratingDriversSelected
        },
        {
            name: 'Rating passengers'
            historicData: @ratingPassengers
            forecastData: @ratingPassengersF
            load: @ratingPassengersSelected
        }
    ]

  loadMap: () =>
      mapOptions =
          zoom: 4
          center: new google.maps.LatLng(37.09024, -95.712891)
          mapTypeId: google.maps.MapTypeId.TERRAIN
          disableDefaultUI: false
          scrollwheel: true
          draggable: true
          navigationControl: true
          mapTypeControl: false
          scaleControl: true
          disableDoubleClickZoom: false
      @map = new google.maps.Map(document.getElementById(@mapContainer), mapOptions)
      @heatmap = new google.maps.visualization.HeatmapLayer()

  loadSelectorFleets: (fleets) =>
      for fleet in fleets.fleets
          if fleet.fleetName == "TripThru San Francisco"
              continue
          @fleets[fleet.fleetName] =  fleet
          $('#partners-select').append('<option value="' + fleet.fleetName + '">' + fleet.fleetName + '</option>')

  loadCharts: () =>
    if @forecastDataMode
        @forecastChart = new Highcharts.Chart
          chart:
              renderTo: @forecastChartContainerId
              type: 'spline'
          title:
              text: ''
          xAxis:
              type: 'datetime',
              dateTimeLabelFormats:
                  month: '%e. %b',
                  year: '%b'
              title:
                  text: ''
          yAxis:
              title:
                  text: ''
              max: 100
          tooltip:
              headerFormat: '<b>{series.name}</b><br>',
              pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
          series: [

          ]
    else
        @historicChart = new Highcharts.Chart
          chart:
            renderTo: @historicChartContainerId
            type: 'spline'
          title:
            text: ''
          xAxis:
            type: 'datetime',
            dateTimeLabelFormats:
              month: '%e. %b',
              year: '%b'
            title:
              text: ''
          yAxis:
            title:
              text: ''
            max: 100
          tooltip:
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
          series: [

          ]

  refreshCharts: () =>
    if @historicChart?
        @historicChart.redraw()
    if @forecastChart?
        @forecastChart.redraw()


  generateRandomData: (dates) =>
    @YAxisMax = 0
    @tripsCompleted.data = []
    @tripsCancelled.data = []
    @tripsRejected.data = []
    @tripsError.data = []
    @timeEnroute.data = []
    @timeOccupied.data = []
    @timeIdle.data = []
    @mileageEnroute.data = []
    @mileageOccupied.data = []
    @serviceGoal.data = []
    @serviceLateness.data = []
    @ratingDrivers.data = []
    @ratingPassengers.data = []

    @tripsCompletedF.data = []
    @tripsCancelledF.data = []
    @tripsRejectedF.data = []
    @tripsErrorF.data = []
    @timeEnrouteF.data = []
    @timeOccupiedF.data = []
    @timeIdleF.data = []
    @mileageEnrouteF.data = []
    @mileageOccupiedF.data = []
    @serviceGoalF.data = []
    @serviceLatenessF.data = []
    @ratingDriversF.data = []
    @ratingPassengersF.data = []

    for date in dates
      @tripsCompleted.data.push @r(date)
      @tripsCancelled.data.push @r(date)
      @tripsRejected.data.push  @r(date)
      @tripsError.data.push     @r(date)
      @timeEnroute.data.push      @r(date)
      @timeOccupied.data.push     @r(date)
      @timeIdle.data.push         @r(date)
      @mileageEnroute.data.push   @r(date)
      @mileageOccupied.data.push  @r(date)
      @serviceGoal.data.push      @r(date)
      @serviceLateness.data.push  @r(date)
      @ratingDrivers.data.push    @r(date)
      @ratingPassengers.data.push @r(date)

      @tripsCompletedF.data.push @r(date)
      @tripsCancelledF.data.push @r(date)
      @tripsRejectedF.data.push  @r(date)
      @tripsErrorF.data.push     @r(date)
      @timeEnrouteF.data.push      @r(date)
      @timeOccupiedF.data.push     @r(date)
      @timeIdleF.data.push         @r(date)
      @mileageEnrouteF.data.push   @r(date)
      @mileageOccupiedF.data.push  @r(date)
      @serviceGoalF.data.push      @r(date)
      @serviceLatenessF.data.push  @r(date)
      @ratingDriversF.data.push    @r(date)
      @ratingPassengersF.data.push @r(date)

  r: (date) =>
    value = if @percentageMode then ((Math.random() * 70) + 30) else ((Math.random() * 40) + 10)
    if not @percentageMode
      @YAxisMax = if value > @YAxisMax then value else @YAxisMax
    [date, value]


$('.developer.statistics').ready ->
  clearInterval(window.tripthruinterval)
  timeSeries = new TimeSeries(new TripThru($('#access_token').val()), 'historic-chart', 'forecast-chart', 'heat-map')
  $('#datepicker').datepicker(
    format: "yyyy/mm/dd"
    startDate: "2012-01-01"
    endDate: "2015-01-01"
    todayBtn: "linked"
    autoclose: true
    todayHighlight: true
  );