########## STATISTICS #########

class TimeSeries

  constructor: (@historicChartContainerId, @forecastChartContainerId) ->
    @startDate = new Date()
    @endDate = new Date()
    @data = null

    @YAxisMax = 100

    @realtime = true
    @percentageDisplay = true
    @realtimeInterval  = {
        seconds: true
        hours: false
        days: false
        weeks: false
        months: false
    }

    @tripsCompletedSelected =   true
    @tripsCancelledSelected =   true
    @tripsRejectedSelected =    true
    @tripsErrorSelected =       true
    @timeEnrouteSelected =      false
    @timeOccupiedSelected =     false
    @timeIdleSelected =         false
    @mileageEnrouteSelected =   false
    @mileageOccupiedSelected =  false
    @serviceGoalSelected =      false
    @serviceLatenessSelected =  false
    @ratingDriversSelected =    false
    @ratingPassengersSelected = false

    $('#trips-completed-filter-button').toggleClass('active')
    $('#trips-rejected-filter-button').toggleClass('active')
    $('#trips-cancelled-filter-button').toggleClass('active')
    $('#trips-error-filter-button').toggleClass('active')
    $('#realtime-button').toggleClass('active')
    $('#percentage-button').toggleClass('active')
    $('#seconds-button').toggleClass('active')
    $('#datepicker>input').attr("disabled", true)

    @tripsCompleted = { name: 'Completed trips', id: 'Completed trips', data: []}
    @tripsCancelled = { name: 'Cancelled trips', id: 'Cancelled trips', data: []}
    @tripsRejected =  { name: 'Rejected trips', id: 'Rejected trips', data: []}
    @tripsError =     { name: 'Error trips', id: 'Error trips', data: []}
    @timeEnroute =      { name: 'Time enroute', id: 'Time enroute', data: []}
    @timeOccupied =     { name: 'Time occupied', id: 'Time occupied', data: []}
    @timeIdle =         { name: 'Time idle', id: 'Time idle', data: []}
    @mileageEnroute =   { name: 'Mileage enroute', id: 'Mileage enroute', data: []}
    @mileageOccupied =  { name: 'Mileage occupied', id: 'Mileage occupied', data: []}
    @serviceGoal =      { name: 'Service level', id: 'Service level', data: []}
    @serviceLateness =  { name: 'Service lateness', id: 'Service lateness', data: []}
    @ratingDrivers =    { name: 'Drivers rating', id: 'Drivers rating', data: []}
    @ratingPassengers = { name: 'Passengers rating', id: 'Passengers rating', data: []}

    @tripsCompletedF = { name: 'Completed trips', id: 'Completed trips', data: []}
    @tripsCancelledF = { name: 'Cancelled trips', id: 'Cancelled trips', data: []}
    @tripsRejectedF =  { name: 'Rejected trips', id: 'Rejected trips', data: []}
    @tripsErrorF =     { name: 'Error trips', id: 'Error trips', data: []}
    @timeEnrouteF =      { name: 'Time enroute', id: 'Time enroute', data: []}
    @timeOccupiedF =     { name: 'Time occupied', id: 'Time occupied', data: []}
    @timeIdleF =         { name: 'Time idle', id: 'Time idle', data: []}
    @mileageEnrouteF =   { name: 'Mileage enroute', id: 'Mileage enroute', data: []}
    @mileageOccupiedF =  { name: 'Mileage occupied', id: 'Mileage occupied', data: []}
    @serviceGoalF =      { name: 'Service level', id: 'Service level', data: []}
    @serviceLatenessF =  { name: 'Service lateness', id: 'Service lateness', data: []}
    @ratingDriversF =    { name: 'Drivers rating', id: 'Drivers rating', data: []}
    @ratingPassengersF = { name: 'Passengers rating', id: 'Passengers rating', data: []}

    @dates = [
      Date.UTC(2014, 5, 25, 0, 0, 0)
      Date.UTC(2014, 5, 25, 1, 0, 0)
      Date.UTC(2014, 5, 25, 2, 0, 0)
      Date.UTC(2014, 5, 25, 3, 0, 0)
      Date.UTC(2014, 5, 25, 4, 0, 0)
      Date.UTC(2014, 5, 25, 5, 0, 0)
      Date.UTC(2014, 5, 25, 6, 0, 0)
      Date.UTC(2014, 5, 25, 7, 0, 0)
      Date.UTC(2014, 5, 25, 8, 0, 0)
      Date.UTC(2014, 5, 25, 9, 0, 0)
      Date.UTC(2014, 5, 25, 10, 0, 0)
      Date.UTC(2014, 5, 25, 11, 0, 0)
      Date.UTC(2014, 5, 25, 12, 0, 0)
      Date.UTC(2014, 5, 25, 13, 0, 0)
      Date.UTC(2014, 5, 25, 14, 0, 0)
      Date.UTC(2014, 5, 25, 15, 0, 0)
      Date.UTC(2014, 5, 25, 16, 0, 0)
      Date.UTC(2014, 5, 25, 17, 0, 0)
      Date.UTC(2014, 5, 25, 18, 0, 0)
      Date.UTC(2014, 5, 25, 19, 0, 0)
      Date.UTC(2014, 5, 25, 20, 0, 0)
      Date.UTC(2014, 5, 25, 21, 0, 0)
      Date.UTC(2014, 5, 25, 22, 0, 0)
      Date.UTC(2014, 5, 25, 23, 0, 0)
    ]

    @generateRandomData(@dates)

    @historicChart = new Highcharts.Chart
      chart:
        renderTo: @historicChartContainerId
        type: 'spline'
      title:
        text: ''
      xAxis:
        type: 'datetime',
        dateTimeLabelFormats:
          hour: '%I %p',
          minute: '%I:%M %p'
        title:
          text: ''
      yAxis:
        title:
          text: ''
        min: 0
        max: 100
      tooltip:
        headerFormat: '<b>{series.name}</b><br>',
        pointFormat: '{point.x:%I:%M %p}: {point.y:.2f}'
      series: [
      ]

    @forecastChart = new Highcharts.Chart
      chart:
        renderTo: @forecastChartContainerId
        type: 'spline'
      title:
        text: ''
      xAxis:
        type: 'datetime',
        dateTimeLabelFormats:
          hour: '%I %p',
          minute: '%I:%M %p'
        title:
          text: ''
      yAxis:
        title:
          text: ''
        min: 0
        max: 100
      tooltip:
        headerFormat: '<b>{series.name}</b><br>',
        pointFormat: '{point.x:%I:%M %p}: {point.y:.2f}'
      series: [
      ]

    @updateRealTime()

    $('#percentage-button').click =>
      if not $('#percentage-button').hasClass('active')
        @percentageDisplay = true
        $('#absolute-button').toggleClass('active')
        $('#percentage-button').toggleClass('active')
        if @realtime
          @updateRealTime()
        else
          @populate()

    $('#seconds-button').click =>
        if not $('#seconds-button').hasClass('active')
            $('#realtime-intervals-container').find('.active').removeClass('active')
            for name of @realtimeInterval
                @realtimeInterval[name] = false
            $('#seconds-button').addClass('active')
            @realtimeInterval.seconds = true
            @updateRealTime()

    $('#minutes-button').click =>
      if not $('#minutes-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeInterval
            @realtimeInterval[name] = false
          $('#minutes-button').addClass('active')
          @realtimeInterval.minutes = true
          @updateRealTime()

    $('#hours-button').click =>
      if not $('#hours-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeInterval
            @realtimeInterval[name] = false
          $('#hours-button').addClass('active')
          @realtimeInterval.hours = true
          @updateRealTime()

    $('#days-button').click =>
      if not $('#days-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeInterval
            @realtimeInterval[name] = false
          $('#days-button').addClass('active')
          @realtimeInterval.days = true
          @updateRealTime()

    $('#weeks-button').click =>
      if not $('#weeks-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeInterval
            @realtimeInterval[name] = false
          $('#weeks-button').addClass('active')
          @realtimeInterval.weeks = true
          @updateRealTime()


    $('#absolute-button').click =>
      if not $('#absolute-button').hasClass('active')
        @percentageDisplay = false
        $('#absolute-button').toggleClass('active')
        $('#percentage-button').toggleClass('active')
        if @realtime
          @updateRealTime()
        else
          @populate()

    $('#realtime-button').click =>
      if $('#realtime-button').hasClass('active')
        @realtime = false
        $('#datepicker>input').attr("disabled", false)
        @populate()
      else
        @realtime = true
        $('#datepicker>input').attr("disabled", true)
        @clearCharts()
        @updateRealTime()
      $('#realtime-button').toggleClass('active')

    $('#partners-select').change =>
      if not @realtime
        @populate()

    $('#trips-completed-filter-button').click =>
      $('#trips-completed-filter-button').toggleClass('active')
      @tripsCompletedSelected= not @tripsCompletedSelected
      @update([{
        name: 'Completed trips'
        historicData: @tripsCompleted
        forecastData: @tripsCompletedF
        load: @tripsCompletedSelected
      }])

    $('#trips-rejected-filter-button').click =>
      $('#trips-rejected-filter-button').toggleClass('active')
      @tripsRejectedSelected= not @tripsRejectedSelected
      @update([{
        name: 'Rejected trips'
        historicData: @tripsRejectedF
        forecastData: @tripsRejectedF
        load: @tripsRejectedSelected
      }])

    $('#trips-cancelled-filter-button').click =>
      $('#trips-cancelled-filter-button').toggleClass('active')
      @tripsCancelledSelected= not @tripsCancelledSelected
      @update([{
        name: 'Cancelled trips'
        historicData: @tripsCancelled
        forecastData: @tripsCancelledF
        load: @tripsCancelledSelected
      }])

    $('#trips-error-filter-button').click =>
      $('#trips-error-filter-button').toggleClass('active')
      @tripsErrorSelected= not @tripsErrorSelected
      @update([{
        name: 'Error trips'
        historicData: @tripsError
        forecastData: @tripsErrorF
        load: @tripsErrorSelected
      }])

    $('#time-enroute-filter-button').click =>
      $('#time-enroute-filter-button').toggleClass('active')
      @timeEnrouteSelected = not @timeEnrouteSelected
      @update([{
        name: 'Time enroute'
        historicData: @timeEnroute
        forecastData: @timeEnrouteF
        load: @timeEnrouteSelected
      }])

    $('#time-occupied-filter-button').click =>
      $('#time-occupied-filter-button').toggleClass('active')
      @timeOccupiedSelected = not @timeOccupiedSelected
      @update([{
        name: 'Time occupied'
        historicData: @timeOccupied
        forecastData: @timeOccupiedF
        load: @timeOccupiedSelected
      }])

    $('#time-idle-filter-button').click =>
      $('#time-idle-filter-button').toggleClass('active')
      @timeIdleSelected = not @timeIdleSelected
      @update([{
        name: 'Time idle'
        historicData: @timeIdle
        forecastData: @timeIdleF
        load: @timeIdleSelected
      }])

    $('#mileage-enroute-filter-button').click =>
      $('#mileage-enroute-filter-button').toggleClass('active')
      @mileageEnrouteSelected = not @mileageEnrouteSelected
      @update([{
        name: 'Mileage enroute'
        historicData: @mileageEnroute
        forecastData: @mileageEnrouteF
        load: @mileageEnrouteSelected
      }])

    $('#mileage-occupied-filter-button').click =>
      $('#mileage-occupied-filter-button').toggleClass('active')
      @mileageOccupiedSelected = not @mileageOccupiedSelected
      @update([{
        name: 'Mileage occupied'
        historicData: @mileageOccupied
        forecastData: @mileageOccupiedF
        load: @mileageOccupiedSelected
      }])

    $('#service-goal-filter-button').click =>
      $('#service-goal-filter-button').toggleClass('active')
      @serviceGoalSelected = not @serviceGoalSelected
      @update([{
        name: 'Service level'
        historicData: @serviceGoal
        forecastData: @serviceGoalF
        load: @serviceGoalSelected
      }])

    $('#service-lateness-filter-button').click =>
      $('#service-lateness-filter-button').toggleClass('active')
      @serviceLatenessSelected = not @serviceLatenessSelected
      @update([{
        name: 'Service lateness'
        historicData: @serviceLateness
        forecastData: @serviceLatenessF
        load: @serviceLatenessSelected
      }])

    $('#ratings-drivers-filter-button').click =>
      $('#ratings-drivers-filter-button').toggleClass('active')
      @ratingDriversSelected = not @ratingDriversSelected
      @update([{
        name: 'Rating drivers'
        historicData: @ratingDrivers
        forecastData: @ratingDriversF
        load: @ratingDriversSelected
      }])

    $('#ratings-passengers-filter-button').click =>
      $('#ratings-passengers-filter-button').toggleClass('active')
      @ratingPassengersSelected = not @ratingPassengersSelected
      @update([{
        name: 'Rating passengers'
        historicData: @ratingPassengers
        forecastData: @ratingPassengersF
        load: @ratingPassengersSelected
      }])

    setInterval =>
      if @realtime and not @updatingRealTime
        @updatingRealTime = true
        @updateRealTime()
    , 15000

  updateRealTime: () =>
    [startDate, intervalName, bucketSize, datesByInterval] = @getRealTimeQueryParams()
    $.get '/mongo_db/trips_seconds?startDate=' + startDate + '&interval=' + intervalName + '&bucketSize=' + bucketSize, (data) =>
      x = startDate
      y = datesByInterval
      @tripsCompleted.data = []
      @tripsCompletedF.data = []
      @tripsRejected.data = []
      @tripsRejectedF.data = []
      @tripsCancelled.data = []
      @tripsCancelledF.data = []
      @tripsError.data = []
      @tripsErrorF.data = []

      @data = data.sort( (a, b) ->
        ((b._id.Interval < a._id.Interval) ? -1 : ((b._id.Interval > a._id.Interval) ? 1 : 0));
      )

      @YAxisMax = 0
      for id of datesByInterval
        date = datesByInterval[id]

        count = data.filter((v) -> v._id.Status == 'Complete' and v._id.Interval == parseInt(id))
        countComplete = if count.length == 0 then 0 else count[0].count
        count = data.filter((v) -> v._id.Status == 'Cancelled' and v._id.Interval == parseInt(id))
        countCancelled = if count.length == 0 then 0 else count[0].count
        count = data.filter((v) -> v._id.Status == 'Rejected' and v._id.Interval == parseInt(id))
        countRejected = if count.length == 0 then 0 else count[0].count
        count = data.filter((v) -> v._id.Status == 'Error' and v._id.Interval == parseInt(id))
        countError = if count.length == 0 then 0 else count[0].count
        total = countComplete + countCancelled + countRejected + countError
        @YAxisMax = if total > @YAxisMax then total else @YAxisMax

        if @percentageDisplay
          countComplete = if countComplete > 0 then countComplete*100/total else 0
          countCancelled = if countCancelled > 0 then countCancelled*100/total else 0
          countRejected = if countRejected > 0 then countRejected*100/total else 0
          countError = if countError > 0 then countError*100/total else 0

        if @tripsCompletedSelected
          @tripsCompleted.data.push [date, countComplete]
          @tripsCompletedF.data.push [date, countComplete]
        if @tripsRejectedSelected
          @tripsRejected.data.push [date, countRejected]
          @tripsRejectedF.data.push [date, countRejected]
        if @tripsCancelledSelected
          @tripsCancelled.data.push [date, countCancelled]
          @tripsCancelledF.data.push [date, countCancelled]
        if @tripsErrorSelected
          @tripsError.data.push [date, countError]
          @tripsErrorF.data.push [date, countError]

      updateData = []
      if @tripsCompletedSelected
        updateData.push({
          name: 'Completed trips'
          historicData: @tripsCompleted
          forecastData: @tripsCompletedF
          load: @tripsCompletedSelected
        })
      if @tripsRejectedSelected
        updateData.push({
          name: 'Rejected trips'
          historicData: @tripsRejectedF
          forecastData: @tripsRejectedF
          load: @tripsRejectedSelected
        })
      if @tripsCancelledSelected
        updateData.push({
          name: 'Cancelled trips'
          historicData: @tripsCancelled
          forecastData: @tripsCancelledF
          load: @tripsCancelledSelected
        })
      if @tripsErrorSelected
        updateData.push({
          name: 'Error trips'
          historicData: @tripsError
          forecastData: @tripsErrorF
          load: @tripsErrorSelected
        })
      @update updateData
      @updatingRealTime = false

  getRealTimeQueryParams: () =>
      startDate = new Date()
      intervals = 0
      bucketSize = 1
      intervalName = ''
      if @realtimeInterval.seconds
          startDate.setMinutes(startDate.getMinutes()-10)
          intervals = 41
          bucketSize = 15
          intervalName = 'second'
      else if @realtimeInterval.minutes
          startDate.setHours(startDate.getHours()-10)
          intervals = 41
          bucketSize = 15
          intervalName = 'minute'
      else if @realtimeInterval.hours
          startDate.setDate(startDate.getDate()-2)
          intervals = 49
          intervalName = 'hour'
      else if @realtimeInterval.days
          startDate.setMonth(startDate.getMonth()-1)
          intervals = 33
          intervalName = 'day'
      else if @realtimeInterval.weeks
          startDate.setMonth(startDate.getMonth()-3)
          intervals = 14
          intervalName = 'week'
          bucketSize = 7
      returnDate = new Date(startDate)

      datesByInterval = {}
      for i in [0..intervals]
          interval = 0
          if @realtimeInterval.seconds
              interval = startDate.getUTCHours()*3600 + startDate.getUTCMinutes()*60 + startDate.getUTCSeconds()
              datesByInterval[(interval/bucketSize).toFixed(0)] = startDate.getTime()
              startDate.setSeconds(startDate.getSeconds() + bucketSize)
          else if @realtimeInterval.minutes
              interval = startDate.getUTCHours()*60 + startDate.getUTCMinutes()
              datesByInterval[(interval/bucketSize).toFixed(0)] = startDate.getTime()
              startDate.setMinutes(startDate.getMinutes() + bucketSize)
          else if @realtimeInterval.hours
              interval = startDate.getDayOfYear() * 24 + startDate.getUTCHours()
              datesByInterval[(interval/bucketSize).toFixed(0)] = startDate.getTime()
              startDate.setHours(startDate.getHours() + bucketSize)
          else if @realtimeInterval.days
              interval = startDate.getDayOfYear()
              datesByInterval[(interval/bucketSize).toFixed(0)] = startDate.getTime()
              startDate.setDate(startDate.getDate() + bucketSize)
          else if @realtimeInterval.weeks
              interval = startDate.getUTCMonth() * 30.5 + startDate.getDayOfYear()
              datesByInterval[(interval/bucketSize).toFixed(0)] = startDate.getTime()
              startDate.setDate(startDate.getDate() + bucketSize)

      return [returnDate, intervalName, bucketSize, datesByInterval]

  populate: () =>
    @generateRandomData(@dates)
    @clearCharts()
    @update([
      {
        name: 'Completed trips'
        historicData: @tripsCompleted
        forecastData: @tripsCompletedF
        load: @tripsCompletedSelected
      },
      {
        name: 'Rejected trips'
        historicData: @tripsRejectedF
        forecastData: @tripsRejectedF
        load: @tripsRejectedSelected
      },
      {
        name: 'Cancelled trips'
        historicData: @tripsCancelled
        forecastData: @tripsCancelledF
        load: @tripsCancelledSelected
      },
      {
        name: 'Error trips'
        historicData: @tripsError
        forecastData: @tripsErrorF
        load: @tripsErrorSelected
      },
      {
        name: 'Time enroute'
        historicData: @timeEnroute
        forecastData: @timeEnrouteF
        load: @timeEnrouteSelected
      },
      {
        name: 'Time occupied'
        historicData: @timeOccupied
        forecastData: @timeOccupiedF
        load: @timeOccupiedSelected
      },
      {
        name: 'Time idle'
        historicData: @timeIdle
        forecastData: @timeIdleF
        load: @timeIdleSelected
      },
      {
        name: 'Mileage enroute'
        historicData: @mileageEnroute
        forecastData: @mileageEnrouteF
        load: @mileageEnrouteSelected
      },
      {
        name: 'Mileage occupied'
        historicData: @mileageOccupied
        forecastData: @mileageOccupiedF
        load: @mileageOccupiedSelected
      },
      {
        name: 'Service level'
        historicData: @serviceGoal
        forecastData: @serviceGoalF
        load: @serviceGoalSelected
      },
      {
        name: 'Service lateness'
        historicData: @serviceLateness
        forecastData: @serviceLatenessF
        load: @serviceLatenessSelected
      },
      {
        name: 'Rating drivers'
        historicData: @ratingDrivers
        forecastData: @ratingDriversF
        load: @ratingDriversSelected
      },
      {
        name: 'Rating passengers'
        historicData: @ratingPassengers
        forecastData: @ratingPassengersF
        load: @ratingPassengersSelected
      }


    ])

  update: (series) =>
    for serie in series
      hserie = @historicChart.get(serie.historicData.name)
      fserie = @forecastChart.get(serie.forecastData.name)
      if hserie?
        hserie.remove(false)
      if fserie?
        fserie.remove(false)
      if serie.load
        @historicChart.addSeries(serie.historicData, false, false)
        @forecastChart.addSeries(serie.forecastData, false, false)

    if not @percentageDisplay
      @historicChart.yAxis[0].setExtremes(0, @YAxisMax)
      @forecastChart.yAxis[0].setExtremes(0, @YAxisMax)
    else
      @historicChart.yAxis[0].setExtremes(0, 100)
      @forecastChart.yAxis[0].setExtremes(0, 100)
    @refreshCharts()

  clearCharts: () =>
    @historicChart = new Highcharts.Chart
      chart:
        renderTo: @historicChartContainerId
        type: 'spline'
      title:
        text: ''
      xAxis:
        type: 'datetime',
        dateTimeLabelFormats:
          month: '%e. %b',
          year: '%b'
        title:
          text: ''
      yAxis:
        title:
          text: ''
        max: 100
      tooltip:
        headerFormat: '<b>{series.name}</b><br>',
        pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
      series: [

      ]

    @forecastChart = new Highcharts.Chart
      chart:
        renderTo: @forecastChartContainerId
        type: 'spline'
      title:
        text: ''
      xAxis:
        type: 'datetime',
        dateTimeLabelFormats:
          month: '%e. %b',
          year: '%b'
        title:
          text: ''
      yAxis:
        title:
          text: ''
        max: 100
      tooltip:
        headerFormat: '<b>{series.name}</b><br>',
        pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
      series: [

      ]

  refreshCharts: () =>
    @historicChart.redraw()
    @forecastChart.redraw()


  generateRandomData: (dates) =>
    @YAxisMax = 0
    @tripsCompleted.data = []
    @tripsCancelled.data = []
    @tripsRejected.data = []
    @tripsError.data = []
    @timeEnroute.data = []
    @timeOccupied.data = []
    @timeIdle.data = []
    @mileageEnroute.data = []
    @mileageOccupied.data = []
    @serviceGoal.data = []
    @serviceLateness.data = []
    @ratingDrivers.data = []
    @ratingPassengers.data = []

    @tripsCompletedF.data = []
    @tripsCancelledF.data = []
    @tripsRejectedF.data = []
    @tripsErrorF.data = []
    @timeEnrouteF.data = []
    @timeOccupiedF.data = []
    @timeIdleF.data = []
    @mileageEnrouteF.data = []
    @mileageOccupiedF.data = []
    @serviceGoalF.data = []
    @serviceLatenessF.data = []
    @ratingDriversF.data = []
    @ratingPassengersF.data = []

    for date in dates
      @tripsCompleted.data.push @r(date)
      @tripsCancelled.data.push @r(date)
      @tripsRejected.data.push  @r(date)
      @tripsError.data.push     @r(date)
      @timeEnroute.data.push      @r(date)
      @timeOccupied.data.push     @r(date)
      @timeIdle.data.push         @r(date)
      @mileageEnroute.data.push   @r(date)
      @mileageOccupied.data.push  @r(date)
      @serviceGoal.data.push      @r(date)
      @serviceLateness.data.push  @r(date)
      @ratingDrivers.data.push    @r(date)
      @ratingPassengers.data.push @r(date)

      @tripsCompletedF.data.push @r(date)
      @tripsCancelledF.data.push @r(date)
      @tripsRejectedF.data.push  @r(date)
      @tripsErrorF.data.push     @r(date)
      @timeEnrouteF.data.push      @r(date)
      @timeOccupiedF.data.push     @r(date)
      @timeIdleF.data.push         @r(date)
      @mileageEnrouteF.data.push   @r(date)
      @mileageOccupiedF.data.push  @r(date)
      @serviceGoalF.data.push      @r(date)
      @serviceLatenessF.data.push  @r(date)
      @ratingDriversF.data.push    @r(date)
      @ratingPassengersF.data.push @r(date)

  r: (date) =>
    value = if @percentageDisplay then ((Math.random() * 70) + 30) else ((Math.random() * 40) + 10)
    if not @percentageDisplay
      @YAxisMax = if value > @YAxisMax then value else @YAxisMax
    [date, value]


$('.developer.statistics').ready ->
  timeSeries = new TimeSeries('historic-chart', 'forecast-chart')
  $('#datepicker').datepicker(
    format: "yyyy/mm/dd"
    startDate: "2012-01-01"
    endDate: "2015-01-01"
    todayBtn: "linked"
    autoclose: true
    todayHighlight: true
  );