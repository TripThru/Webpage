class TimeSeries

  constructor: (@gateway, @historicChartContainerId, @forecastChartContainerId, @mapContainer) ->
    @gateway.getPartners(@loadSelectorFilters)
    @data = null

    @YAxisMax = 100

    @historicChart = null
    @forecastChart = null
    @map = null
    @heatmap = null
    window.selectedGeographicZone = null
    @networks = {}
    @fleets = {}
    @drivers = {}
    @tripsById = {}


    @selectedStat = 'tripsCompleted'
    @selectedNetwork = 'All'
    @selectedFleet = 'All'
    @selectedDriver = 'All'
    @chartType = 'series'
    @chartTypeChanged = false
    @realtimeMode = true
    @percentageMode = true
    @forecastDataMode = false
    @dataModeChanged = false
    @togglesChanged  = false
    @dateChanged = false
    @realtimeModeInterval  = {
        seconds: true
        hours: false
        days: false
        weeks: false
        months: false
    }

    $('#start-date').datepicker(
      format: "yyyy/mm/dd"
      endDate: '+1d'
      todayBtn: "linked"
      autoclose: true
      todayHighlight: true
    )
    $('#end-date').datepicker(
      format: "yyyy/mm/dd"
      endDate: '+1d'
      todayBtn: "linked"
      autoclose: true
      todayHighlight: true
    )
    @startDate = new Date()
    @startDate.setDate(@startDate.getDate()-7)
    @endDate = new Date()
    $('#start-date').datepicker('update', @startDate)
    $('#end-date').datepicker('update', @endDate)

    @tripsArrivalSelected =     true
    @tripsCompletedSelected =   true
    @tripsCancelledSelected =   true
    @tripsRejectedSelected =    true
    @tripsErrorSelected =       true
    @timeEnrouteSelected =      false
    @timeOccupiedSelected =     false
    @timeIdleSelected =         false
    @mileageEnrouteSelected =   false
    @mileageOccupiedSelected =  false
    @serviceGoalSelected =      false
    @serviceLatenessSelected =  false
    @ratingDriversSelected =    false
    @ratingPassengersSelected = false

    $('#trips-arrival-filter-button').addClass('active')
    $('#trips-completed-filter-button').addClass('active')
    $('#trips-rejected-filter-button').addClass('active')
    $('#trips-cancelled-filter-button').addClass('active')
    $('#trips-error-filter-button').addClass('active')
    $('#realtime-button').addClass('active')
    $('#seconds-button').addClass('active')
    $('#datepicker>input').attr("disabled", true)
    $('#data-mode-toggle-container>#toggle-button>.image-wrapper').addClass('active')

    @tripsArrival =   { name: 'Arrival trips', id: 'Arrival trips', data: []}
    @tripsCompleted = { name: 'Completed trips', id: 'Completed trips', data: []}
    @tripsCancelled = { name: 'Cancelled trips', id: 'Cancelled trips', data: []}
    @tripsRejected =  { name: 'Rejected trips', id: 'Rejected trips', data: []}
    @tripsError =     { name: 'Error trips', id: 'Error trips', data: []}
    @timeEnroute =      { name: 'Time enroute', id: 'Time enroute', data: []}
    @timeOccupied =     { name: 'Time occupied', id: 'Time occupied', data: []}
    @timeIdle =         { name: 'Time idle', id: 'Time idle', data: []}
    @mileageEnroute =   { name: 'Mileage enroute', id: 'Mileage enroute', data: []}
    @mileageOccupied =  { name: 'Mileage occupied', id: 'Mileage occupied', data: []}
    @serviceGoal =      { name: 'In service', id: 'In service', data: []}
    @serviceLateness =  { name: 'Out service', id: 'Out service', data: []}
    @ratingDrivers =    { name: 'Drivers rating', id: 'Drivers rating', data: []}
    @ratingPassengers = { name: 'Passengers rating', id: 'Passengers rating', data: []}

    @loadCharts()

    $('#forecast-chart-container').hide()
    @setFilterEvents()

    $('#seconds-button').click =>
        if @realtimeMode and not $('#seconds-button').hasClass('active')
            $('#realtime-intervals-container').find('.active').removeClass('active')
            for name of @realtimeModeInterval
                @realtimeModeInterval[name] = false
            $('#seconds-button').addClass('active')
            @realtimeModeInterval.seconds = true
            @update()

    $('#minutes-button').click =>
      if @realtimeMode and  not $('#minutes-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#minutes-button').addClass('active')
          @realtimeModeInterval.minutes = true
          @update()

    $('#hours-button').click =>
      if @realtimeMode and  not $('#hours-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#hours-button').addClass('active')
          @realtimeModeInterval.hours = true
          @update()

    $('#days-button').click =>
      if @realtimeMode and  not $('#days-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#days-button').addClass('active')
          @realtimeModeInterval.days = true
          @update()

    $('#weeks-button').click =>
      if @realtimeMode and  not $('#weeks-button').hasClass('active')
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#weeks-button').addClass('active')
          @realtimeModeInterval.weeks = true
          @update()

    $('#realtime-button').click =>
      @togglesChanged = true
      if $('#realtime-button').hasClass('active')
        @realtimeMode = false
        $('#datepicker>input').attr("disabled", false)
        $('#realtime-intervals-container>input').addClass('disabled')
        @update()
      else
        @realtimeMode = true
        $('#datepicker>input').attr("disabled", true)
        $('#realtime-intervals-container>input').removeClass('disabled')
        @loadCharts()
        @update()
      $('#realtime-button').toggleClass('active')
      @togglesChanged = false

    $('#start-date').on 'changeDate', (e) =>
        @startDate = e.date
        @dateChanged = true
        @update()
        @dateChanged = false

    $('#end-date').on 'changeDate', (e) =>
        @endDate = e.date
        @dateChanged = true
        @update()
        @dateChanged = false

    $('#networks-select').change =>
      @selectedNetwork = $('#networks-select option:selected').val()
      @selectedFleet = 'All'
      $('#fleets-select').html '<option value="All" selected="selected">All</option>'
      if @selectedNetwork == 'All'
        for id, fleet of @fleets
          $('#fleets-select').append('<option value="' + fleet.fleetName + '">' + fleet.fleetName + '</option>')
      else
        for fleet in @networks[@selectedNetwork]
          $('#fleets-select').append('<option value="' + fleet + '">' + fleet + '</option>')
      @togglesChanged = true
      @update()
      @togglesChanged = false

    $('#fleets-select').change =>
      @selectedFleet = $('#fleets-select option:selected').val()
      @togglesChanged = true
      @update()
      @togglesChanged = false

    $('#drivers-select').change =>
      @selectedDriver = $('#drivers-select option:selected').val()
      @togglesChanged = true
      @update()
      @togglesChanged = false

    $('#chart-type-toggle-container>#toggle-button').click =>
        if @chartType == 'series'
            @chartType = 'map'
            $('#statistics-toggle').hide()
            $('#heatmap-toggle').show()
        else
            @chartType = 'series'
            $('#heatmap-toggle').hide()
            $('#statistics-toggle').show()
        @chartTypeChanged = true
        @setFilterEvents()
        @update()
        @chartTypeChanged = false

    $('#historic-toggle-container>#toggle-button').click =>
        if @forecastDataMode
            $('#forecast-toggle').hide()
            $('#historic-toggle').show()
        else
            $('#historic-toggle').hide()
            $('#forecast-toggle').show()
        @forecastDataMode = not @forecastDataMode
        @dataModeChanged = true
        @update()
        @dataModeChanged = false

    $('#data-mode-toggle-container>#toggle-button').click =>
        if @percentageMode
            $('#percentage-toggle').hide()
            $('#absolute-toggle').show()
        else
            $('#absolute-toggle').hide()
            $('#percentage-toggle').show()
        @percentageMode = not @percentageMode
        @togglesChanged = true
        @update()
        @togglesChanged = false

    @update()

  setFilterEvents: () =>
      if @chartType == 'series'
          $('.filter-button').removeClass('active')
          $('#trips-arrival-filter-button').toggleClass('active')
          $('#trips-completed-filter-button').toggleClass('active')
          $('#trips-rejected-filter-button').toggleClass('active')
          $('#trips-cancelled-filter-button').toggleClass('active')
          $('#trips-error-filter-button').toggleClass('active')

          $('#trips-arrival-filter-button').off('click').on 'click', =>
              $('#trips-arrival-filter-button').toggleClass('active')
              @tripsArrivalSelected= not @tripsArrivalSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false
          
          $('#trips-completed-filter-button').off('click').on 'click', =>
              $('#trips-completed-filter-button').toggleClass('active')
              @tripsCompletedSelected= not @tripsCompletedSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#trips-rejected-filter-button').off('click').on 'click', =>
              $('#trips-rejected-filter-button').toggleClass('active')
              @tripsRejectedSelected= not @tripsRejectedSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#trips-cancelled-filter-button').off('click').on 'click', =>
              $('#trips-cancelled-filter-button').toggleClass('active')
              @tripsCancelledSelected= not @tripsCancelledSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#trips-error-filter-button').off('click').on 'click', =>
              $('#trips-error-filter-button').toggleClass('active')
              @tripsErrorSelected= not @tripsErrorSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#time-enroute-filter-button').off('click').on 'click', =>
              $('#time-enroute-filter-button').toggleClass('active')
              @timeEnrouteSelected = not @timeEnrouteSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#time-occupied-filter-button').off('click').on 'click', =>
              $('#time-occupied-filter-button').toggleClass('active')
              @timeOccupiedSelected = not @timeOccupiedSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#time-idle-filter-button').off('click').on 'click', =>
              $('#time-idle-filter-button').toggleClass('active')
              @timeIdleSelected = not @timeIdleSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#mileage-enroute-filter-button').off('click').on 'click', =>
              $('#mileage-enroute-filter-button').toggleClass('active')
              @mileageEnrouteSelected = not @mileageEnrouteSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#mileage-occupied-filter-button').off('click').on 'click', =>
              $('#mileage-occupied-filter-button').toggleClass('active')
              @mileageOccupiedSelected = not @mileageOccupiedSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#service-goal-filter-button').off('click').on 'click', =>
              $('#service-goal-filter-button').toggleClass('active')
              @serviceGoalSelected = not @serviceGoalSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#service-lateness-filter-button').off('click').on 'click', =>
              $('#service-lateness-filter-button').toggleClass('active')
              @serviceLatenessSelected = not @serviceLatenessSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#ratings-drivers-filter-button').off('click').on 'click', =>
              $('#ratings-drivers-filter-button').toggleClass('active')
              @ratingDriversSelected = not @ratingDriversSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false

          $('#ratings-passengers-filter-button').off('click').on 'click', =>
              $('#ratings-passengers-filter-button').toggleClass('active')
              @ratingPassengersSelected = not @ratingPassengersSelected
              @togglesChanged = true
              @update()
              @togglesChanged = false
      else
          @selectedStat = 'Completed trips'
          $('.filter-button').removeClass('active')
          $('#trips-completed-filter-button').addClass('active')

          $('#trips-arrival-filter-button').off('click').on 'click', =>
              if @selectedStat != 'tripsArrival'
                  $('.filter-button').removeClass('active')
                  $('#trips-arrival-filter-button').addClass('active')
                  @selectedStat = 'Arrival trips'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false

          $('#trips-completed-filter-button').off('click').on 'click', =>
              if @selectedStat != 'tripsCompleted'
                  $('.filter-button').removeClass('active')
                  $('#trips-completed-filter-button').addClass('active')
                  @selectedStat = 'Completed trips'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#trips-rejected-filter-button').off('click').on 'click', =>
              if @selectedStat != 'tripsRejected'
                  $('.filter-button').removeClass('active')
                  $('#trips-rejected-filter-button').addClass('active')
                  @selectedStat = 'Rejected trips'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#trips-cancelled-filter-button').off('click').on 'click', =>
              if @selectedStat != 'tripsCancelled'
                  $('.filter-button').removeClass('active')
                  $('#trips-cancelled-filter-button').addClass('active')
                  @selectedStat = 'Cancelled trips'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#trips-error-filter-button').off('click').on 'click', =>
              if @selectedStat != 'tripsError'
                  $('.filter-button').removeClass('active')
                  $('#trips-error-filter-button').addClass('active')
                  @selectedStat = 'Error trips'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#time-enroute-filter-button').off('click').on 'click', =>
              if @selectedStat != 'timeEnroute'
                  $('.filter-button').removeClass('active')
                  $('#time-enroute-filter-button').addClass('active')
                  @selectedStat = 'Time enroute'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#time-occupied-filter-button').off('click').on 'click', =>
              if @selectedStat != 'timeOccupied'
                  $('.filter-button').removeClass('active')
                  $('#time-occupied-filter-button').addClass('active')
                  @selectedStat = 'Time occupied'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#time-idle-filter-button').off('click').on 'click', =>
              if @selectedStat != 'timeIdle'
                  $('.filter-button').removeClass('active')
                  $('#time-idle-filter-button').addClass('active')
                  @selectedStat = 'Time idle'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#mileage-enroute-filter-button').off('click').on 'click', =>
              if @selectedStat != 'mileageEnroute'
                  $('.filter-button').removeClass('active')
                  $('#mileage-enroute-filter-button').addClass('active')
                  @selectedStat = 'Mileage enroute'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#mileage-occupied-filter-button').off('click').on 'click', =>
              if @selectedStat != 'mileageOccupied'
                  $('.filter-button').removeClass('active')
                  $('#mileage-occupied-filter-button').addClass('active')
                  @selectedStat = 'Mileage occupied'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#service-goal-filter-button').off('click').on 'click', =>
              if @selectedStat != 'serviceGoal'
                  $('.filter-button').removeClass('active')
                  $('#service-goal-filter-button').addClass('active')
                  @selectedStat = 'Service goal'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#service-lateness-filter-button').off('click').on 'click', =>
              if @selectedStat != 'serviceLateness'
                  $('.filter-button').removeClass('active')
                  $('#service-lateness-filter-button').addClass('active')
                  @selectedStat = 'Out service'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#ratings-drivers-filter-button').off('click').on 'click', =>
              if @selectedStat != 'ratingDrivers'
                  $('.filter-button').removeClass('active')
                  $('#ratings-drivers-filter-button').addClass('active')
                  @selectedStat = 'Rating drivers'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


          $('#ratings-passengers-filter-button').off('click').on 'click', =>
              if @selectedStat != 'ratingPassengers'
                  $('.filter-button').removeClass('active')
                  $('#ratings-passengers-filter-button').addClass('active')
                  @selectedStat = 'Rating passengers'
                  @togglesChanged = true
                  @update()
                  @togglesChanged = false


  update: () =>
      if @chartTypeChanged and @chartType == 'series'
          $('#map-container').hide()
          $('#time-series-container').show()
          @loadCharts()
      else if @chartTypeChanged and @chartType == 'map'
          $('#time-series-container').hide()
          $('#map-container').show()
          if !@map?
              @loadMap()
              google.maps.event.addDomListenerOnce(@map, "tilesloaded", () =>
                  google.maps.event.addDomListenerOnce(@map, "tilesloaded", @update()))
          else
              google.maps.event.trigger(@map,'resize')

      if @dataModeChanged
          if @forecastDataMode
              $('#chart-title>h2').html 'Forecast'
              if @chartType == 'series'
                  $('#historic-chart-container').hide()
                  $('#forecast-chart-container').show()
                  @loadCharts()
          else
              $('#chart-title>h2').html 'Historic'
              if @chartType == 'series'
                  $('#forecast-chart-container').hide()
                  $('#historic-chart-container').show()
                  @loadCharts()

      if @realtimeMode and not @updatingRealTime
          @updatingRealTime = true
          @updateRealTime()
      else if @dateChanged or @togglesChanged
          @updateTimeRange()
      
  updateRealTime: () =>
    [startDate, intervalName, bucketSize, dates, intervals] = @getRealTimeQueryParams()
    $.get '/mongo_db/trips_count?startDate=' + startDate + '&interval=' + intervalName + '&bucketSize=' + bucketSize, (data) =>
      @setSeries @mongoDbTripCountToSeries(data, dates, intervals)
      @updatingRealTime = false

  getRealTimeQueryParams: () =>
      startDate = new Date()
      intervalCount = 0
      bucketSize = 1
      intervalName = ''
      if @realtimeModeInterval.seconds
          startDate.setMinutes(startDate.getMinutes()-10)
          intervalCount = 41
          bucketSize = 15
          intervalName = 'second'
      else if @realtimeModeInterval.minutes
          startDate.setHours(startDate.getHours()-10)
          intervalCount = 41
          bucketSize = 15
          intervalName = 'minute'
      else if @realtimeModeInterval.hours
          startDate.setDate(startDate.getDate()-2)
          intervalCount = 49
          intervalName = 'hour'
      else if @realtimeModeInterval.days
          startDate.setMonth(startDate.getMonth()-1)
          intervalCount = 33
          intervalName = 'day'
      else if @realtimeModeInterval.weeks
          startDate.setMonth(startDate.getMonth()-3)
          intervalCount = 14
          intervalName = 'week'
      returnDate = new Date(startDate)

      [dates, intervalIds] = @getDatesByInterval(startDate, intervalName, intervalCount, bucketSize)
      return [returnDate, intervalName, bucketSize, dates, intervalIds]

  updateTimeRange: () =>
      [intervalName, bucketSize, dates, intervals] = @getTimeRangeQueryParams(new Date(@startDate), new Date(@endDate))
      $.get '/mongo_db/trips_count?startDate=' + @startDate + '&endDate=' + @endDate + '&interval=' + intervalName + '&bucketSize=' + bucketSize, (data) =>
        @setSeries @mongoDbTripCountToSeries(data, dates, intervals)

  getTimeRangeQueryParams: (startDate, endDate) =>
    days = daysBetween(startDate, endDate)
    intervalCount = 0
    bucketSize = 1
    intervalName = ''

    if days < 3
        intervalCount = days * 24
        intervalName = 'hour'
    else if days >= 3 and days < 7
        bucketSize = 8
        intervalCount = days * 24 / bucketSize
        intervalName = 'hour'
    else if days < 61
        intervalCount = days
        intervalName = 'day'
    else
        intervalCount = (days / 7).toFixed(0)
        intervalName = 'week'

    [dates, intervalIds] = @getDatesByInterval(startDate, intervalName, intervalCount, bucketSize)
    return [intervalName, bucketSize, dates, intervalIds]


  getDatesByInterval: (startDate, intervalName, intervalCount, bucketSize) =>
      dates = []
      intervalIds = []
      for i in [0..intervalCount]
          interval = 0
          switch intervalName
              when 'second'
                  interval = startDate.getUTCHours()*3600 + startDate.getUTCMinutes()*60 + startDate.getUTCSeconds()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setSeconds(startDate.getSeconds() + bucketSize)
              when 'minute'
                  interval = startDate.getUTCHours()*60 + startDate.getUTCMinutes()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setMinutes(startDate.getMinutes() + bucketSize)
              when 'hour'
                  interval = startDate.getDayOfYear() * 24 + startDate.getUTCHours()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setHours(startDate.getHours() + bucketSize)
              when 'day'
                  interval = startDate.getDayOfYear()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setDate(startDate.getDate() + bucketSize)
              when 'week'
                  interval = startDate.getWeek()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setDate(startDate.getDate() + 7)
      return [dates, intervalIds]

  mongoDbTripCountToSeries: (data, dates, intervals) =>
      @tripsArrival.data = []
      @tripsCompleted.data = []
      @tripsRejected.data = []
      @tripsCancelled.data = []
      @tripsError.data = []

      @YAxisMax = 0
      i = 0
      for interval in intervals
          date = dates[i]
          id = interval
          countComplete = 0
          countCancelled = 0
          countRejected = 0
          countError = 0

          if @tripsArrivalSelected
              count = data.filter((v) -> v._id.Status == 'Arrival' and v._id.Interval == parseInt(id))
              countArrival = if count.length == 0 then 0 else count[0].count
          if @tripsCompletedSelected
            count = data.filter((v) -> v._id.Status == 'Complete' and v._id.Interval == parseInt(id))
            countComplete = if count.length == 0 then 0 else count[0].count
          if @tripsCancelledSelected
            count = data.filter((v) -> v._id.Status == 'Cancelled' and v._id.Interval == parseInt(id))
            countCancelled = if count.length == 0 then 0 else count[0].count
          if @tripsRejectedSelected
            count = data.filter((v) -> v._id.Status == 'Rejected' and v._id.Interval == parseInt(id))
            countRejected = if count.length == 0 then 0 else count[0].count
          if @tripsErrorSelected
            count = data.filter((v) -> v._id.Status == 'Error' and v._id.Interval == parseInt(id))
            countError = if count.length == 0 then 0 else count[0].count
          total = countArrival + countComplete + countCancelled + countRejected + countError

          if @percentageMode
              countArrival = if countArrival > 0 then countArrival * 100 / total else 0
              countComplete = if countComplete > 0 then countComplete * 100 / total else 0
              countCancelled = if countCancelled > 0 then countCancelled * 100 / total else 0
              countRejected = if countRejected > 0 then countRejected * 100 / total else 0
              countError = if countError > 0 then countError * 100 / total else 0

          if @tripsArrivalSelected
              @tripsArrival.data.push [date, countArrival]
              @YAxisMax = if countArrival > @YAxisMax then countArrival else @YAxisMax
          if @tripsCompletedSelected
              @tripsCompleted.data.push [date, countComplete]
              @YAxisMax = if countComplete > @YAxisMax then countComplete else @YAxisMax
          if @tripsRejectedSelected
              @tripsRejected.data.push [date, countRejected]
              @YAxisMax = if countRejected > @YAxisMax then countRejected else @YAxisMax
          if @tripsCancelledSelected
              @tripsCancelled.data.push [date, countCancelled]
              @YAxisMax = if countCancelled > @YAxisMax then countCancelled else @YAxisMax
          if @tripsErrorSelected
              @tripsError.data.push [date, countError]
              @YAxisMax = if countError > @YAxisMax then countError else @YAxisMax

          i++

      updateData = []
      updateData.push({
          name: 'Arrival trips'
          data: @tripsArrival
          load: @tripsArrivalSelected
      })
      updateData.push({
          name: 'Completed trips'
          data: @tripsCompleted
          load: @tripsCompletedSelected
      })
      updateData.push({
          name: 'Rejected trips'
          data: @tripsRejected
          load: @tripsRejectedSelected
      })
      updateData.push({
          name: 'Cancelled trips'
          data: @tripsCancelled
          load: @tripsCancelledSelected
      })
      updateData.push({
          name: 'Error trips'
          data: @tripsError
          load: @tripsErrorSelected
      })
      return updateData

  setSeries: (series) =>
    if @chartType == 'series'
        for serie in series
            if @forecastDataMode
                s = @forecastChart.get(serie.data.name)
                if s?
                    s.remove(false)
                if serie.load
                    @forecastChart.addSeries(serie.data, false, false)
            else
                s = @historicChart.get(serie.data.name)
                if s?
                    s.remove(false)
                if serie.load
                    @historicChart.addSeries(serie.data, false, false)
        if not @percentageMode
            if @forecastDataMode
                @forecastChart.yAxis[0].setExtremes(0, @YAxisMax)
            else
                @historicChart.yAxis[0].setExtremes(0, @YAxisMax)
        else
            if @forecastDataMode
                @forecastChart.yAxis[0].setExtremes(0, 100)
            else
                @historicChart.yAxis[0].setExtremes(0, 100)
        @refreshCharts()
    else
        last10Minutes = new Date();
        last10Minutes.setMinutes(last10Minutes.getMinutes()-10);
        date = +last10Minutes / 1000;
        $.get '/mongo_db/trips_list?startDate=' + date, (trips) =>
          @loadHeatMapTrips(trips, series)

  loadHeatMapTrips: (trips, series) =>
      tripsIds = []
      for newTrip in trips
          tripsIds.push newTrip._id
          if newTrip.id not of @tripsById
              @processTrip(newTrip)

      for id, trip of @tripsById
          if id not in tripsIds
              delete @tripsById[id]
      @drawHeatMap(series)

  drawHeatMap: (series) =>
      taxiData = []
      weight = 0
      if @realtimeMode
          if not @percentageMode
             weightValue = series[0].data.data[0][1] * 20
             weight = if weightValue > 100 then 100 else weightValue
          else
             weight = series[0].data.data[0][1]
      else
        for serie in series
            if serie.name == @selectedStat
                weight = series[0].data.data[0][1]
                break
      for key of @tripsById
          if @selectedFleet == 'All' or @selectedFleet == @tripsById[key].servicing
              locationPickUp = new google.maps.LatLng(@tripsById[key].pickupLocation.lat,@tripsById[key].pickupLocation.lng)
              locationDropoff =  new google.maps.LatLng(@tripsById[key].dropoffLocation.lat,@tripsById[key].dropoffLocation.lng)
              if window.selectedGeographicZone is null
                  taxiData.push {
                      location: locationPickUp,
                      weight: weight
                  }
                  taxiData.push {
                      location: locationDropoff,
                      weight: weight
                  }
              else
                  if window.selectedGeographicZone.isHere(locationPickUp)
                      taxiData.push {
                          location: locationPickUp,
                          weight: weight
                      }
                  if window.selectedGeographicZone.isHere(locationDropoff)
                      taxiData.push {
                          location: locationDropoff,
                          weight: weight
                      }
      if @selectedFleet != 'All'
          @map.panTo(new google.maps.LatLng(@fleets[@selectedFleet].coverage[0].center.lat, @fleets[@selectedFleet].coverage[0].center.lng))
      @heatmap.setMap null
      gradient = [ "rgba(0, 255, 255, 0)", "rgba(13, 0, 229, 1)", "rgba(0, 74, 225, 1)", "rgba(0, 159, 221, 1)", "rgba(0, 217, 193, 1)", "rgba(0, 213, 106, 1)", "rgba(0, 210, 22, 1)", "rgba(58, 206, 0, 1)", "rgba(135, 202, 0, 1)", "rgba(198, 186, 0, 1)", "rgba(194, 106, 0, 1)", "rgba(191, 30, 0, 1)" ]
      @heatmap = new google.maps.visualization.HeatmapLayer({
          data: taxiData,
          radius: 20,
          maxIntensity: 100,
          gradient: gradient
      })
      @heatmap.setMap @map

  processTrip: (newTrip) =>
      driverLocation =
          if newTrip.driverLocation? then new Location(newTrip.driverLocation.lat, newTrip.driverLocation.lng, null) else null
      driverInitialLocation =
          if newTrip.driverInitialLocation? then new Location(newTrip.driverInitialLocation.lat, newTrip.driverInitalLocation.lng, null) else null
      trip = new Trip(
              newTrip._id
              newTrip.passengerName
              newTrip.pickupTime
              new Location(newTrip.PickupLocation.Lat, newTrip.PickupLocation.Lng, null, false)
              newTrip.OriginatingPartnerName
              newTrip.ServicingPartnerName
              newTrip.status
              newTrip.eta
              newTrip.price
              newTrip.driverName
              driverLocation
              new Location(newTrip.DropoffLocation.Lat, newTrip.DropoffLocation.Lng, null, false)
              driverInitialLocation
      )
      @tripsById[trip.getId()] = trip

  loadMap: () =>
      mapOptions =
          zoom: 4
          center: new google.maps.LatLng(37.09024, -95.712891)
          mapTypeId: google.maps.MapTypeId.TERRAIN
          disableDefaultUI: false
          scrollwheel: true
          draggable: true
          navigationControl: true
          mapTypeControl: false
          scaleControl: true
          disableDoubleClickZoom: false
      @map = new google.maps.Map(document.getElementById(@mapContainer), mapOptions)
      @heatmap = new google.maps.visualization.HeatmapLayer()
      drawingManager = new google.maps.drawing.DrawingManager(
          drawingMode: google.maps.drawing.OverlayType.CIRCLE
          drawingControl: true
          drawingControlOptions:
              position: google.maps.ControlPosition.TOP_CENTER
              drawingModes: [google.maps.drawing.OverlayType.CIRCLE ]

          circleOptions:
              fillColor: "#ffff00"
              fillOpacity: .13
              strokeWeight: 2
              clickable: false
              zIndex: 1
              editable: true
      )
      drawingManager.setMap @map
      google.maps.event.addListener drawingManager, "circlecomplete", (circle) ->
         circle.isHere = (latLng) ->
            @getBounds().contains(latLng) and google.maps.geometry.spherical.computeDistanceBetween(@getCenter(), latLng) <= @getRadius()
         if window.selectedGeographicZone isnt null
            window.selectedGeographicZone.setMap null
         window.selectedGeographicZone = circle
         window.timeSeries.updateRealTime()

  loadSelectorFilters: (fleets) =>
      for fleet in fleets.fleets
          if fleet.partnerName == "TDispatch"
              continue
          if fleet.partnerName of @networks
              @networks[fleet.partnerName].push fleet.fleetName
          else
              @networks[fleet.partnerName] =  [fleet.fleetName]
          @fleets[fleet.fleetName] = fleet
          $('#networks-select').append('<option value="' + fleet.partnerName + '">' + fleet.partnerName + '</option>')
          $('#fleets-select').append('<option value="' + fleet.fleetName + '">' + fleet.fleetName + '</option>')

  loadCharts: () =>
    if @forecastDataMode
        @forecastChart = new Highcharts.Chart
          chart:
              renderTo: @forecastChartContainerId
              type: 'spline'
          title:
              text: ''
          xAxis:
              type: 'datetime',
              dateTimeLabelFormats:
                  month: '%e. %b',
                  year: '%b'
              title:
                  text: ''
          yAxis:
              title:
                  text: ''
              max: 100
          tooltip:
              headerFormat: '<b>{series.name}</b><br>',
              pointFormat: '{point.x:%e. %b}: {point.y:.2f}'
          series: [

          ]
    else
        @historicChart = new Highcharts.Chart
          chart:
            renderTo: @historicChartContainerId
            type: 'spline'
          title:
            text: ''
          xAxis:
            type: 'datetime',
            dateTimeLabelFormats:
              month: '%e. %b',
              year: '%b'
            title:
              text: ''
          yAxis:
            title:
              text: ''
            max: 100
          tooltip:
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x:%e. %b}: {point.y:.2f}'
          series: [

          ]

  refreshCharts: () =>
    if @historicChart?
        @historicChart.redraw()
    if @forecastChart?
        @forecastChart.redraw()

$('.developer.statistics').ready ->
  window.timeSeries = new TimeSeries(new TripThru($('#access_token').val()), 'historic-chart', 'forecast-chart', 'heat-map')

  clearInterval(window.tripthruinterval)
  window.tripthruinterval = setInterval =>
    timeSeries.update()
  , 15000