Highcharts.setOptions(
  global:
    useUTC: false
)

class TimeSeries

  constructor: (@gateway, @historicChartContainerId, @forecastChartContainerId, @mapContainer) ->
    @gateway.getPartners(@loadSelectorFilters)
    @data = null

    @YAxisMax = 100

    @historicChart = null
    @forecastChart = null
    window.map = null
    @heatmap = null
    window.selectedGeographicZone = null
    @selectedGeographicZone = {
        lat: null
        lng: null
        radius: null
    }
    @networks = {}
    @fleets = {}
    @drivers = {}
    @tripsById = {}
    @series = null


    @selectedStat = 'tripsCompleted'
    @selectedNetwork = 'All'
    @selectedNetworkTemp = ''
    @selectedFleet = 'All'
    @selectedFleetTemp = ''
    @selectedDriver = 'All'
    @chartType = 'series'
    @chartTypeChanged = false
    @realtimeMode = true
    @percentageMode = true
    @forecastDataMode = false
    @farmedInMode = true
    @farmedOutMode = true
    @localTripsMode = true
    @dataModeChanged = false
    @togglesChanged  = false
    @dateChanged = false
    @timeModeChanged = false
    @fleetChanged = false
    @selectedStatsChanged = false
    @zoomChanged = false
    @updatingRealTime = false
    @updatingTimeRange = false
    @realtimeModeInterval  = {
        seconds: true
        minutes: false
        hours: false
        days: false
        weeks: false
        months: false
    }

    @startDate = new Date()
    @startDate.setDate(@startDate.getDate()-7)
    @endDate = new Date()
    $('#start-date').datetimepicker(
      showToday: true
      format: "YYYY/MM/DD HH:mm"
    )
    $('#end-date').datetimepicker(
      showToday: true
      format: "YYYY/MM/DD HH:mm"
    )
    $('#start-date').data('DateTimePicker').setDate(@startDate)
    $('#end-date').data('DateTimePicker').setDate(@endDate)

    @tripsRequestedSelected =   true
    @tripsCompletedSelected =   true
    @tripsCancelledSelected =   true
    @tripsRejectedSelected =    true
    @tripsErrorSelected =       true
    @timeEnrouteSelected =      false
    @timeOccupiedSelected =     false
    @timeIdleSelected =         false
    @mileageEnrouteSelected =   false
    @mileageOccupiedSelected =  false
    @serviceLatenessSelected =  false
    @ratingDriversSelected =    false
    @ratingPassengersSelected = false

    $('#trips-requested-filter-button').addClass('active')
    $('#trips-completed-filter-button').addClass('active')
    $('#trips-rejected-filter-button').addClass('active')
    $('#trips-cancelled-filter-button').addClass('active')
    $('#trips-error-filter-button').addClass('active')
    $('#farmedin-button').addClass('active')
    $('#farmedout-button').addClass('active')
    $('#local-button').addClass('active')
    $('#seconds-button').addClass('active')
    $('#realtime-button').addClass('active')
    $('#datepicker>input').attr("disabled", true)
    $('#time-range-panel').addClass('hidden')

    @tripsRequested =   { name: 'Requested trips', id: 'Requested trips', data: []}
    @tripsCompleted = { name: 'Completed trips', id: 'Completed trips', data: []}
    @tripsCancelled = { name: 'Cancelled trips', id: 'Cancelled trips', data: []}
    @tripsRejected =  { name: 'Rejected trips', id: 'Rejected trips', data: []}
    @tripsError =     { name: 'Error trips', id: 'Error trips', data: []}
    @timeEnroute =      { name: 'Time enroute', id: 'Time enroute', data: []}
    @timeOccupied =     { name: 'Time occupied', id: 'Time occupied', data: []}
    @timeIdle =         { name: 'Time idle', id: 'Time idle', data: []}
    @mileageEnroute =   { name: 'Mileage enroute', id: 'Mileage enroute', data: []}
    @mileageOccupied =  { name: 'Mileage occupied', id: 'Mileage occupied', data: []}
    @serviceLateness =  { name: 'Lateness', id: 'Lateness', data: []}
    @ratingDrivers =    { name: 'Drivers rating', id: 'Drivers rating', data: []}
    @ratingPassengers = { name: 'Passengers rating', id: 'Passengers rating', data: []}

    @loadCharts()

    $('#forecast-chart-container').hide()
    @setFilterEvents()

    $('#seconds-button').click =>
        if (@realtimeMode and not $('#seconds-button').hasClass('active')) or not @realtimeMode
            $('#realtime-intervals-container').find('.active').removeClass('active')
            for name of @realtimeModeInterval
                @realtimeModeInterval[name] = false
            $('#seconds-button').addClass('active')
            @realtimeModeInterval.seconds = true
            @realtimeMode = true
        else
            $('#realtime-intervals-container').find('.active').removeClass('active')
            @realtimeMode = false
        @toggleRealTime()

    $('#minutes-button').click =>
      if (@realtimeMode and not $('#minutes-button').hasClass('active')) or not @realtimeMode
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#minutes-button').addClass('active')
          @realtimeModeInterval.minutes = true
          @realtimeMode = true
      else
          $('#realtime-intervals-container').find('.active').removeClass('active')
          @realtimeMode = false
      @toggleRealTime()

    $('#hours-button').click =>
      if (@realtimeMode and not $('#hours-button').hasClass('active')) or not @realtimeMode
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#hours-button').addClass('active')
          @realtimeModeInterval.hours = true
          @realtimeMode = true
      else
          $('#realtime-intervals-container').find('.active').removeClass('active')
          @realtimeMode = false
      @toggleRealTime()

    $('#days-button').click =>
      if (@realtimeMode and not $('#days-button').hasClass('active')) or not @realtimeMode
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#days-button').addClass('active')
          @realtimeModeInterval.days = true
          @realtimeMode = true
      else
          $('#realtime-intervals-container').find('.active').removeClass('active')
          @realtimeMode = false
      @toggleRealTime()

    $('#weeks-button').click =>
      if (@realtimeMode and not $('#weeks-button').hasClass('active')) or not @realtimeMode
          $('#realtime-intervals-container').find('.active').removeClass('active')
          for name of @realtimeModeInterval
            @realtimeModeInterval[name] = false
          $('#weeks-button').addClass('active')
          @realtimeModeInterval.weeks = true
          @realtimeMode = true
      else
          $('#realtime-intervals-container').find('.active').removeClass('active')
          @realtimeMode = false
      @toggleRealTime()

    $('#realtime-button').click =>
      @timeModeChanged = true
      @togglesChanged = true
      if @realtimeMode
        @realtimeMode = false
        $('#realtime-button').val('Time range')
        $('#datepicker>input').attr("disabled", false)
        $('#realtime-intervals-container>input').addClass('disabled')
        $('#realtime-panel').addClass('hidden')
        $('#time-range-panel').removeClass('hidden')
      else
        @realtimeMode = true
        $('#realtime-button').val('Real-time')
        $('#datepicker>input').attr("disabled", true)
        $('#realtime-intervals-container>input').removeClass('disabled')
        $('#realtime-panel').removeClass('hidden')
        $('#time-range-panel').addClass('hidden')
      @update(
        () =>
          @timeModeChanged = false
          @toggledChanged = false
      )

    $('#start-date').on 'dp.change', (e) =>
        @startDate = e.date
        @dateChanged = true
        @update(() => @dateChanged = false)

    $('#end-date').on 'dp.change', (e) =>
        @endDate = e.date
        @dateChanged = true
        @update(() => @dateChanged = false)

    $('#networks-select').change =>
      @selectedNetwork = $('#networks-select option:selected').val()
      @selectedFleet = 'All'
      $('#fleets-select').html '<option value="All" selected="selected">All</option>'
      if @selectedNetwork == 'All'
        for id, fleet of @fleets
          $('#fleets-select').append('<option value="' + fleet.fleetName + '">' + fleet.fleetName + '</option>')
      else
        for fleet in @networks[@selectedNetwork].fleets
          $('#fleets-select').append('<option value="' + fleet + '">' + fleet + '</option>')
      @togglesChanged = true
      @fleetChanged = true
      @update(
          () =>
            @togglesChanged = false
            @fleetChanged = false
      )

    $('#fleets-select').change =>
      @selectedFleet = $('#fleets-select option:selected').val()
      @togglesChanged = true
      @fleetChanged = true
      @update(
          () =>
            @togglesChanged = false
            @fleetChanged = false
      )

    $('#drivers-select').change =>
      @selectedDriver = $('#drivers-select option:selected').val()
      @togglesChanged = true
      @fleetChanged = true
      @update(
        () =>
          @togglesChanged = false
          @fleetChanged = false
      )

    $('#chart-type-toggle-container>#toggle-button').click =>
        if @chartType == 'series'
            @chartType = 'map'
            $('#statistics-toggle').hide()
            $('#heatmap-toggle').show()
        else
            @chartType = 'series'
            $('#heatmap-toggle').hide()
            $('#statistics-toggle').show()
        @chartTypeChanged = true
        @setFilterEvents()
        @update(
            () =>
              @chartTypeChanged = false
        )

    $('#historic-toggle-container>#toggle-button').click =>
        if @forecastDataMode
            $('#forecast-toggle').hide()
            $('#historic-toggle').show()
        else
            $('#historic-toggle').hide()
            $('#forecast-toggle').show()
        @forecastDataMode = not @forecastDataMode
        @dataModeChanged = true
        @update(
            () =>
              @dataModeChanged = false
        )

    $('#data-mode-toggle-container>#toggle-button').click =>
        if @percentageMode
            $('#absolute-toggle').hide()
            $('#percentage-toggle').show()
        else
            $('#percentage-toggle').hide()
            $('#absolute-toggle').show()
        @percentageMode = not @percentageMode
        @togglesChanged = true
        @update(
            () =>
              @togglesChanged = false
        )

    $('#farmedin-button').click =>
      if not @farmedInMode or @farmedOutMode or @localTripsMode
        $('#farmedin-button').toggleClass('active')
        @farmedInMode = not @farmedInMode
        @togglesChanged = true
        @clearZoom = true
        @update(
            () =>
              @togglesChanged = false
              @clearZoom = false
        )

    $('#farmedout-button').click =>
      if not @farmedOutMode or @farmedInMode or @localTripsMode
        $('#farmedout-button').toggleClass('active')
        @farmedOutMode = not @farmedOutMode
        @togglesChanged = true
        @clearZoom = true
        @update(
            () =>
              @togglesChanged = false
              @clearZoom = false
        )

    $('#local-button').click =>
      if not @localTripsMode or @farmedInMode or @farmedOutMode
        $('#local-button').toggleClass('active')
        @localTripsMode = not @localTripsMode
        @togglesChanged = true
        @clearZoom = true
        @update(
          () =>
            @togglesChanged = false
            @clearZoom = false
        )

    @update()

  toggleRealTime: () =>
      @togglesChanged = true
      if @realtimeMode
          @loadCharts()
      @update()

  setFilterEvents: () =>
      if @chartType == 'series'
          $('.filter-button').removeClass('active')
          $('#trips-requested-filter-button').toggleClass('active')
          $('#trips-completed-filter-button').toggleClass('active')
          $('#trips-rejected-filter-button').toggleClass('active')
          $('#trips-cancelled-filter-button').toggleClass('active')
          $('#trips-error-filter-button').toggleClass('active')

          $('#trips-requested-filter-button').off('click').on 'click', =>
            $('#trips-requested-filter-button').toggleClass('active')
            @tripsRequestedSelected= not @tripsRequestedSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
            )
          
          $('#trips-completed-filter-button').off('click').on 'click', =>
            $('#trips-completed-filter-button').toggleClass('active')
            @tripsCompletedSelected= not @tripsCompletedSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#trips-rejected-filter-button').off('click').on 'click', =>
            $('#trips-rejected-filter-button').toggleClass('active')
            @tripsRejectedSelected= not @tripsRejectedSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#trips-cancelled-filter-button').off('click').on 'click', =>
            $('#trips-cancelled-filter-button').toggleClass('active')
            @tripsCancelledSelected= not @tripsCancelledSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#trips-error-filter-button').off('click').on 'click', =>
            $('#trips-error-filter-button').toggleClass('active')
            @tripsErrorSelected= not @tripsErrorSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#time-enroute-filter-button').off('click').on 'click', =>
            $('#time-enroute-filter-button').toggleClass('active')
            @timeEnrouteSelected = not @timeEnrouteSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#time-occupied-filter-button').off('click').on 'click', =>
            $('#time-occupied-filter-button').toggleClass('active')
            @timeOccupiedSelected = not @timeOccupiedSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#time-idle-filter-button').off('click').on 'click', =>
            $('#time-idle-filter-button').toggleClass('active')
            @timeIdleSelected = not @timeIdleSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#mileage-enroute-filter-button').off('click').on 'click', =>
            $('#mileage-enroute-filter-button').toggleClass('active')
            @mileageEnrouteSelected = not @mileageEnrouteSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#mileage-occupied-filter-button').off('click').on 'click', =>
            $('#mileage-occupied-filter-button').toggleClass('active')
            @mileageOccupiedSelected = not @mileageOccupiedSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#service-lateness-filter-button').off('click').on 'click', =>
            $('#service-lateness-filter-button').toggleClass('active')
            @serviceLatenessSelected = not @serviceLatenessSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#ratings-drivers-filter-button').off('click').on 'click', =>
            $('#ratings-drivers-filter-button').toggleClass('active')
            @ratingDriversSelected = not @ratingDriversSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )

          $('#ratings-passengers-filter-button').off('click').on 'click', =>
            $('#ratings-passengers-filter-button').toggleClass('active')
            @ratingPassengersSelected = not @ratingPassengersSelected
            @togglesChanged = true
            @selectedStatsChanged = true
            @update(
              () =>
                @togglesChanged = false
                @selectedStatsChanged = false
            )
      else
          @selectedStat = 'Completed trips'
          $('.filter-button').removeClass('active')
          $('#trips-completed-filter-button').addClass('active')

          $('#trips-requested-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Requested trips'
              $('.filter-button').removeClass('active')
              $('#trips-requested-filter-button').addClass('active')
              @selectedStat = 'Requested trips'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )

          $('#trips-completed-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Completed trips'
              $('.filter-button').removeClass('active')
              $('#trips-completed-filter-button').addClass('active')
              @selectedStat = 'Completed trips'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#trips-rejected-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Rejected trips'
              $('.filter-button').removeClass('active')
              $('#trips-rejected-filter-button').addClass('active')
              @selectedStat = 'Rejected trips'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#trips-cancelled-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Cancelled trips'
              $('.filter-button').removeClass('active')
              $('#trips-cancelled-filter-button').addClass('active')
              @selectedStat = 'Cancelled trips'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#trips-error-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Error trips'
              $('.filter-button').removeClass('active')
              $('#trips-error-filter-button').addClass('active')
              @selectedStat = 'Error trips'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#time-enroute-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Time enroute'
              $('.filter-button').removeClass('active')
              $('#time-enroute-filter-button').addClass('active')
              @selectedStat = 'Time enroute'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#time-occupied-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Time occupied'
              $('.filter-button').removeClass('active')
              $('#time-occupied-filter-button').addClass('active')
              @selectedStat = 'Time occupied'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#time-idle-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Time idle'
              $('.filter-button').removeClass('active')
              $('#time-idle-filter-button').addClass('active')
              @selectedStat = 'Time idle'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#mileage-enroute-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Mileage enroute'
              $('.filter-button').removeClass('active')
              $('#mileage-enroute-filter-button').addClass('active')
              @selectedStat = 'Mileage enroute'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#mileage-occupied-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Mileage occupied'
                $('.filter-button').removeClass('active')
                $('#mileage-occupied-filter-button').addClass('active')
                @selectedStat = 'Mileage occupied'
                @togglesChanged = true
                @selectedStatsChanged = true
                @update(
                  () =>
                    @togglesChanged = false
                    @selectedStatsChanged = false
                )

          $('#service-lateness-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Lateness'
              $('.filter-button').removeClass('active')
              $('#service-lateness-filter-button').addClass('active')
              @selectedStat = 'Lateness'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#ratings-drivers-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Rating drivers'
              $('.filter-button').removeClass('active')
              $('#ratings-drivers-filter-button').addClass('active')
              @selectedStat = 'Rating drivers'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )


          $('#ratings-passengers-filter-button').off('click').on 'click', =>
            if @selectedStat != 'Rating passengers'
              $('.filter-button').removeClass('active')
              $('#ratings-passengers-filter-button').addClass('active')
              @selectedStat = 'Rating passengers'
              @togglesChanged = true
              @selectedStatsChanged = true
              @update(
                () =>
                  @togglesChanged = false
                  @selectedStatsChanged = false
              )

  enableSerie: (name) =>
    for serie in @series
      if serie.name == name
        serie.load = true
        return

  disableSerie: (name) =>
    for serie in @series
      if serie.name == name
        serie.load = false
        return

  update: (callback) =>
      if @chartTypeChanged and @chartType == 'series'
          $('#map-container').hide()
          $('#time-series-container').show()
          @loadCharts()
      else if @chartTypeChanged and @chartType == 'map'
          $('#time-series-container').hide()
          $('#map-container').show()
          if !window.map?
              @loadMap()
              google.maps.event.addDomListenerOnce(window.map, "tilesloaded", () =>
                  google.maps.event.addDomListenerOnce(window.map, "tilesloaded", @update(callback)))
              return
          else
              google.maps.event.trigger(window.map,'resize')

      if @dataModeChanged
          if @forecastDataMode
              $('#chart-title>h2').html 'Forecast'
              if @chartType == 'series'
                  $('#historic-chart-container').hide()
                  $('#forecast-chart-container').show()
                  @loadCharts()
          else
              $('#chart-title>h2').html 'Historic'
              if @chartType == 'series'
                  $('#forecast-chart-container').hide()
                  $('#historic-chart-container').show()
                  @loadCharts()

      if @realtimeMode and not @updatingRealTime
          @showLoadingIndicator()
          @updatingRealTime = true
          @updateRealTime(
              () =>
                  @updatingRealTime = false
                  if callback?
                    callback()
          )
      else if (@dateChanged or @togglesChanged or @chartTypeChanged or @dataModeChanged) and not @updatingTimeRange
          @showLoadingIndicator()
          @updatingTimeRange = true
          @updateTimeRange(
              () =>
                @updatingTimeRange = false
                if callback?
                  callback()
          )
      else
        if callback?
          callback()
      
  updateRealTime: (callback) =>
    [query, dates, intervals] = @getTripsCountRealTimeQuery()
    $.get '/mongo_db/trips_count?' + query + '&by_status=true', (countByStatus) =>
      $.get '/mongo_db/trips_count?' + query + '&by_status=false&by_creation_time=true', (totalCount) =>
        @setSeries @mongoDbTripCountToSeries(countByStatus, totalCount, dates, intervals), callback

  getTripsCountRealTimeQuery: () =>
      startDate = new Date()
      intervalCount = 0
      bucketSize = 1
      intervalName = ''
      if @realtimeModeInterval.seconds
          startDate.setMinutes(startDate.getMinutes()-10)
          intervalCount = 41
          bucketSize = 15
          intervalName = 'second'
      else if @realtimeModeInterval.minutes
          startDate.setHours(startDate.getHours()-10)
          intervalCount = 41
          bucketSize = 15
          intervalName = 'minute'
      else if @realtimeModeInterval.hours
          startDate.setDate(startDate.getDate()-2)
          intervalCount = 49
          intervalName = 'hour'
      else if @realtimeModeInterval.days
          startDate.setMonth(startDate.getMonth()-1)
          intervalCount = 33
          intervalName = 'day'
      else if @realtimeModeInterval.weeks
          startDate.setMonth(startDate.getMonth()-3)
          intervalCount = 14
          intervalName = 'week'
      date = +(new Date(startDate)) / 1000;

      [dates, intervalIds] = @getDatesByInterval(startDate, intervalName, intervalCount, bucketSize)

      query = 'startDate=' + date + '&interval=' + intervalName + '&bucketSize=' + bucketSize + @getCommonQuery()

      return [query, dates, intervalIds]

  updateTimeRange: (callback) =>
    if not @selectedStatsChanged
      [query, dates, intervals] = @getTripsCountTimeRangeQuery(new Date(@startDate), new Date(@endDate))
      $.get '/mongo_db/trips_count?' + query + '&by_status=true', (countByStatus) =>
        $.get '/mongo_db/trips_count?' + query + '&by_status=false&by_creation_time=true', (totalCount) =>
          @setSeries @mongoDbTripCountToSeries(countByStatus, totalCount, dates, intervals), callback
    else
      if @tripsRequestedSelected
        @enableSerie('Requested trips')
      else
        @disableSerie('Requested trips')
      if @tripsCompletedSelected
        @enableSerie('Completed trips')
      else
        @disableSerie('Completed trips')
      if @tripsRejectedSelected
        @enableSerie('Rejected trips')
      else
        @disableSerie('Rejected trips')
      if @tripsCancelledSelected
        @enableSerie('Cancelled trips')
      else
        @disableSerie('Cancelled trips')
      if @tripsErrorSelected
        @enableSerie('Error trips')
      else
        @disableSerie('Error trips')
      @setSeries @series, callback

  getTripsCountTimeRangeQuery: (startDate, endDate) =>
    startMoment = moment(startDate)
    endMoment = moment(endDate)
    days = endMoment.diff(startMoment, 'days')
    intervalCount = 0
    bucketSize = 1
    intervalName = ''

    if days < 1
      hours = endMoment.diff(startMoment, 'hours')
      if hours < 1
        minutes = endMoment.diff(startMoment, 'minutes')
        if minutes <= 15
          bucketSize = 15
          intervalCount = minutes * 60 / bucketSize
          intervalName = 'second'
        else
          intervalCount = minutes
          intervalName = 'minute'
      else if hours < 12
        bucketSize = 5
        intervalCount = hours * 60 / bucketSize
        intervalName = 'minute'
      else
        intervalCount = hours
        intervalName = 'hour'
    else if days >= 1 and days < 3
      intervalCount = days * 24
      intervalName = 'hour'
    else if days >= 3 and days < 7
      bucketSize = 8
      intervalCount = days * 24 / bucketSize
      intervalName = 'hour'
    else if days < 61
      intervalCount = days
      intervalName = 'day'
    else
      intervalCount = (days / 7).toFixed(0)
      intervalName = 'week'

    [dates, intervalIds] = @getDatesByInterval(new Date(startDate), intervalName, intervalCount, bucketSize)

    query = 'startDate=' + (+startDate/1000) + '&endDate=' + (+endDate/1000) + '&interval=' + intervalName + '&bucketSize=' + bucketSize + @getCommonQuery()

    return [query, dates, intervalIds]

  getDatesByInterval: (startDate, intervalName, intervalCount, bucketSize) =>
      dates = []
      intervalIds = []
      for i in [0..intervalCount]
          interval = 0
          switch intervalName
              when 'second'
                  interval = startDate.getUTCHours()*3600 + startDate.getUTCMinutes()*60 + startDate.getUTCSeconds()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setSeconds(startDate.getSeconds() + bucketSize)
              when 'minute'
                  interval = startDate.getUTCHours()*60 + startDate.getUTCMinutes()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setMinutes(startDate.getMinutes() + bucketSize)
              when 'hour'
                  interval = startDate.getDayOfYear() * 24 + startDate.getUTCHours()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setHours(startDate.getHours() + bucketSize)
              when 'day'
                  interval = startDate.getDayOfYear()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setDate(startDate.getDate() + bucketSize)
              when 'week'
                  interval = startDate.getWeek()
                  dates.push startDate.getTime()
                  intervalIds.push (interval/bucketSize).toFixed(0)
                  startDate.setDate(startDate.getDate() + 7)
      return [dates, intervalIds]

  mongoDbTripCountToSeries: (countByStatus, totalCount, dates, intervals) =>
      @tripsRequested.data = []
      @tripsCompleted.data = []
      @tripsRejected.data = []
      @tripsCancelled.data = []
      @tripsError.data = []
      @serviceLateness.data = []

      @YAxisMax = 0
      i = 0
      for interval in intervals
          date = dates[i]
          id = interval
          countComplete = 0
          countCancelled = 0
          countRejected = 0
          countError = 0
          latenessAverage = 0

          latenessAverages = countByStatus.filter((v) ->
                      (v._id.Status == 'Complete' or
                      v._id.Status == 'Cancelled' or
                      v._id.Status == 'Rejected' or
                      v._id.Status == 'Error') and
                      v._id.Interval == parseInt(id))
          latenessAverage = 0
          for val in latenessAverages
            latenessAverage += val.lateness
          if latenessAverages.length > 0
            latenessAverage /= latenessAverages.length
            latenessAverage /= 60000

          count = countByStatus.filter((v) -> v._id.Status == 'Complete' and v._id.Interval == parseInt(id))
          countComplete = if count.length == 0 then 0 else count[0].count
          count = countByStatus.filter((v) -> v._id.Status == 'Cancelled' and v._id.Interval == parseInt(id))
          countCancelled = if count.length == 0 then 0 else count[0].count
          count = countByStatus.filter((v) -> v._id.Status == 'Rejected' and v._id.Interval == parseInt(id))
          countRejected = if count.length == 0 then 0 else count[0].count
          count = countByStatus.filter((v) -> v._id.Status == 'Error' and v._id.Interval == parseInt(id))
          countError = if count.length == 0 then 0 else count[0].count
          count = totalCount.filter((v) -> v._id.Interval == parseInt(id))
          countRequested = if count.length == 0 then 0 else count[0].count
          total = countComplete + countCancelled + countRejected + countError

          if not @tripsCompletedSelected
            countComplete = 0
          if not @tripsCancelledSelected
            countCancelled = 0
          if not @tripsRejectedSelected
            countRejected = 0
          if not @tripsErrorSelected
            countError = 0
          if not @tripsRequestedSelected
            countRequested = 0
          if not @serviceLatenessSelected
            latenessAverage = 0

          if @percentageMode
              countRequested = if countRequested > 0 then 100 else 0
              countComplete = if countComplete > 0 then countComplete * 100 / total else 0
              countCancelled = if countCancelled > 0 then countCancelled * 100 / total else 0
              countRejected = if countRejected > 0 then countRejected * 100 / total else 0
              countError = if countError > 0 then countError * 100 / total else 0

          if @tripsRequestedSelected
              @tripsRequested.data.push [date, countRequested]
              @YAxisMax = if countRequested > @YAxisMax then countRequested else @YAxisMax
          if @tripsCompletedSelected
              @tripsCompleted.data.push [date, countComplete]
              @YAxisMax = if countComplete > @YAxisMax then countComplete else @YAxisMax
          if @tripsRejectedSelected
              @tripsRejected.data.push [date, countRejected]
              @YAxisMax = if countRejected > @YAxisMax then countRejected else @YAxisMax
          if @tripsCancelledSelected
              @tripsCancelled.data.push [date, countCancelled]
              @YAxisMax = if countCancelled > @YAxisMax then countCancelled else @YAxisMax
          if @tripsErrorSelected
              @tripsError.data.push [date, countError]
              @YAxisMax = if countError > @YAxisMax then countError else @YAxisMax
          if @serviceLatenessSelected
              @serviceLateness.data.push [date, latenessAverage]
              @YAxisMax = if latenessAverage > @YAxisMax then latenessAverage else @YAxisMax

          i++

      updateData = []
      updateData.push({
          name: 'Requested trips'
          data: @tripsRequested
          load: @tripsRequestedSelected
      })
      updateData.push({
          name: 'Completed trips'
          data: @tripsCompleted
          load: @tripsCompletedSelected
      })
      updateData.push({
          name: 'Rejected trips'
          data: @tripsRejected
          load: @tripsRejectedSelected
      })
      updateData.push({
          name: 'Cancelled trips'
          data: @tripsCancelled
          load: @tripsCancelledSelected
      })
      updateData.push({
          name: 'Error trips'
          data: @tripsError
          load: @tripsErrorSelected
      })
      updateData.push({
          name: 'Lateness'
          data: @serviceLateness
          load: @serviceLatenessSelected
      })
      return updateData

  setSeries: (series, callback) =>
    @series = series
    if @chartType == 'series'
        for serie in series
            if @forecastDataMode
                s = @forecastChart.get(serie.data.name)
                if s?
                    s.remove(false)
                if serie.load
                    @forecastChart.addSeries(serie.data, false, false)
            else
                s = @historicChart.get(serie.data.name)
                if s?
                    s.remove(false)
                if serie.load
                    @historicChart.addSeries(serie.data, false, false)
        if not @percentageMode
            if @forecastDataMode
                @forecastChart.yAxis[0].setExtremes(0, @YAxisMax)
            else
                @historicChart.yAxis[0].setExtremes(0, @YAxisMax)
        else
            if @forecastDataMode
                @forecastChart.yAxis[0].setExtremes(0, 100)
            else
                @historicChart.yAxis[0].setExtremes(0, 100)
        @refreshCharts()
        @hideLoadingIndicator()
        if callback?
          callback()
    else
        query = ''
        if @realtimeMode
          query = @getTripsListRealTimeQuery()
        else
          if @shouldUpdateTimeRangeTrips()
            query = @getTripsListTimeRangeQuery(new Date(@startDate), new Date(@endDate))
          else
            @drawHeatMap()
            @hideLoadingIndicator()
            if callback?
              callback()
            return
        $.get '/mongo_db/trips_list?' + query , (trips) =>
          @loadHeatMapTrips(trips)
          @hideLoadingIndicator()
          if callback?
            callback()

  shouldUpdateTimeRangeTrips: () =>
    return @zoomChanged or @dateChanged or @timeModeChanged or (Object.keys(@tripsById).length == 0) or (@selectedFleet != @selectedFleetTemp) or (@selectedNetwork != @selectedNetworkTemp)

  getTripsListRealTimeQuery: () =>
    startDate = new Date()
    if @realtimeModeInterval.seconds
      startDate.setMinutes(startDate.getMinutes()-10)
    else if @realtimeModeInterval.minutes
      startDate.setHours(startDate.getHours()-10)
    else if @realtimeModeInterval.hours
      startDate.setDate(startDate.getDate()-2)
    else if @realtimeModeInterval.days
      startDate.setMonth(startDate.getMonth()-1)
    else if @realtimeModeInterval.weeks
      startDate.setMonth(startDate.getMonth()-3)
    date = +(new Date(startDate)) / 1000

    return 'startDate=' + date + @getCommonQuery()

  getTripsListTimeRangeQuery: (startDate, endDate) =>
    return 'startDate=' + (+startDate/1000) + '&endDate=' + (+endDate/1000) + @getCommonQuery()

  getCommonQuery: () =>
    selectedGeographicZone = ''
    if window.selectedGeographicZone?
      lat = window.selectedGeographicZone.getCenter().lat()
      lng = window.selectedGeographicZone.getCenter().lng()
      radius = window.selectedGeographicZone.getRadius() / 1609.344
      selectedGeographicZone = '&centerLat=' + lat + '&centerLng=' + lng + '&centerRadius=' + radius

    networkId = ''
    id = if @selectedNetwork != 'All' then @networks[@selectedNetwork].id else 'all'
    if @farmedInMode
      networkId += '&servicingNetworkId=' + id
    if @farmedOutMode
      networkId += '&originatingNetworkId=' + id
    if @localTripsMode
      networkId += '&localNetworkId=' + id

    return selectedGeographicZone + networkId

  loadHeatMapTrips: (trips) =>
      tripsIds = []
      for newTrip in trips
        tripsIds.push newTrip._id
        if newTrip.id not of @tripsById
          @processTrip(newTrip)

      for id, trip of @tripsById
          if id not in tripsIds
              delete @tripsById[id]
      @drawHeatMap()

  drawHeatMap: () =>
      data = @series.filter((serie) => serie.name == @selectedStat)
      serie = data[0].data.data
      taxiData = []
      weight = 0
      max = 0
      for value in serie
        weight += value[1]
        if value[1] > max
          max = value[1]
      weight /= serie.length
      weight *= 100 / max
      trips = []
      for key of @tripsById
          trip = @tripsById[key]
          locationPickUp = new google.maps.LatLng(trip.pickupLocation.lat,trip.pickupLocation.lng)
          locationDropoff =  new google.maps.LatLng(trip.dropoffLocation.lat,trip.dropoffLocation.lng)
          if !window.selectedGeographicZone? or (window.selectedGeographicZone.isHere(locationPickUp) and window.selectedGeographicZone.isHere(locationDropoff))
            trips.push {
                  lat: trip.pickupLocation.lat
                  lng: trip.pickupLocation.lng
                }
            if @selectedStat is 'Completed trips'
              taxiData.push {
                location: locationDropoff,
                weight: weight
              }
            else
              taxiData.push {
                location: locationPickUp,
                weight: weight
              }

      @setMapZoom(trips)
      @heatmap.setMap null
      gradient = [ "rgba(0, 255, 255, 0)", "rgba(13, 0, 229, 1)", "rgba(0, 74, 225, 1)", "rgba(0, 159, 221, 1)", "rgba(0, 217, 193, 1)", "rgba(0, 213, 106, 1)", "rgba(0, 210, 22, 1)", "rgba(58, 206, 0, 1)", "rgba(135, 202, 0, 1)", "rgba(198, 186, 0, 1)", "rgba(194, 106, 0, 1)", "rgba(191, 30, 0, 1)" ]
      @heatmap = new google.maps.visualization.HeatmapLayer({
          data: taxiData,
          radius: 20,
          maxIntensity: trips.length,
          gradient: gradient,
      })
      @heatmap.setMap window.map

  setMapZoom: (trips) =>
    if window.map? and (@selectedNetwork isnt @selectedNetworkTemp or @selectedFleet isnt @selectedFleetTemp or @clearZoom)
      @selectedNetworkTemp = @selectedNetwork
      @selectedFleetTemp = @selectedFleet
      if trips.length > 0
        geoCenter = @getCentrePointFromListOfCoordinates(trips)
        bounds = new google.maps.LatLngBounds()
        bounds.extend(new google.maps.LatLng(geoCenter.maxlat, geoCenter.maxlng))
        bounds.extend(new google.maps.LatLng(geoCenter.minlat, geoCenter.minlng))
        window.map.fitBounds(bounds)
      else if @selectedFleet != 'All'
        partnerPosition = new google.maps.LatLng(@fleets[@selectedFleet].coverage[0].center.lat, @fleets[@selectedFleet].coverage[0].center.lng)
        if window.selectedGeographicZone? and !window.selectedGeographicZone.isHere(partnerPosition)
          window.selectedGeographicZone.setMap null
          window.selectedGeographicZone = null
        window.map.panTo partnerPosition
        window.map.setZoom 8
      else
        window.map.panTo new google.maps.LatLng(37.09024, -95.712891)
        window.map.setZoom 4
      @clearZoom = false

  processTrip: (newTrip) =>
      driverLocation =
          if newTrip.driverLocation? then new Location(newTrip.driverLocation.lat, newTrip.driverLocation.lng, null) else null
      driverInitialLocation =
          if newTrip.driverInitialLocation? then new Location(newTrip.driverInitialLocation.lat, newTrip.driverInitalLocation.lng, null) else null
      trip = new Trip(
              newTrip._id
              newTrip.passengerName
              newTrip.pickupTime
              new Location(newTrip.PickupLocation.Lat, newTrip.PickupLocation.Lng, null, false)
              newTrip.OriginatingPartnerName
              newTrip.ServicingPartnerName
              newTrip.status
              newTrip.eta
              newTrip.price
              newTrip.driverName
              driverLocation
              new Location(newTrip.DropoffLocation.Lat, newTrip.DropoffLocation.Lng, null, false)
              driverInitialLocation
      )
      @tripsById[trip.getId()] = trip

  loadMap: () =>
      mapOptions =
          zoom: 4
          center: new google.maps.LatLng(37.09024, -95.712891)
          mapTypeId: google.maps.MapTypeId.TERRAIN
          disableDefaultUI: false
          scrollwheel: true
          draggable: true
          navigationControl: true
          mapTypeControl: false
          scaleControl: true
          disableDoubleClickZoom: false
      window.map = new google.maps.Map(document.getElementById(@mapContainer), mapOptions)
      @heatmap = new google.maps.visualization.HeatmapLayer()
      drawingManager = new google.maps.drawing.DrawingManager(
          drawingMode: null
          drawingControl: true
          drawingControlOptions:
              position: google.maps.ControlPosition.TOP_CENTER
              drawingModes: [google.maps.drawing.OverlayType.CIRCLE ]
          circleOptions:
              fillColor: "#ffff00"
              fillOpacity: .13
              strokeWeight: 2
              clickable: false
              zIndex: 1
              editable: true
      )
      homeControlDiv = document.createElement("div")
      homeControl = new @HomeControl(homeControlDiv, window.map)
      homeControlDiv.index = 1
      window.map.controls[google.maps.ControlPosition.TOP_RIGHT].push homeControlDiv

      drawingManager.setMap window.map
      google.maps.event.addListener drawingManager, "circlecomplete", (circle) ->
         circle.isHere = (latLng) ->
            @getBounds().contains(latLng) and google.maps.geometry.spherical.computeDistanceBetween(@getCenter(), latLng) <= @getRadius()
         if window.selectedGeographicZone isnt null
            window.selectedGeographicZone.setMap null
         window.selectedGeographicZone = circle
         window.map.fitBounds circle.getBounds()
         window.timeSeries.togglesChanged = true
         window.timeSeries.zoomChanged = true
         window.timeSeries.update(
           () =>
             window.timeSeries.togglesChanged = false
             window.timeSeries.zoomChanged = false
         )

  loadSelectorFilters: (fleets) =>
      for fleet in fleets.fleets
          if fleet.partnerName == "TDispatch" or (fleet.partnerId.toLowerCase() != $('#getUserId').html() and $('#getUserRole').html() == 'partner')
              continue
          if fleet.partnerName of @networks
              @networks[fleet.partnerName].fleets.push fleet.fleetName
          else
              @networks[fleet.partnerName] =  {id: fleet.partnerId, fleets: [fleet.fleetName]}
          @fleets[fleet.fleetName] = fleet
          if $('#getUserRole').html() is 'partner'
            $('#networks-select').append('<option value="' + fleet.partnerName + '" selected="selected" >' + fleet.partnerName + '</option>')
            @selectedNetwork = fleet.partnerName
          else
            $('#networks-select').append('<option value="' + fleet.partnerName + '">' + fleet.partnerName + '</option>')
          $('#fleets-select').append('<option value="' + fleet.fleetName + '">' + fleet.fleetName + '</option>')

  HomeControl: (controlDiv, map) =>
        controlDiv.style.padding = "5px"

        controlUI = document.createElement("div")
        controlUI.style.backgroundColor = "white"
        controlUI.style.borderStyle = "solid"
        controlUI.style.borderWidth = "2px"
        controlUI.style.cursor = "pointer"
        controlUI.style.textAlign = "center"
        controlUI.title = "Clear filter"
        controlDiv.appendChild controlUI

        controlText = document.createElement("div")
        controlText.style.fontFamily = "Arial,sans-serif"
        controlText.style.fontSize = "12px"
        controlText.style.paddingLeft = "4px"
        controlText.style.paddingRight = "4px"
        controlText.innerHTML = "<b>Reset</b>"
        controlUI.appendChild controlText

        google.maps.event.addDomListener controlUI, "click", =>
          if window.selectedGeographicZone isnt null
              window.selectedGeographicZone.setMap null
              window.selectedGeographicZone = null
          @togglesChanged = true
          @clearZoom = true
          @zoomChanged = true
          @update(
              () =>
                @togglesChanged = false
                @clearZoom = false
                @zoomChanged = false
          )

  loadCharts: () =>
    if @forecastDataMode
        @forecastChart = new Highcharts.Chart
          chart:
              renderTo: @forecastChartContainerId
              type: 'spline'
          title:
              text: ''
          xAxis:
              type: 'datetime',
              dateTimeLabelFormats:
                  month: '%e. %b',
                  year: '%b'
              title:
                  text: ''
          yAxis:
              title:
                  text: ''
              max: 100
          tooltip:
              headerFormat: '<b>{series.name}</b><br>',
              pointFormat: '{point.x:%e. %b}: {point.y:.2f}'
          series: [

          ]
    else
        @historicChart = new Highcharts.Chart
          chart:
            renderTo: @historicChartContainerId
            type: 'spline'
          title:
            text: ''
          xAxis:
            type: 'datetime',
            dateTimeLabelFormats:
              month: '%e. %b',
              year: '%b'
            title:
              text: ''
          yAxis:
            title:
              text: ''
            max: 100
          tooltip:
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x:%e. %b}: {point.y:.2f}'
          series: [

          ]

  refreshCharts: () =>
    if @historicChart?
        @historicChart.redraw()
    if @forecastChart?
        @forecastChart.redraw()

  showLoadingIndicator: () =>
    $('.loading-indicator>img').show()

  hideLoadingIndicator: () =>
    $('.loading-indicator>img').hide()

  getCentrePointFromListOfCoordinates: (list) =>
    minlat = null
    minlng = null
    maxlat = null
    maxlng = null
    for point in list
        minlat = if !minlat? or point.lat < minlat then point.lat else minlat
        maxlat = if !maxlat? or point.lat > maxlat then point.lat else maxlat
        minlng = if !minlng? or point.lng < minlng then point.lng else minlng
        maxlng = if !maxlng? or point.lng > maxlng then point.lng else maxlng

    lat = maxlat - ((maxlat - minlat)/2)
    lng = maxlng - ((maxlng - minlng)/2)
    {lat: lat, lng: lng, maxlat: maxlat, maxlng: maxlng, minlat: minlat, minlng: minlng}

$('.developer.statistics').ready ->
  window.timeSeries = new TimeSeries(new TripThru($('#access_token').val()), 'historic-chart', 'forecast-chart', 'heat-map')

  clearInterval(window.tripthruinterval)
  window.tripthruinterval = setInterval =>
    timeSeries.update()
  , 15000
